#version 450
#extension GL_EXT_shader_atomic_float : require
layout(column_major) uniform;
layout(column_major) buffer;

#line 8 0
struct SLANG_ParameterGroup_PushConstants_0
{
    int rand_seed_0;
};


#line 8
layout(push_constant)
layout(std140) uniform _S1
{
    int rand_seed_0;
}PushConstants_0;

#line 11
layout(std430, binding = 1) buffer StructuredBuffer_float3_t_0 {
    vec3 _data[];
} u_trans_0;

#line 10
layout(std430, binding = 0) buffer StructuredBuffer_float_t_0 {
    float _data[];
} u_gradient_0;

#line 10
layout(std430, binding = 2) buffer StructuredBuffer_float_t_1 {
    float _data[];
} u_trans_gradient_0;

#line 20 1
uint Hash_CRNG_0(uint seed_0)
{

#line 21
    uint state_0 = seed_0 * 747796405U + 2891336453U;
    uint word_0 = (state_0 >> (state_0 >> 28U) + 4U ^ state_0) * 277803737U;
    return word_0 >> 22U ^ word_0;
}


#line 64
struct RandomSamplerState_0
{
    uint state_1;
};


#line 66
RandomSamplerState_0 InitRandomSampler_0(uvec2 pixelPos_0, uint frameIndex_0)
{

#line 67
    RandomSamplerState_0 r_0;
    r_0.state_1 = frameIndex_0 + Hash_CRNG_0(pixelPos_0.x << 16 | pixelPos_0.y);
    return r_0;
}


#line 31 2
struct DiffPair_float_0
{
    float primal_0;
    float differential_0;
};


#line 1 3
void _d_sqrt_0(inout DiffPair_float_0 dpx_0, float dOut_0)
{

#line 1
    float _S2 = 0.5 / sqrt(max(0.00000010000000116861, dpx_0.primal_0)) * dOut_0;

#line 1
    dpx_0.primal_0 = dpx_0.primal_0;

#line 1
    dpx_0.differential_0 = _S2;

#line 1272 4
    return;
}


#line 1272
void s_bwd_prop_sqrt_0(inout DiffPair_float_0 _S3, float _S4)
{

#line 1272
    _d_sqrt_0(_S3, _S4);

#line 1272
    return;
}


#line 1272
struct DiffPair_float3_0
{
    vec3 primal_0;
    vec3 differential_0;
};


#line 992
void _d_dot_0(inout DiffPair_float3_0 dpx_1, inout DiffPair_float3_0 dpy_0, float dOut_1)
{
    vec3 x_d_result_0;

#line 994
    vec3 y_d_result_0;



    x_d_result_0[0] = dpy_0.primal_0[0] * dOut_1;
    y_d_result_0[0] = dpx_1.primal_0[0] * dOut_1;

#line 998
    x_d_result_0[1] = dpy_0.primal_0[1] * dOut_1;
    y_d_result_0[1] = dpx_1.primal_0[1] * dOut_1;

#line 998
    x_d_result_0[2] = dpy_0.primal_0[2] * dOut_1;
    y_d_result_0[2] = dpx_1.primal_0[2] * dOut_1;

#line 999
    dpx_1.primal_0 = dpx_1.primal_0;

#line 999
    dpx_1.differential_0 = x_d_result_0;

#line 999
    dpy_0.primal_0 = dpy_0.primal_0;

#line 999
    dpy_0.differential_0 = y_d_result_0;



    return;
}


#line 25 2
struct Ray_0
{
    vec3 origin_0;
    vec3 direction_0;
};


#line 41
Ray_0 generateRay_0(ivec2 pixel_0, ivec2 resolution_0)
{
    vec2 p_0 = (vec2(- resolution_0.xy) + 2.0 * vec2(pixel_0)) / float(resolution_0.y);

#line 42
    Ray_0 ray_0;

    ray_0.origin_0 = vec3(0.0, 0.0, 4.0);
    ray_0.direction_0 = normalize(vec3(p_0, -2.0));
    return ray_0;
}


#line 34
struct RayDifferential_0
{
    vec3 dodx_0;
    vec3 dody_0;
    vec3 dddx_0;
    vec3 dddy_0;
};


#line 49
RayDifferential_0 generateRayDifferential_0(ivec2 pixel_1, ivec2 resolution_1)
{
    Ray_0 rx_0 = generateRay_0(pixel_1 + ivec2(1, 0), resolution_1);
    Ray_0 ry_0 = generateRay_0(pixel_1 + ivec2(0, 1), resolution_1);

#line 50
    RayDifferential_0 raydiff_0;


    raydiff_0.dodx_0 = rx_0.origin_0;
    raydiff_0.dody_0 = ry_0.origin_0;
    raydiff_0.dddx_0 = rx_0.direction_0;
    raydiff_0.dddy_0 = ry_0.direction_0;
    return raydiff_0;
}


#line 25
struct s_diff_Ray_0
{
    vec3 origin_1;
    vec3 direction_1;
};


#line 25
s_diff_Ray_0 Ray_x24_syn_dzero_0()
{

#line 25
    s_diff_Ray_0 result_0;

#line 1127 5
    vec3 _S5 = vec3(0.0);

#line 1127
    result_0.origin_1 = _S5;

#line 1127
    result_0.direction_1 = _S5;

#line 1127
    return result_0;
}


#line 60 2
struct s_diff_HitAD_0
{
    vec3 position_0;
};


#line 60
s_diff_HitAD_0 HitAD_x24_syn_dzero_0()
{

#line 60
    s_diff_HitAD_0 result_1;

#line 60
    result_1.position_0 = vec3(0.0);

#line 60
    return result_1;
}


#line 60
s_diff_HitAD_0 HitAD_x24_syn_dadd_0(s_diff_HitAD_0 SLANG_anonymous_0_0, s_diff_HitAD_0 SLANG_anonymous_1_0)
{

#line 60
    s_diff_HitAD_0 result_2;

#line 60
    result_2.position_0 = SLANG_anonymous_0_0.position_0 + SLANG_anonymous_1_0.position_0;

#line 60
    return result_2;
}


#line 60
float s_primal_ctx_min_0(float _S6, float _S7)
{

#line 60
    return min(_S6, _S7);
}


#line 60
float s_primal_ctx_acos_0(float _S8)
{

#line 60
    return acos(_S8);
}


#line 60
float s_primal_ctx_cos_0(float _S9)
{

#line 60
    return cos(_S9);
}


#line 31 6
struct vMFDistribution_0
{
    vec3 u_0;
    float k_0;
};


#line 76
vMFDistribution_0 vMFDistribution_x24init_0(vec3 u_1, float v_0)
{

#line 76
    vMFDistribution_0 _S10;
    _S10.u_0 = u_1;
    _S10.k_0 = v_0;

#line 76
    return _S10;
}


#line 72 1
uint StepRNG_0(uint rngState_0)
{

#line 73
    return rngState_0 * 747796405U + 1U;
}

float StepAndOutputRNGFloat_0(inout RandomSamplerState_0 rngState_1)
{

    uint _S11 = StepRNG_0(rngState_1.state_1);

#line 79
    rngState_1.state_1 = _S11;
    uint word_1 = (_S11 >> (_S11 >> 28) + 4U ^ _S11) * 277803737U;

    return float(word_1 >> 22 ^ word_1) / 4294967296.0;
}


#line 93
float SampleUniformFloat_0(inout RandomSamplerState_0 r_1)
{

#line 94
    float _S12 = StepAndOutputRNGFloat_0(r_1);

#line 94
    return _S12;
}


#line 155
float GetNextRandom_0(inout RandomSamplerState_0 r_2)
{

#line 156
    float _S13 = SampleUniformFloat_0(r_2);

#line 156
    return _S13;
}

vec2 GetNextRandomFloat2_0(inout RandomSamplerState_0 r_3)
{

#line 160
    float _S14 = GetNextRandom_0(r_3);

#line 160
    float _S15 = GetNextRandom_0(r_3);

#line 160
    return vec2(_S14, _S15);
}


#line 11 7
vec3 UniformOnSphere_0(vec2 u_2)
{

#line 12
    float z_0 = 1.0 - 2.0 * u_2.x;
    float r_4 = sqrt(max(0.0, 1.0 - z_0 * z_0));
    float phi_0 = 6.28318548202514648438 * u_2[1];
    return vec3(r_4 * cos(phi_0), r_4 * sin(phi_0), z_0);
}


#line 1 3
void _d_exp_0(inout DiffPair_float_0 dpx_2, float dOut_2)
{

#line 1
    float _S16 = exp(dpx_2.primal_0) * dOut_2;

#line 1
    dpx_2.primal_0 = dpx_2.primal_0;

#line 1
    dpx_2.differential_0 = _S16;

#line 1272 4
    return;
}


#line 1272
float s_primal_ctx_exp_0(float _S17)
{

#line 1272
    return exp(_S17);
}


#line 1272
void s_bwd_prop_exp_0(inout DiffPair_float_0 _S18, float _S19)
{

#line 1272
    _d_exp_0(_S18, _S19);

#line 1272
    return;
}


#line 42 8
mat3x3 createFrame_0(vec3 n_0)
{

#line 43
    if(n_0[2] < -0.99999898672103881836)
    {

#line 44
        return mat3x3(vec3(0.0, -1.0, 0.0), vec3(-1.0, 0.0, 0.0), n_0);
    }
    else
    {

#line 46
        float a_0 = 1.0 / (1.0 + n_0[2]);
        float _S20 = - n_0[0];

#line 47
        float b_0 = _S20 * n_0[1] * a_0;
        return mat3x3(vec3(1.0 - n_0[0] * n_0[0] * a_0, b_0, _S20), vec3(b_0, 1.0 - n_0[1] * n_0[1] * a_0, - n_0[1]), n_0);
    }

#line 48
}


#line 59
mat3x3 createONB_0(vec3 n_1)
{

#line 60
    return createFrame_0(n_1);
}


#line 7
vec3 to_world_0(mat3x3 frame_0, vec3 v_1)
{

#line 8
    return v_1[0] * frame_0[0] + v_1[1] * frame_0[1] + v_1[2] * frame_0[2];
}


#line 40 6
vec3 vMFDistribution_DrawSample_0(vMFDistribution_0 this_0, vec2 rnd_0)
{

#line 41
    if(this_0.k_0 == 0.0)
    {

#line 41
        return UniformOnSphere_0(rnd_0);
    }

#line 42
    float _S21 = rnd_0.y;

#line 42
    float W_0 = 1.0 + log(_S21 + (1.0 - _S21) * exp(-2.0 * this_0.k_0)) / this_0.k_0;
    float _S22 = 6.28318548202514648438 * rnd_0.x;


    return to_world_0(createONB_0(this_0.u_0), vec3(sqrt(1.0 - W_0 * W_0) * vec2(cos(_S22), sin(_S22)), W_0));
}


#line 1039 4
void _d_cross_0(inout DiffPair_float3_0 a_1, inout DiffPair_float3_0 b_1, vec3 dOut_3)
{

#line 1046
    float _S23 = dOut_3.y;

#line 1046
    float _S24 = dOut_3.z;
    float _S25 = dOut_3.x;

#line 1047
    float _S26 = a_1.primal_0.z * _S23 + - a_1.primal_0.y * _S24;

#line 1047
    float _S27 = - a_1.primal_0.z * _S25 + a_1.primal_0.x * _S24;

#line 1047
    float _S28 = a_1.primal_0.y * _S25 + - a_1.primal_0.x * _S23;

#line 1054
    vec3 _S29 = vec3(- b_1.primal_0.z * _S23 + b_1.primal_0.y * _S24, b_1.primal_0.z * _S25 + - b_1.primal_0.x * _S24, - b_1.primal_0.y * _S25 + b_1.primal_0.x * _S23);

#line 1054
    a_1.primal_0 = a_1.primal_0;

#line 1054
    a_1.differential_0 = _S29;
    vec3 _S30 = vec3(_S26, _S27, _S28);

#line 1055
    b_1.primal_0 = b_1.primal_0;

#line 1055
    b_1.differential_0 = _S30;
    return;
}


#line 5 2
vec3 triIntersect_0(vec3 ro_0, vec3 direction_2, vec3 v0_0, vec3 v1_0, vec3 v2_0)
{


    vec3 v1v0_0 = v1_0 - v0_0;
    vec3 v2v0_0 = v2_0 - v0_0;
    vec3 rov0_0 = ro_0 - v0_0;

    vec3 n_2 = cross(v1v0_0, v2v0_0);
    vec3 q_0 = cross(rov0_0, direction_2);
    float d_0 = 1.0 / dot(direction_2, n_2);
    float u_3 = d_0 * dot(- q_0, v2v0_0);
    float v_2 = d_0 * dot(q_0, v1v0_0);
    float _S31 = d_0 * dot(- n_2, rov0_0);

#line 18
    float t_0;

    if(u_3 < 0.0 || v_2 < 0.0 || u_3 + v_2 > 1.0)
    {

#line 20
        t_0 = -1.0;

#line 20
    }
    else
    {

#line 20
        t_0 = _S31;

#line 20
    }

    return vec3(t_0, u_3, v_2);
}


#line 60
struct HitAD_0
{
    vec3 position_1;
    vec3 normal_0;
    vec3 color_0;
    uint geometryID_0;
    bool hasHit_0;
    vec2 uv_0;
    vec2 bary_0;
};


#line 94
HitAD_0 ray_tracing_0(Ray_0 ray_1, vec3 translation_0)
{
    const vec3 _S32 = vec3(1.5, 1.0, 1.0);

#line 96
    vec3 v1_1 = cos(vec3(2.0, 1.0, 1.0) + 1.0) * _S32 + translation_0;
    vec3 v2_1 = cos(vec3(5.0, 2.0, 3.0) + 2.0) * _S32 + translation_0;
    vec3 v3_0 = cos(vec3(1.0, 3.0, 5.0) + 4.0) * _S32 + translation_0;

#line 104
    vec3 col_0 = (vec3(0.07999999821186065674) + 0.01999999955296516418 * ray_1.direction_0.y) * 0.69999998807907104492;

    HitAD_0 hit_0;

    vec3 res_0 = triIntersect_0(ray_1.origin_0, ray_1.direction_0, v1_1, v2_1, v3_0);
    float t2_0 = res_0.x;

#line 109
    vec3 col_1;
    if(t2_0 > 0.0 && t2_0 < 10000000000.0)
    {


        vec3 nor_0 = normalize(cross(v2_1 - v1_1, v3_0 - v1_1));

        vec3 col_2 = vec3(0.80000001192092895508, 0.40000000596046447754, 0.60000002384185791016) * (0.55000001192092895508 + 0.44999998807907104492 * faceforward(- nor_0, - ray_1.direction_0, nor_0).y);

        hit_0.hasHit_0 = true;
        hit_0.position_1 = ray_1.origin_0 + t2_0 * ray_1.direction_0;
        hit_0.uv_0 = res_0.yz;
        hit_0.normal_0 = nor_0;

#line 121
        col_1 = col_2;

#line 121
    }
    else
    {
        hit_0.hasHit_0 = false;

#line 124
        col_1 = col_0;

#line 124
    }


    hit_0.color_0 = col_1;
    return hit_0;
}


#line 70
bool HasHit_0(HitAD_0 hit_1)
{

#line 71
    return hit_1.hasHit_0;
}


#line 1 3
void _d_abs_0(inout DiffPair_float_0 dpx_3, float dOut_4)
{

#line 1
    float _S33 = (dpx_3.primal_0 > 0.0 ? 1.0 : dpx_3.primal_0 == 0.0 ? 0.0 : -1.0) * dOut_4;

#line 1
    dpx_3.primal_0 = dpx_3.primal_0;

#line 1
    dpx_3.differential_0 = _S33;

#line 1272 4
    return;
}


#line 1272
float s_primal_ctx_abs_0(float _S34)
{

#line 1272
    return abs(_S34);
}


#line 1272
void s_bwd_prop_abs_0(inout DiffPair_float_0 _S35, float _S36)
{

#line 1272
    _d_abs_0(_S35, _S36);

#line 1272
    return;
}


#line 1272
float s_primal_ctx_determinant_0(mat3x3 _S37)
{

#line 1272
    return determinant(_S37);
}


#line 1272
struct DiffPair_float3x3_0
{
    mat3x3 primal_0;
    mat3x3 differential_0;
};


#line 900
void s_bwd_prop_determinant_impl_0(inout DiffPair_float3x3_0 dpm_0, float _s_dOut_0)
{

#line 900
    float _S38 = dpm_0.primal_0[2][0] * _s_dOut_0;

#line 900
    float _S39 = (dpm_0.primal_0[0][1] * dpm_0.primal_0[1][2] - dpm_0.primal_0[1][1] * dpm_0.primal_0[0][2]) * _s_dOut_0;

#line 900
    float _S40 = - _S38;

#line 900
    float _S41 = dpm_0.primal_0[0][2] * _S40;

#line 900
    float _S42 = - _s_dOut_0;

#line 900
    float _S43 = dpm_0.primal_0[1][0] * _S42;

#line 900
    float _S44 = (dpm_0.primal_0[0][1] * dpm_0.primal_0[2][2] - dpm_0.primal_0[2][1] * dpm_0.primal_0[0][2]) * _S42;

#line 900
    float _S45 = - _S43;

#line 653 5
    float _S46 = dpm_0.primal_0[1][1] * _S40 + dpm_0.primal_0[2][1] * _S45;

#line 653
    float _S47 = dpm_0.primal_0[1][2] * _S38 + dpm_0.primal_0[2][2] * _S43;

#line 653
    float _S48 = dpm_0.primal_0[0][0] * _s_dOut_0;

#line 653
    float _S49 = (dpm_0.primal_0[1][1] * dpm_0.primal_0[2][2] - dpm_0.primal_0[2][1] * dpm_0.primal_0[1][2]) * _s_dOut_0;

#line 653
    float _S50 = - _S48;

#line 653
    float _S51 = dpm_0.primal_0[0][1] * _S38 + dpm_0.primal_0[2][1] * _S50;

#line 653
    float _S52 = dpm_0.primal_0[0][2] * _S45 + dpm_0.primal_0[1][2] * _S50;

#line 653
    float _S53 = dpm_0.primal_0[2][2] * _S48;

#line 653
    float _S54 = dpm_0.primal_0[0][1] * _S43 + dpm_0.primal_0[1][1] * _S48;

#line 1127
    vec3 _S55 = vec3(0.0);

#line 1127
    vec3 _S56 = _S55;

#line 1127
    _S56[0] = _S39;

#line 1127
    _S56[1] = _S52;

#line 1127
    _S56[2] = _S54;

#line 653
    float _S57 = _S41 + _S53;

#line 653
    vec3 _S58 = _S55;

#line 653
    _S58[0] = _S44;

#line 653
    _S58[2] = _S51;

#line 653
    _S58[1] = _S57;

#line 653
    vec3 _S59 = _S55;

#line 653
    _S59[2] = _S46;

#line 653
    _S59[1] = _S47;

#line 653
    _S59[0] = _S49;

#line 653
    mat3x3 _S60 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 653
    _S60[2] = _S56;

#line 653
    _S60[1] = _S58;

#line 653
    _S60[0] = _S59;

#line 653
    dpm_0.primal_0 = dpm_0.primal_0;

#line 653
    dpm_0.differential_0 = _S60;

#line 653
    return;
}


#line 653
void s_bwd_determinant_impl_0(inout DiffPair_float3x3_0 _S61, float _S62)
{

#line 653
    s_bwd_prop_determinant_impl_0(_S61, _S62);

#line 653
    return;
}


#line 653
void s_bwd_prop_determinant_0(inout DiffPair_float3x3_0 _S63, float _S64)
{

#line 1927 4
    s_bwd_determinant_impl_0(_S63, _S64);

#line 1927
    return;
}


#line 898
void _d_mul_0(inout DiffPair_float3x3_0 left_0, inout DiffPair_float3_0 right_0, vec3 dOut_5)
{

    vec3 right_d_result_0;

#line 900
    mat3x3 left_d_result_0;

#line 900
    float _S65 = left_0.primal_0[0][0] * dOut_5[0];

#line 910
    left_d_result_0[0][0] = right_0.primal_0[0] * dOut_5[0];

#line 909
    float sum_0 = _S65 + left_0.primal_0[1][0] * dOut_5[1];
    left_d_result_0[1][0] = right_0.primal_0[0] * dOut_5[1];

#line 909
    float sum_1 = sum_0 + left_0.primal_0[2][0] * dOut_5[2];
    left_d_result_0[2][0] = right_0.primal_0[0] * dOut_5[2];

    right_d_result_0[0] = sum_1;

#line 912
    float _S66 = left_0.primal_0[0][1] * dOut_5[0];

#line 910
    left_d_result_0[0][1] = right_0.primal_0[1] * dOut_5[0];

#line 909
    float sum_2 = _S66 + left_0.primal_0[1][1] * dOut_5[1];
    left_d_result_0[1][1] = right_0.primal_0[1] * dOut_5[1];

#line 909
    float sum_3 = sum_2 + left_0.primal_0[2][1] * dOut_5[2];
    left_d_result_0[2][1] = right_0.primal_0[1] * dOut_5[2];

    right_d_result_0[1] = sum_3;

#line 912
    float _S67 = left_0.primal_0[0][2] * dOut_5[0];

#line 910
    left_d_result_0[0][2] = right_0.primal_0[2] * dOut_5[0];

#line 909
    float sum_4 = _S67 + left_0.primal_0[1][2] * dOut_5[1];
    left_d_result_0[1][2] = right_0.primal_0[2] * dOut_5[1];

#line 909
    float sum_5 = sum_4 + left_0.primal_0[2][2] * dOut_5[2];
    left_d_result_0[2][2] = right_0.primal_0[2] * dOut_5[2];

    right_d_result_0[2] = sum_5;

#line 912
    left_0.primal_0 = left_0.primal_0;

#line 912
    left_0.differential_0 = left_d_result_0;

#line 912
    right_0.primal_0 = right_0.primal_0;

#line 912
    right_0.differential_0 = right_d_result_0;



    return;
}


#line 1 3
void _d_rcp_0(inout DiffPair_float_0 dpx_4, float dOut_6)
{

#line 1
    float _S68 = -1.0 / max(0.00000010000000116861, dpx_4.primal_0 * dpx_4.primal_0) * dOut_6;

#line 1
    dpx_4.primal_0 = dpx_4.primal_0;

#line 1
    dpx_4.differential_0 = _S68;

#line 1272 4
    return;
}


#line 6372 9
float rcp_0(float x_0)
{
    return 1.0 / x_0;
}


#line 249 0
struct s_bwd_prop_loadPosition_Intermediates_0
{
    HitAD_0 _S69;
};


#line 249
struct s_bwd_prop_estimate_discontinuity_Intermediates_0
{
    bool _S70;
    bool _S71;
    bool i_hit_0;
    bool i_hit_1;
    mat3x3 _S72;
};


#line 249
struct s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0
{
    mat3x3 _S73;
};


#line 249
struct s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0
{
    HitAD_0 _S74;
    s_bwd_prop_loadPosition_Intermediates_0 _S75;
    HitAD_0 _S76;
    HitAD_0 _S77;
    s_bwd_prop_loadPosition_Intermediates_0 _S78;
    HitAD_0 _S79;
    HitAD_0 _S80;
    s_bwd_prop_loadPosition_Intermediates_0 _S81;
    HitAD_0 _S82;
    HitAD_0 _S83;
    s_bwd_prop_loadPosition_Intermediates_0 _S84;
    HitAD_0 _S85;
    s_bwd_prop_estimate_discontinuity_Intermediates_0 _S86;
    s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _S87;
    vMFDistribution_0 vmf_0;
    vec3 _S88;
    vec3 _S89;
    vec3 _S90;
    vec3 _S91;
    vec3 _S92;
    mat3x3 _S93;
    float _S94;
    float _S95;
    HitAD_0 hit_0_0;
    HitAD_0 hit_1_0;
};


#line 249
struct s_bwd_prop_forward_render_Intermediates_0
{
    RandomSamplerState_0 _S96;
    s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0 _S97;
};


#line 249
float s_primal_ctx_dot_0(vec3 _S98, vec3 _S99)
{

#line 249
    return dot(_S98, _S99);
}


#line 156
vec3 s_primal_ctx_cos_1(vec3 _S100)
{

#line 156
    return cos(_S100);
}


#line 156
vec3 s_bwd_primal_loadPosition_0(inout HitAD_0 dphit_0, vec3 dptranslation_0, out s_bwd_prop_loadPosition_Intermediates_0 _s_diff_ctx_0)
{

#line 156
    vec3 _S101 = vec3(0.0);

#line 156
    vec2 _S102 = vec2(0.0);

#line 156
    HitAD_0 _S103 = { _S101, _S101, _S101, 0U, false, _S102, _S102 };

#line 156
    _s_diff_ctx_0._S69 = _S103;

#line 156
    HitAD_0 _S104 = dphit_0;

#line 156
    _s_diff_ctx_0._S69 = dphit_0;

#line 76 2
    bool _S105 = !_S104.hasHit_0;

#line 76
    vec3 _S106;

#line 76
    if(_S105)
    {

#line 76
        _S106 = vec3(0.0);

#line 76
    }

#line 76
    bool _S107 = !_S105;

#line 76
    HitAD_0 _S108;

#line 76
    if(_S107)
    {

#line 76
        const vec3 _S109 = vec3(1.5, 1.0, 1.0);

#line 76
        float _S110 = _S104.uv_0.x;

#line 76
        float _S111 = _S104.uv_0.y;

#line 76
        vec3 v_3 = _S110 * (s_primal_ctx_cos_1(vec3(5.0, 2.0, 3.0) + 2.0) * _S109 + dptranslation_0) + _S111 * (s_primal_ctx_cos_1(vec3(1.0, 3.0, 5.0) + 4.0) * _S109 + dptranslation_0) + (1.0 - _S110 - _S111) * (s_primal_ctx_cos_1(vec3(2.0, 1.0, 1.0) + 1.0) * _S109 + dptranslation_0);

#line 76
        _S108 = _S104;

#line 76
        _S108.position_1 = v_3;

#line 76
        _S106 = v_3;

#line 76
    }
    else
    {

#line 76
        _S108 = _S104;

#line 76
    }

#line 76
    dphit_0 = _S108;

#line 76
    return _S106;
}


#line 18 0
vec3 s_primal_ctx_cross_0(vec3 _S112, vec3 _S113)
{

#line 18
    return cross(_S112, _S113);
}


#line 18
float s_primal_ctx_length_0(vec3 _S114)
{

#line 18
    return length(_S114);
}


#line 18
mat3x3 s_bwd_primal_Inverse3x3_0(mat3x3 dpm_1)
{

#line 18
    float oneOverDet_0 = 1.0 / s_primal_ctx_determinant_0(dpm_1);

#line 18
    float _S115 = (dpm_1[1][1] * dpm_1[2][2] - dpm_1[1][2] * dpm_1[2][1]) * oneOverDet_0;

#line 18
    mat3x3 _S116 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 18
    _S116[0][0] = _S115;

#line 18
    _S116[0][1] = - (dpm_1[0][1] * dpm_1[2][2] - dpm_1[0][2] * dpm_1[2][1]) * oneOverDet_0;

#line 18
    _S116[0][2] = (dpm_1[0][1] * dpm_1[1][2] - dpm_1[0][2] * dpm_1[1][1]) * oneOverDet_0;

#line 18
    _S116[1][0] = - (dpm_1[1][0] * dpm_1[2][2] - dpm_1[1][2] * dpm_1[2][0]) * oneOverDet_0;

#line 18
    _S116[1][1] = (dpm_1[0][0] * dpm_1[2][2] - dpm_1[0][2] * dpm_1[2][0]) * oneOverDet_0;

#line 18
    _S116[1][2] = - (dpm_1[0][0] * dpm_1[1][2] - dpm_1[0][2] * dpm_1[1][0]) * oneOverDet_0;

#line 18
    _S116[2][0] = (dpm_1[1][0] * dpm_1[2][1] - dpm_1[1][1] * dpm_1[2][0]) * oneOverDet_0;

#line 18
    _S116[2][1] = - (dpm_1[0][0] * dpm_1[2][1] - dpm_1[0][1] * dpm_1[2][0]) * oneOverDet_0;

#line 18
    _S116[2][2] = (dpm_1[0][0] * dpm_1[1][1] - dpm_1[0][1] * dpm_1[1][0]) * oneOverDet_0;

#line 18
    return _S116;
}


#line 18
vec3 s_primal_ctx_mul_0(mat3x3 _S117, vec3 _S118)
{

#line 18
    return (((_S118) * (_S117)));
}


#line 18
vec3 s_bwd_primal_estimate_discontinuity_0(Ray_0  dprays_0[4], HitAD_0  dpsis_0[4], out s_bwd_prop_estimate_discontinuity_Intermediates_0 _s_diff_ctx_1)
{

#line 18
    mat3x3 _S119 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 18
    _s_diff_ctx_1._S70 = false;

#line 18
    _s_diff_ctx_1._S71 = false;

#line 18
    _s_diff_ctx_1.i_hit_0 = false;

#line 18
    _s_diff_ctx_1.i_hit_1 = false;

#line 18
    _s_diff_ctx_1._S72 = _S119;

#line 18
    bool _S120 = HasHit_0(dpsis_0[1]);

#line 18
    _s_diff_ctx_1._S70 = _S120;

#line 18
    uint _S121 = _S120 ? 1U : 0U;

#line 18
    vec3 _S122 = vec3(0.0);

#line 18
    bool _S123 = HasHit_0(dpsis_0[0]);

#line 18
    _s_diff_ctx_1._S71 = _S123;

#line 51
    bool _S124 = !_S123;

#line 51
    float _S125 = s_primal_ctx_dot_0(dpsis_0[0].normal_0, dprays_0[0].origin_0 - dpsis_0[0].position_1);

#line 51
    vec3 _S126 = dpsis_0[0].position_1 - dprays_0[0].origin_0;

#line 51
    float _S127 = s_primal_ctx_dot_0(dpsis_0[0].position_1, dpsis_0[0].normal_0);

#line 51
    bool diff_0 = dpsis_0[0].geometryID_0 != dpsis_0[2U].geometryID_0;

#line 51
    bool i_hit_2 = HasHit_0(dpsis_0[2U]);

#line 51
    _s_diff_ctx_1.i_hit_0 = i_hit_2;

#line 51
    uint _S128 = diff_0 ? (i_hit_2 ? 1U : 0U) : _S121;

#line 51
    vec3 _S129 = diff_0 ? dpsis_0[2U].position_1 : dpsis_0[1].position_1;

#line 51
    vec3 _S130 = diff_0 ? dpsis_0[2U].normal_0 : dpsis_0[1].normal_0;

#line 51
    bool diff_1 = dpsis_0[0].geometryID_0 != dpsis_0[3U].geometryID_0;

#line 51
    bool i_hit_3 = HasHit_0(dpsis_0[3U]);

#line 51
    _s_diff_ctx_1.i_hit_1 = i_hit_3;

#line 51
    vec3 _S131 = diff_1 ? dpsis_0[3U].position_1 : _S129;

#line 51
    vec3 _S132 = diff_1 ? dpsis_0[3U].normal_0 : _S130;

#line 51
    bool is_ray1_hit_0 = (diff_1 ? (i_hit_3 ? 1U : 0U) : _S128) > 0U;

#line 51
    vec3 res_1;

#line 51
    if(_S123 && !is_ray1_hit_0)
    {

#line 51
        res_1 = dpsis_0[0].position_1;

#line 51
    }
    else
    {

#line 51
        res_1 = _S122;

#line 51
    }

#line 51
    if(is_ray1_hit_0 && _S124)
    {

#line 51
        res_1 = _S131;

#line 51
    }

#line 51
    bool has_two_hits_0 = _S123 && is_ray1_hit_0;

#line 51
    bool plane_0_occludes_1_0 = has_two_hits_0 && s_primal_ctx_dot_0(dpsis_0[0].normal_0, _S131 - dpsis_0[0].position_1) * _S125 < 0.0;

#line 51
    bool plane_1_occludes_0_0 = has_two_hits_0 && s_primal_ctx_dot_0(_S132, dpsis_0[0].position_1 - _S131) * _S125 < 0.0;

#line 51
    bool simple_occluder_0_0 = plane_0_occludes_1_0 && !plane_1_occludes_0_0;

#line 51
    bool simple_occluder_1_0 = plane_1_occludes_0_0 && !plane_0_occludes_1_0;

#line 51
    bool plane_intersection_0 = has_two_hits_0 && !simple_occluder_1_0 && !simple_occluder_0_0;

#line 51
    if(simple_occluder_0_0)
    {

#line 51
        res_1 = dpsis_0[0].position_1;

#line 51
    }

#line 51
    if(simple_occluder_1_0)
    {

#line 51
        res_1 = _S131;

#line 51
    }

#line 51
    bool same_normals_0 = plane_intersection_0 && s_primal_ctx_abs_0(s_primal_ctx_dot_0(dpsis_0[0].normal_0, _S132)) > 0.99000000953674316406;

#line 80
    bool plane_intersection_1 = plane_intersection_0&&!same_normals_0;

#line 80
    if(same_normals_0)
    {

#line 80
        res_1 = dpsis_0[0].position_1;

#line 80
    }

#line 80
    vec3 _S133 = s_primal_ctx_cross_0(_S126, _S131 - dprays_0[0].origin_0);

#line 80
    float _S134 = s_primal_ctx_length_0(_S133);

#line 80
    if(plane_intersection_1)
    {

#line 80
        res_1 = dpsis_0[0].position_1;

#line 80
    }

#line 80
    bool invertible_0 = plane_intersection_1 && _S134 > 0.00100000004749745131;

#line 80
    vec3 B_0 = vec3(_S127, s_primal_ctx_dot_0(_S131, _S132), s_primal_ctx_dot_0(dprays_0[0].origin_0, _S133));

#line 80
    mat3x3 _S135 = s_bwd_primal_Inverse3x3_0(mat3x3(dpsis_0[0].normal_0, _S132, _S133));

#line 80
    _s_diff_ctx_1._S72 = _S135;

#line 80
    if(invertible_0)
    {

#line 80
        res_1 = s_primal_ctx_mul_0(_S135, B_0);

#line 80
    }

#line 80
    return res_1;
}


#line 80
vec3 s_primal_ctx_normalize_0(vec3 _S136)
{

#line 80
    return normalize(_S136);
}


#line 80
mat3x3 s_bwd_primal_skew_symmetric_matrix_0(vec3 dpv_0)
{

#line 80
    float _S137 = dpv_0.z;

#line 80
    float _S138 = dpv_0.y;

#line 80
    float _S139 = dpv_0.x;

#line 80
    return mat3x3(0.0, - _S137, _S138, _S137, 0.0, - _S139, - _S138, _S139, 0.0);
}


#line 80
mat3x3 s_bwd_primal_identity3x3_0()
{

#line 80
    return mat3x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
}


#line 80
float s_primal_ctx_rcp_0(float _S140)
{

#line 80
    return rcp_0(_S140);
}


#line 80
mat3x3 s_bwd_primal_rotation_from_axis_cosangle_0(vec3 dpaxis_0, float dpcosangle_0, out s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _s_diff_ctx_2)
{

#line 80
    _s_diff_ctx_2._S73 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 80
    float _S141 = dpaxis_0.x;

#line 80
    float _S142 = dpaxis_0.y;

#line 80
    float axy_0 = _S141 * _S142;

#line 80
    float _S143 = dpaxis_0.z;

#line 80
    float axz_0 = _S141 * _S143;

#line 80
    float ayz_0 = _S142 * _S143;

#line 80
    mat3x3 _S144 = s_bwd_primal_skew_symmetric_matrix_0(dpaxis_0);

#line 80
    mat3x3 uu_0 = mat3x3(_S141 * _S141, axy_0, axz_0, axy_0, _S142 * _S142, ayz_0, axz_0, ayz_0, _S143 * _S143);

#line 80
    mat3x3 _S145 = s_bwd_primal_identity3x3_0();

#line 80
    _s_diff_ctx_2._S73 = _S145;

#line 80
    return _S145 * dpcosangle_0 + _S144 + s_primal_ctx_rcp_0(1.0 + dpcosangle_0) * uu_0;
}


#line 80
float s_bwd_primal_vMFDistribution_Pdf_0(vMFDistribution_0 this_1, vec3 dpdirection_0)
{

#line 54 6
    float _S146;

#line 54
    if(!(this_1.k_0 == 0.0))
    {

#line 54
        _S146 = this_1.k_0 / (6.28318548202514648438 * (1.0 - s_primal_ctx_exp_0(-2.0 * this_1.k_0))) * s_primal_ctx_exp_0(this_1.k_0 * (s_primal_ctx_dot_0(dpdirection_0, this_1.u_0) - 1.0));

#line 54
    }
    else
    {

#line 54
        _S146 = 0.07957746833562850952;

#line 54
    }

#line 54
    return _S146;
}


#line 54
vec3 s_bwd_primal_reparameterizing_disconitnuous_integrands_0(Ray_0 prim_ray_0, RayDifferential_0 prim_raydiff_0, inout RandomSamplerState_0 RNG_0, vec3 dptranslation_1, out s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0 _s_diff_ctx_3)
{

#line 120 0
    vec3 _S147 = vec3(0.0);

#line 120
    vec2 _S148 = vec2(0.0);

#line 120
    HitAD_0 _S149 = { _S147, _S147, _S147, 0U, false, _S148, _S148 };

#line 120
    s_bwd_prop_loadPosition_Intermediates_0 _S150 = { _S149 };

#line 120
    mat3x3 _S151 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 120
    s_bwd_prop_estimate_discontinuity_Intermediates_0 _S152 = { false, false, false, false, _S151 };

#line 120
    s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _S153 = { _S151 };

#line 120
    vMFDistribution_0 _S154 = { _S147, 0.0 };

#line 120
    _s_diff_ctx_3._S74 = _S149;

#line 120
    _s_diff_ctx_3._S75 = _S150;

#line 120
    _s_diff_ctx_3._S76 = _S149;

#line 120
    _s_diff_ctx_3._S77 = _S149;

#line 120
    _s_diff_ctx_3._S78 = _S150;

#line 120
    _s_diff_ctx_3._S79 = _S149;

#line 120
    _s_diff_ctx_3._S80 = _S149;

#line 120
    _s_diff_ctx_3._S81 = _S150;

#line 120
    _s_diff_ctx_3._S82 = _S149;

#line 120
    _s_diff_ctx_3._S83 = _S149;

#line 120
    _s_diff_ctx_3._S84 = _S150;

#line 120
    _s_diff_ctx_3._S85 = _S149;

#line 120
    _s_diff_ctx_3._S86 = _S152;

#line 120
    _s_diff_ctx_3._S87 = _S153;

#line 120
    _s_diff_ctx_3.vmf_0 = _S154;

#line 120
    _s_diff_ctx_3._S88 = _S147;

#line 120
    _s_diff_ctx_3._S89 = _S147;

#line 120
    _s_diff_ctx_3._S90 = _S147;

#line 120
    _s_diff_ctx_3._S91 = _S147;

#line 120
    _s_diff_ctx_3._S92 = _S147;

#line 120
    _s_diff_ctx_3._S93 = _S151;

#line 120
    _s_diff_ctx_3._S94 = 0.0;

#line 120
    _s_diff_ctx_3._S95 = 0.0;

#line 120
    _s_diff_ctx_3.hit_0_0 = _S149;

#line 120
    _s_diff_ctx_3.hit_1_0 = _S149;

#line 120
    _s_diff_ctx_3._S74.position_1 = _S147;

#line 120
    _s_diff_ctx_3._S74.normal_0 = _S147;

#line 120
    _s_diff_ctx_3._S74.color_0 = _S147;

#line 120
    _s_diff_ctx_3._S74.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S74.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S74.uv_0 = _S148;

#line 120
    _s_diff_ctx_3._S74.bary_0 = _S148;

#line 120
    _s_diff_ctx_3._S76.position_1 = _S147;

#line 120
    _s_diff_ctx_3._S76.normal_0 = _S147;

#line 120
    _s_diff_ctx_3._S76.color_0 = _S147;

#line 120
    _s_diff_ctx_3._S76.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S76.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S76.uv_0 = _S148;

#line 120
    _s_diff_ctx_3._S76.bary_0 = _S148;

#line 120
    _s_diff_ctx_3._S77.position_1 = _S147;

#line 120
    _s_diff_ctx_3._S77.normal_0 = _S147;

#line 120
    _s_diff_ctx_3._S77.color_0 = _S147;

#line 120
    _s_diff_ctx_3._S77.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S77.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S77.uv_0 = _S148;

#line 120
    _s_diff_ctx_3._S77.bary_0 = _S148;

#line 120
    _s_diff_ctx_3._S79.position_1 = _S147;

#line 120
    _s_diff_ctx_3._S79.normal_0 = _S147;

#line 120
    _s_diff_ctx_3._S79.color_0 = _S147;

#line 120
    _s_diff_ctx_3._S79.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S79.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S79.uv_0 = _S148;

#line 120
    _s_diff_ctx_3._S79.bary_0 = _S148;

#line 120
    _s_diff_ctx_3._S80.position_1 = _S147;

#line 120
    _s_diff_ctx_3._S80.normal_0 = _S147;

#line 120
    _s_diff_ctx_3._S80.color_0 = _S147;

#line 120
    _s_diff_ctx_3._S80.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S80.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S80.uv_0 = _S148;

#line 120
    _s_diff_ctx_3._S80.bary_0 = _S148;

#line 120
    _s_diff_ctx_3._S82.position_1 = _S147;

#line 120
    _s_diff_ctx_3._S82.normal_0 = _S147;

#line 120
    _s_diff_ctx_3._S82.color_0 = _S147;

#line 120
    _s_diff_ctx_3._S82.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S82.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S82.uv_0 = _S148;

#line 120
    _s_diff_ctx_3._S82.bary_0 = _S148;

#line 120
    _s_diff_ctx_3._S83.position_1 = _S147;

#line 120
    _s_diff_ctx_3._S83.normal_0 = _S147;

#line 120
    _s_diff_ctx_3._S83.color_0 = _S147;

#line 120
    _s_diff_ctx_3._S83.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S83.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S83.uv_0 = _S148;

#line 120
    _s_diff_ctx_3._S83.bary_0 = _S148;

#line 120
    _s_diff_ctx_3._S85.position_1 = _S147;

#line 120
    _s_diff_ctx_3._S85.normal_0 = _S147;

#line 120
    _s_diff_ctx_3._S85.color_0 = _S147;

#line 120
    _s_diff_ctx_3._S85.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S85.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S85.uv_0 = _S148;

#line 120
    _s_diff_ctx_3._S85.bary_0 = _S148;

#line 120
    RandomSamplerState_0 _S155 = RNG_0;

#line 120
    vMFDistribution_0 vmf_1 = vMFDistribution_x24init_0(prim_ray_0.direction_0, 1.0 / (1.0 - s_primal_ctx_min_0(s_primal_ctx_cos_0(s_primal_ctx_acos_0(s_primal_ctx_min_0(s_primal_ctx_dot_0(prim_raydiff_0.dddx_0, prim_ray_0.direction_0), s_primal_ctx_dot_0(prim_raydiff_0.dddy_0, prim_ray_0.direction_0))) * 0.40000000596046447754), 0.99999988079071044922)));

#line 120
    _s_diff_ctx_3.vmf_0 = vmf_1;

#line 120
    RandomSamplerState_0 _S156 = _S155;

#line 120
    vec2 _S157 = GetNextRandomFloat2_0(_S156);

#line 120
    vec3 _S158 = vMFDistribution_DrawSample_0(vmf_1, _S157);

#line 120
    _s_diff_ctx_3._S88 = _S158;

#line 120
    Ray_0 _S159 = prim_ray_0;

#line 120
    _S159.direction_0 = _S158;

#line 120
    HitAD_0 hit_2 = ray_tracing_0(_S159, dptranslation_1);

#line 120
    HitAD_0 _S160 = hit_2;

#line 120
    vec3 _S161 = s_bwd_primal_loadPosition_0(_S160, dptranslation_1, _s_diff_ctx_3._S75);

#line 120
    _s_diff_ctx_3._S74 = _S160;

#line 120
    _s_diff_ctx_3._S76 = hit_2;

#line 120
    RandomSamplerState_0 _S162 = _S156;

#line 120
    vec2 _S163 = GetNextRandomFloat2_0(_S162);

#line 120
    vec3 _S164 = vMFDistribution_DrawSample_0(vmf_1, _S163);

#line 120
    _s_diff_ctx_3._S89 = _S164;

#line 120
    Ray_0 _S165 = prim_ray_0;

#line 120
    _S165.direction_0 = _S164;

#line 120
    HitAD_0 hit_3 = ray_tracing_0(_S165, dptranslation_1);

#line 120
    HitAD_0 _S166 = hit_3;

#line 120
    vec3 _S167 = s_bwd_primal_loadPosition_0(_S166, dptranslation_1, _s_diff_ctx_3._S78);

#line 120
    _s_diff_ctx_3._S77 = _S166;

#line 120
    _s_diff_ctx_3._S79 = hit_3;

#line 120
    RandomSamplerState_0 _S168 = _S162;

#line 120
    vec2 _S169 = GetNextRandomFloat2_0(_S168);

#line 120
    vec3 _S170 = vMFDistribution_DrawSample_0(vmf_1, _S169);

#line 120
    _s_diff_ctx_3._S90 = _S170;

#line 120
    Ray_0 _S171 = prim_ray_0;

#line 120
    _S171.direction_0 = _S170;

#line 120
    HitAD_0 hit_4 = ray_tracing_0(_S171, dptranslation_1);

#line 120
    HitAD_0 _S172 = hit_4;

#line 120
    vec3 _S173 = s_bwd_primal_loadPosition_0(_S172, dptranslation_1, _s_diff_ctx_3._S81);

#line 120
    _s_diff_ctx_3._S80 = _S172;

#line 120
    _s_diff_ctx_3._S82 = hit_4;

#line 120
    RandomSamplerState_0 _S174 = _S168;

#line 120
    vec2 _S175 = GetNextRandomFloat2_0(_S174);

#line 120
    vec3 _S176 = vMFDistribution_DrawSample_0(vmf_1, _S175);

#line 120
    _s_diff_ctx_3._S91 = _S176;

#line 120
    Ray_0 _S177 = prim_ray_0;

#line 120
    _S177.direction_0 = _S176;

#line 120
    HitAD_0 hit_5 = ray_tracing_0(_S177, dptranslation_1);

#line 120
    HitAD_0 _S178 = hit_5;

#line 120
    vec3 _S179 = s_bwd_primal_loadPosition_0(_S178, dptranslation_1, _s_diff_ctx_3._S84);

#line 120
    _s_diff_ctx_3._S83 = _S178;

#line 120
    _s_diff_ctx_3._S85 = hit_5;

#line 120
    HitAD_0  _S180[4] = { _S160, _S166, _S172, _S178 };

#line 120
    Ray_0  _S181[4] = { _S159, _S165, _S171, _S177 };

#line 120
    vec3 _S182 = s_bwd_primal_estimate_discontinuity_0(_S181, _S180, _s_diff_ctx_3._S86);

#line 120
    _s_diff_ctx_3._S92 = _S182;

#line 120
    vec3 _S183 = s_primal_ctx_normalize_0(_S182 - prim_ray_0.origin_0);

#line 120
    mat3x3 _S184 = s_bwd_primal_rotation_from_axis_cosangle_0(s_primal_ctx_cross_0(_S183, _S183), s_primal_ctx_dot_0(_S183, _S183), _s_diff_ctx_3._S87);

#line 120
    _s_diff_ctx_3._S93 = _S184;

#line 120
    vec3 _S185 = s_primal_ctx_mul_0(_S184, _S170);

#line 120
    vec3 _S186 = s_primal_ctx_mul_0(_S184, _S176);

#line 120
    Ray_0 _S187 = { prim_ray_0.origin_0, _S185 };

#line 120
    Ray_0 _S188 = { prim_ray_0.origin_0, _S186 };

#line 120
    float _S189 = s_bwd_primal_vMFDistribution_Pdf_0(vmf_1, _S185);

#line 120
    _s_diff_ctx_3._S94 = _S189;

#line 120
    float _S190 = s_bwd_primal_vMFDistribution_Pdf_0(vmf_1, _S186);

#line 120
    _s_diff_ctx_3._S95 = _S190;

#line 120
    vec3 throughput_0_0 = vec3(_S189) / _S189;

#line 120
    vec3 throughput_1_0 = vec3(_S190) / _S190;

#line 120
    HitAD_0 hit_0_1 = ray_tracing_0(_S187, dptranslation_1);

#line 120
    _s_diff_ctx_3.hit_0_0 = hit_0_1;

#line 120
    HitAD_0 hit_1_1 = ray_tracing_0(_S188, dptranslation_1);

#line 120
    _s_diff_ctx_3.hit_1_0 = hit_1_1;

#line 120
    vec3 radiance_0 = throughput_0_0 * hit_0_1.color_0 * 0.5 + throughput_1_0 * hit_1_1.color_0 * 0.5;

#line 120
    RNG_0 = _S174;

#line 120
    return radiance_0;
}


#line 120
float s_bwd_primal_forward_render_0(Ray_0 prim_ray_1, RayDifferential_0 prim_raydiff_1, inout RandomSamplerState_0 RNG_1, vec3 dptranslation_2, out s_bwd_prop_forward_render_Intermediates_0 _s_diff_ctx_4)
{

#line 224
    RandomSamplerState_0 _S191 = { 0U };

#line 224
    vec3 _S192 = vec3(0.0);

#line 224
    vec2 _S193 = vec2(0.0);

#line 224
    HitAD_0 _S194 = { _S192, _S192, _S192, 0U, false, _S193, _S193 };

#line 224
    s_bwd_prop_loadPosition_Intermediates_0 _S195 = { _S194 };

#line 224
    mat3x3 _S196 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 224
    s_bwd_prop_estimate_discontinuity_Intermediates_0 _S197 = { false, false, false, false, _S196 };

#line 224
    s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _S198 = { _S196 };

#line 224
    vMFDistribution_0 _S199 = { _S192, 0.0 };

#line 224
    s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0 _S200 = { _S194, _S195, _S194, _S194, _S195, _S194, _S194, _S195, _S194, _S194, _S195, _S194, _S197, _S198, _S199, _S192, _S192, _S192, _S192, _S192, _S196, 0.0, 0.0, _S194, _S194 };

#line 224
    _s_diff_ctx_4._S96 = _S191;

#line 224
    _s_diff_ctx_4._S97 = _S200;

#line 224
    _s_diff_ctx_4._S96.state_1 = 0U;

#line 224
    RandomSamplerState_0 _S201 = RNG_1;

#line 224
    vec3 _S202 = s_bwd_primal_reparameterizing_disconitnuous_integrands_0(prim_ray_1, prim_raydiff_1, _S201, dptranslation_2, _s_diff_ctx_4._S97);

#line 224
    _s_diff_ctx_4._S96 = _S201;

#line 224
    float _S203 = _S202.x;

#line 224
    RNG_1 = _S201;

#line 224
    return _S203;
}


#line 224
void s_bwd_prop_dot_0(inout DiffPair_float3_0 _S204, inout DiffPair_float3_0 _S205, float _S206)
{

#line 224
    _d_dot_0(_S204, _S205, _S206);

#line 224
    return;
}


#line 224
void s_bwd_prop_vMFDistribution_Pdf_0(vMFDistribution_0 this_2, inout DiffPair_float3_0 dpdirection_1, float _s_dOut_1)
{

#line 54 6
    DiffPair_float3_0 _S207 = dpdirection_1;

#line 54
    bool _S208 = !(this_2.k_0 == 0.0);

#line 54
    vec3 _S209 = vec3(0.0);

#line 54
    float _S210;

#line 54
    float _S211;

#line 54
    vec3 _S212;

#line 54
    if(_S208)
    {

#line 54
        float _S213 = this_2.k_0 * (s_primal_ctx_dot_0(_S207.primal_0, this_2.u_0) - 1.0);

#line 54
        _S210 = this_2.k_0 / (6.28318548202514648438 * (1.0 - s_primal_ctx_exp_0(-2.0 * this_2.k_0)));

#line 54
        _S211 = _S213;

#line 54
        _S212 = this_2.u_0;

#line 54
    }
    else
    {

#line 54
        _S210 = 0.0;

#line 54
        _S211 = 0.0;

#line 54
        _S212 = _S209;

#line 54
    }

#line 54
    if(_S208)
    {

#line 54
        float _S214 = _S210 * _s_dOut_1;

#line 54
        DiffPair_float_0 _S215;

#line 54
        _S215.primal_0 = _S211;

#line 54
        _S215.differential_0 = 0.0;

#line 54
        s_bwd_prop_exp_0(_S215, _S214);

#line 54
        float _S216 = this_2.k_0 * _S215.differential_0;

#line 54
        DiffPair_float3_0 _S217;

#line 54
        _S217.primal_0 = _S207.primal_0;

#line 54
        _S217.differential_0 = _S209;

#line 54
        DiffPair_float3_0 _S218;

#line 54
        _S218.primal_0 = _S212;

#line 54
        _S218.differential_0 = _S209;

#line 54
        s_bwd_prop_dot_0(_S217, _S218, _S216);

#line 54
        _S212 = _S217.differential_0;

#line 54
    }
    else
    {

#line 54
        _S212 = _S209;

#line 54
    }

#line 54
    dpdirection_1.primal_0 = dpdirection_1.primal_0;

#line 54
    dpdirection_1.differential_0 = _S212;

#line 54
    return;
}


#line 54
void s_bwd_prop_mul_0(inout DiffPair_float3x3_0 _S219, inout DiffPair_float3_0 _S220, vec3 _S221)
{

#line 54
    _d_mul_0(_S219, _S220, _S221);

#line 54
    return;
}


#line 54
void s_bwd_prop_rcp_0(inout DiffPair_float_0 _S222, float _S223)
{

#line 54
    _d_rcp_0(_S222, _S223);

#line 54
    return;
}


#line 54
void s_bwd_prop_skew_symmetric_matrix_0(inout DiffPair_float3_0 dpv_1, mat3x3 _s_dOut_2)
{

#line 54
    vec3 _S224 = vec3(_s_dOut_2[2][1] + - _s_dOut_2[1][2], _s_dOut_2[0][2] + - _s_dOut_2[2][0], _s_dOut_2[1][0] + - _s_dOut_2[0][1]);

#line 54
    dpv_1.primal_0 = dpv_1.primal_0;

#line 54
    dpv_1.differential_0 = _S224;

#line 54
    return;
}


#line 54
void s_bwd_prop_rotation_from_axis_cosangle_0(inout DiffPair_float3_0 dpaxis_1, inout DiffPair_float_0 dpcosangle_1, mat3x3 _s_dOut_3, s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _s_diff_ctx_5)
{

#line 54
    float _S225 = 1.0 + dpcosangle_1.primal_0;

#line 54
    float _S226 = dpaxis_1.primal_0.x;

#line 54
    float _S227 = dpaxis_1.primal_0.y;

#line 54
    float axy_1 = _S226 * _S227;

#line 54
    float _S228 = dpaxis_1.primal_0.z;

#line 54
    float axz_1 = _S226 * _S228;

#line 54
    float ayz_1 = _S227 * _S228;

#line 54
    mat3x3 s_diff_uu_T_0 = matrixCompMult(mat3x3(s_primal_ctx_rcp_0(_S225), s_primal_ctx_rcp_0(_S225), s_primal_ctx_rcp_0(_S225), s_primal_ctx_rcp_0(_S225), s_primal_ctx_rcp_0(_S225), s_primal_ctx_rcp_0(_S225), s_primal_ctx_rcp_0(_S225), s_primal_ctx_rcp_0(_S225), s_primal_ctx_rcp_0(_S225)), _s_dOut_3);

#line 54
    mat3x3 _S229 = matrixCompMult(mat3x3(_S226 * _S226, axy_1, axz_1, axy_1, _S227 * _S227, ayz_1, axz_1, ayz_1, _S228 * _S228), _s_dOut_3);

#line 653 5
    float _S230 = _S229[0][0] + _S229[0][1] + _S229[0][2] + _S229[1][0] + _S229[1][1] + _S229[1][2] + _S229[2][0] + _S229[2][1] + _S229[2][2];

#line 653
    DiffPair_float_0 _S231;

#line 653
    _S231.primal_0 = _S225;

#line 653
    _S231.differential_0 = 0.0;

#line 653
    s_bwd_prop_rcp_0(_S231, _S230);

#line 653
    mat3x3 _S232 = matrixCompMult(_s_diff_ctx_5._S73, _s_dOut_3);

#line 653
    float _S233 = _S228 * s_diff_uu_T_0[2][2];

#line 653
    float _S234 = _S227 * s_diff_uu_T_0[1][1];

#line 653
    float _S235 = _S226 * s_diff_uu_T_0[0][0];

#line 1127
    vec3 _S236 = vec3(0.0);

#line 1127
    DiffPair_float3_0 _S237;

#line 1127
    _S237.primal_0 = dpaxis_1.primal_0;

#line 1127
    _S237.differential_0 = _S236;

#line 1127
    s_bwd_prop_skew_symmetric_matrix_0(_S237, _s_dOut_3);

#line 653
    float _S238 = s_diff_uu_T_0[1][2] + s_diff_uu_T_0[2][1];

#line 653
    float _S239 = s_diff_uu_T_0[0][2] + s_diff_uu_T_0[2][0];

#line 653
    float _S240 = _S233 + _S233 + _S227 * _S238 + _S226 * _S239;

#line 653
    float _S241 = s_diff_uu_T_0[0][1] + s_diff_uu_T_0[1][0];

#line 653
    float _S242 = _S234 + _S234 + _S228 * _S238 + _S226 * _S241;

#line 653
    float _S243 = _S235 + _S235 + _S228 * _S239 + _S227 * _S241;

#line 653
    float _S244 = _S231.differential_0 + _S232[0][0] + _S232[0][1] + _S232[0][2] + _S232[1][0] + _S232[1][1] + _S232[1][2] + _S232[2][0] + _S232[2][1] + _S232[2][2];

#line 653
    dpcosangle_1.primal_0 = dpcosangle_1.primal_0;

#line 653
    dpcosangle_1.differential_0 = _S244;

#line 653
    vec3 _S245 = _S237.differential_0 + vec3(_S243, _S242, _S240);

#line 653
    dpaxis_1.primal_0 = dpaxis_1.primal_0;

#line 653
    dpaxis_1.differential_0 = _S245;

#line 653
    return;
}


#line 653
void s_bwd_prop_cross_0(inout DiffPair_float3_0 _S246, inout DiffPair_float3_0 _S247, vec3 _S248)
{

#line 653
    _d_cross_0(_S246, _S247, _S248);

#line 653
    return;
}


#line 1710 4
void s_bwd_prop_length_impl_0(inout DiffPair_float3_0 dpx_5, float _s_dOut_4)
{

#line 1710
    float _S249 = dpx_5.primal_0[0];

#line 1710
    float _S250 = dpx_5.primal_0[1];

#line 1710
    float _S251 = dpx_5.primal_0[2];

#line 1710
    DiffPair_float_0 _S252;

#line 1710
    _S252.primal_0 = _S249 * _S249 + _S250 * _S250 + _S251 * _S251;

#line 1710
    _S252.differential_0 = 0.0;

#line 1710
    s_bwd_prop_sqrt_0(_S252, _s_dOut_4);

#line 1710
    float _S253 = dpx_5.primal_0[2] * _S252.differential_0;

#line 653 5
    float _S254 = _S253 + _S253;

#line 653
    float _S255 = dpx_5.primal_0[1] * _S252.differential_0;

#line 653
    float _S256 = _S255 + _S255;

#line 653
    float _S257 = dpx_5.primal_0[0] * _S252.differential_0;

#line 653
    float _S258 = _S257 + _S257;

#line 653
    vec3 _S259 = vec3(0.0);

#line 653
    _S259[2] = _S254;

#line 653
    _S259[1] = _S256;

#line 653
    _S259[0] = _S258;

#line 653
    dpx_5.primal_0 = dpx_5.primal_0;

#line 653
    dpx_5.differential_0 = _S259;

#line 653
    return;
}


#line 653
void s_bwd_length_impl_0(inout DiffPair_float3_0 _S260, float _S261)
{

#line 653
    s_bwd_prop_length_impl_0(_S260, _S261);

#line 653
    return;
}


#line 653
void s_bwd_prop_length_0(inout DiffPair_float3_0 _S262, float _S263)
{

#line 1712 4
    s_bwd_length_impl_0(_S262, _S263);

#line 1712
    return;
}


#line 1712
void s_bwd_prop_normalize_impl_0(inout DiffPair_float3_0 dpx_6, vec3 _s_dOut_5)
{

#line 1712
    float _S264 = s_primal_ctx_length_0(dpx_6.primal_0);

#line 1712
    vec3 _S265 = dpx_6.primal_0 * _s_dOut_5;

#line 1712
    vec3 _S266 = vec3(1.0 / _S264) * _s_dOut_5;

#line 1712
    float _S267 = - ((_S265[0] + _S265[1] + _S265[2]) / (_S264 * _S264));

#line 1127 5
    vec3 _S268 = vec3(0.0);

#line 1127
    DiffPair_float3_0 _S269;

#line 1127
    _S269.primal_0 = dpx_6.primal_0;

#line 1127
    _S269.differential_0 = _S268;

#line 1127
    s_bwd_prop_length_0(_S269, _S267);

#line 1127
    vec3 _S270 = _S266 + _S269.differential_0;

#line 1127
    dpx_6.primal_0 = dpx_6.primal_0;

#line 1127
    dpx_6.differential_0 = _S270;

#line 1127
    return;
}


#line 1127
void s_bwd_normalize_impl_0(inout DiffPair_float3_0 _S271, vec3 _S272)
{

#line 1127
    s_bwd_prop_normalize_impl_0(_S271, _S272);

#line 1127
    return;
}


#line 1127
void s_bwd_prop_normalize_0(inout DiffPair_float3_0 _S273, vec3 _S274)
{

#line 1768 4
    s_bwd_normalize_impl_0(_S273, _S274);

#line 1768
    return;
}


#line 793
struct DiffPair_arrayx3CRayx2C4x3E_0
{
    Ray_0  primal_0[4];
    s_diff_Ray_0  differential_0[4];
};


#line 793
struct DiffPair_arrayx3CHitADx2C4x3E_0
{
    HitAD_0  primal_0[4];
    s_diff_HitAD_0  differential_0[4];
};


#line 804
void s_bwd_prop_Inverse3x3_0(inout DiffPair_float3x3_0 dpm_2, mat3x3 _s_dOut_6)
{

#line 804
    float _S275 = s_primal_ctx_determinant_0(dpm_2.primal_0);

#line 804
    float oneOverDet_1 = 1.0 / _S275;

#line 804
    float _S276 = _S275 * _S275;

#line 804
    float _S277 = dpm_2.primal_0[1][1] * dpm_2.primal_0[2][2] - dpm_2.primal_0[1][2] * dpm_2.primal_0[2][1];

#line 804
    float _S278 = (dpm_2.primal_0[0][0] * dpm_2.primal_0[1][1] - dpm_2.primal_0[0][1] * dpm_2.primal_0[1][0]) * _s_dOut_6[2][2];

#line 804
    float _S279 = oneOverDet_1 * _s_dOut_6[2][2];

#line 804
    float _S280 = - _S279;

#line 804
    float _S281 = dpm_2.primal_0[0][0] * _S279;

#line 804
    float _S282 = - (dpm_2.primal_0[0][0] * dpm_2.primal_0[2][1] - dpm_2.primal_0[0][1] * dpm_2.primal_0[2][0]) * _s_dOut_6[2][1];

#line 804
    float _S283 = - (oneOverDet_1 * _s_dOut_6[2][1]);

#line 804
    float _S284 = - _S283;

#line 804
    float _S285 = dpm_2.primal_0[0][0] * _S283;

#line 804
    float _S286 = (dpm_2.primal_0[1][0] * dpm_2.primal_0[2][1] - dpm_2.primal_0[1][1] * dpm_2.primal_0[2][0]) * _s_dOut_6[2][0];

#line 804
    float _S287 = oneOverDet_1 * _s_dOut_6[2][0];

#line 804
    float _S288 = - _S287;

#line 804
    float _S289 = dpm_2.primal_0[2][0] * _S288;

#line 804
    float _S290 = dpm_2.primal_0[1][0] * _S287;

#line 804
    float _S291 = - (dpm_2.primal_0[0][0] * dpm_2.primal_0[1][2] - dpm_2.primal_0[0][2] * dpm_2.primal_0[1][0]) * _s_dOut_6[1][2];

#line 804
    float _S292 = - (oneOverDet_1 * _s_dOut_6[1][2]);

#line 804
    float _S293 = - _S292;

#line 804
    float _S294 = dpm_2.primal_0[0][0] * _S292;

#line 804
    float _S295 = (dpm_2.primal_0[0][0] * dpm_2.primal_0[2][2] - dpm_2.primal_0[0][2] * dpm_2.primal_0[2][0]) * _s_dOut_6[1][1];

#line 804
    float _S296 = oneOverDet_1 * _s_dOut_6[1][1];

#line 804
    float _S297 = - _S296;

#line 804
    float _S298 = dpm_2.primal_0[0][0] * _S296;

#line 653 5
    float _S299 = dpm_2.primal_0[1][1] * _S279 + dpm_2.primal_0[2][1] * _S283 + dpm_2.primal_0[1][2] * _S292 + dpm_2.primal_0[2][2] * _S296;

#line 653
    float _S300 = - (dpm_2.primal_0[1][0] * dpm_2.primal_0[2][2] - dpm_2.primal_0[1][2] * dpm_2.primal_0[2][0]) * _s_dOut_6[1][0];

#line 653
    float _S301 = - (oneOverDet_1 * _s_dOut_6[1][0]);

#line 653
    float _S302 = - _S301;

#line 653
    float _S303 = dpm_2.primal_0[2][0] * _S302;

#line 653
    float _S304 = dpm_2.primal_0[0][1] * _S284 + dpm_2.primal_0[1][1] * _S288 + dpm_2.primal_0[0][2] * _S297 + dpm_2.primal_0[1][2] * _S302;

#line 653
    float _S305 = dpm_2.primal_0[1][0] * _S301;

#line 653
    float _S306 = dpm_2.primal_0[0][1] * _S280 + dpm_2.primal_0[2][1] * _S287 + dpm_2.primal_0[0][2] * _S293 + dpm_2.primal_0[2][2] * _S301;

#line 653
    float _S307 = (dpm_2.primal_0[0][1] * dpm_2.primal_0[1][2] - dpm_2.primal_0[0][2] * dpm_2.primal_0[1][1]) * _s_dOut_6[0][2];

#line 653
    float _S308 = oneOverDet_1 * _s_dOut_6[0][2];

#line 653
    float _S309 = - _S308;

#line 653
    float _S310 = dpm_2.primal_0[0][2] * _S309;

#line 653
    float _S311 = dpm_2.primal_0[0][1] * _S308;

#line 653
    float _S312 = - (dpm_2.primal_0[0][1] * dpm_2.primal_0[2][2] - dpm_2.primal_0[0][2] * dpm_2.primal_0[2][1]) * _s_dOut_6[0][1];

#line 653
    float _S313 = - (oneOverDet_1 * _s_dOut_6[0][1]);

#line 653
    float _S314 = - _S313;

#line 653
    float _S315 = dpm_2.primal_0[0][2] * _S314;

#line 653
    float _S316 = dpm_2.primal_0[1][0] * _S293 + dpm_2.primal_0[2][0] * _S297 + dpm_2.primal_0[1][1] * _S309 + dpm_2.primal_0[2][1] * _S314;

#line 653
    float _S317 = dpm_2.primal_0[0][1] * _S313;

#line 653
    float _S318 = dpm_2.primal_0[1][0] * _S280 + dpm_2.primal_0[2][0] * _S284 + dpm_2.primal_0[1][2] * _S308 + dpm_2.primal_0[2][2] * _S313;

#line 1127
    vec3 _S319 = vec3(0.0);

#line 1127
    vec3 _S320 = _S319;

#line 1127
    _S320[0] = _S299;

#line 1127
    _S320[2] = _S316;

#line 1127
    _S320[1] = _S318;

#line 1127
    float _S321 = _S277 * _s_dOut_6[0][0];

#line 1127
    float _S322 = oneOverDet_1 * _s_dOut_6[0][0];

#line 1127
    float _S323 = - _S322;

#line 653
    float _S324 = _S285 + _S290 + _S315 + dpm_2.primal_0[1][2] * _S323;

#line 653
    float _S325 = _S294 + _S303 + _S311 + dpm_2.primal_0[2][1] * _S323;

#line 653
    float _S326 = dpm_2.primal_0[2][2] * _S322;

#line 653
    float _S327 = _S298 + _S305 + _S317 + dpm_2.primal_0[1][1] * _S322;

#line 653
    vec3 _S328 = _S319;

#line 653
    _S328[0] = _S304;

#line 653
    _S328[1] = _S324;

#line 653
    _S328[2] = _S327;

#line 653
    float _S329 = _S281 + _S289 + _S310 + _S326;

#line 653
    vec3 _S330 = _S319;

#line 653
    _S330[0] = _S306;

#line 653
    _S330[2] = _S325;

#line 653
    _S330[1] = _S329;

#line 653
    float _S331 = - ((_S278 + _S282 + _S286 + _S291 + _S295 + _S300 + _S307 + _S312 + _S321) / _S276);

#line 1174
    mat3x3 _S332 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 1174
    DiffPair_float3x3_0 _S333;

#line 1174
    _S333.primal_0 = dpm_2.primal_0;

#line 1174
    _S333.differential_0 = _S332;

#line 1174
    s_bwd_prop_determinant_0(_S333, _S331);

#line 1174
    mat3x3 _S334 = _S332;

#line 1174
    _S334[0] = _S320;

#line 1174
    _S334[2] = _S328;

#line 1174
    _S334[1] = _S330;

#line 1174
    mat3x3 _S335 = _S333.differential_0 + _S334;

#line 1174
    dpm_2.primal_0 = dpm_2.primal_0;

#line 1174
    dpm_2.differential_0 = _S335;

#line 1174
    return;
}


#line 1174
void s_bwd_prop_estimate_discontinuity_0(inout DiffPair_arrayx3CRayx2C4x3E_0 dprays_1, inout DiffPair_arrayx3CHitADx2C4x3E_0 dpsis_1, vec3 _s_dOut_7, s_bwd_prop_estimate_discontinuity_Intermediates_0 _s_diff_ctx_6)
{

#line 1174
    DiffPair_arrayx3CRayx2C4x3E_0 _S336 = dprays_1;

#line 1174
    DiffPair_arrayx3CHitADx2C4x3E_0 _S337 = dpsis_1;

#line 1174
    vec3 _S338 = dprays_1.primal_0[0].origin_0 - dpsis_1.primal_0[0].position_1;

#line 1174
    vec3 _S339 = dpsis_1.primal_0[0].position_1 - dprays_1.primal_0[0].origin_0;

#line 1174
    bool diff_2 = dpsis_1.primal_0[0].geometryID_0 != dpsis_1.primal_0[2U].geometryID_0;

#line 1174
    bool diff_3 = dpsis_1.primal_0[0].geometryID_0 != dpsis_1.primal_0[3U].geometryID_0;

#line 1174
    float _S340 = s_primal_ctx_dot_0(dpsis_1.primal_0[0].normal_0, _S338);

#line 1174
    vec3 _S341 = diff_3 ? dpsis_1.primal_0[3U].position_1 : diff_2 ? dpsis_1.primal_0[2U].position_1 : dpsis_1.primal_0[1].position_1;

#line 1174
    vec3 _S342 = diff_3 ? dpsis_1.primal_0[3U].normal_0 : diff_2 ? dpsis_1.primal_0[2U].normal_0 : dpsis_1.primal_0[1].normal_0;

#line 1174
    bool is_ray1_hit_1 = (diff_3 ? (_s_diff_ctx_6.i_hit_1 ? 1U : 0U) : diff_2 ? (_s_diff_ctx_6.i_hit_0 ? 1U : 0U) : _s_diff_ctx_6._S70 ? 1U : 0U) > 0U;

#line 1174
    bool only_hit_0_0 = _s_diff_ctx_6._S71 && !is_ray1_hit_1;

#line 1174
    bool only_hit_1_0 = is_ray1_hit_1 && !_s_diff_ctx_6._S71;

#line 1174
    bool has_two_hits_1 = _s_diff_ctx_6._S71 && is_ray1_hit_1;

#line 1174
    vec3 _S343 = _S341 - dpsis_1.primal_0[0].position_1;

#line 1174
    vec3 _S344 = dpsis_1.primal_0[0].position_1 - _S341;

#line 1174
    bool plane_0_occludes_1_1 = has_two_hits_1 && s_primal_ctx_dot_0(dpsis_1.primal_0[0].normal_0, _S343) * _S340 < 0.0;

#line 1174
    bool plane_1_occludes_0_1 = has_two_hits_1 && s_primal_ctx_dot_0(_S342, _S344) * _S340 < 0.0;

#line 1174
    bool simple_occluder_0_1 = plane_0_occludes_1_1 && !plane_1_occludes_0_1;

#line 1174
    bool simple_occluder_1_1 = plane_1_occludes_0_1 && !plane_0_occludes_1_1;

#line 1174
    bool plane_intersection_2 = has_two_hits_1 && !simple_occluder_1_1 && !simple_occluder_0_1;

#line 1174
    bool same_normals_1 = plane_intersection_2 && s_primal_ctx_abs_0(s_primal_ctx_dot_0(dpsis_1.primal_0[0].normal_0, _S342)) > 0.99000000953674316406;

#line 80 0
    bool plane_intersection_3 = plane_intersection_2&&!same_normals_1;

#line 80
    vec3 _S345 = _S341 - dprays_1.primal_0[0].origin_0;

#line 80
    vec3 _S346 = s_primal_ctx_cross_0(_S339, _S345);

#line 80
    mat3x3 A_0 = mat3x3(dpsis_1.primal_0[0].normal_0, _S342, _S346);

#line 80
    vec3 B_1 = vec3(s_primal_ctx_dot_0(dpsis_1.primal_0[0].position_1, dpsis_1.primal_0[0].normal_0), s_primal_ctx_dot_0(_S341, _S342), s_primal_ctx_dot_0(dprays_1.primal_0[0].origin_0, _S346));

#line 1127 5
    vec3 _S347 = vec3(0.0);

#line 1174
    mat3x3 _S348 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 1174
    mat3x3 _S349;

#line 1174
    vec3 _S350;

#line 1174
    vec3 _S351;

#line 1174
    if(plane_intersection_3 && s_primal_ctx_length_0(_S346) > 0.00100000004749745131)
    {

#line 1174
        DiffPair_float3x3_0 _S352;

#line 1174
        _S352.primal_0 = _s_diff_ctx_6._S72;

#line 1174
        _S352.differential_0 = _S348;

#line 1174
        DiffPair_float3_0 _S353;

#line 1174
        _S353.primal_0 = B_1;

#line 1174
        _S353.differential_0 = _S347;

#line 1174
        s_bwd_prop_mul_0(_S352, _S353, _s_dOut_7);

#line 1174
        _S349 = _S352.differential_0;

#line 1174
        _S350 = _S353.differential_0;

#line 1174
        _S351 = _S347;

#line 1174
    }
    else
    {

#line 1174
        _S349 = _S348;

#line 1174
        _S350 = _S347;

#line 1174
        _S351 = _s_dOut_7;

#line 1174
    }

#line 1174
    DiffPair_float3x3_0 _S354;

#line 1174
    _S354.primal_0 = A_0;

#line 1174
    _S354.differential_0 = _S348;

#line 1174
    s_bwd_prop_Inverse3x3_0(_S354, _S349);

#line 1174
    vec3 _S355 = _S350;

#line 1174
    DiffPair_float3_0 _S356;

#line 1174
    _S356.primal_0 = _S336.primal_0[0].origin_0;

#line 1174
    _S356.differential_0 = _S347;

#line 1174
    DiffPair_float3_0 _S357;

#line 1174
    _S357.primal_0 = _S346;

#line 1174
    _S357.differential_0 = _S347;

#line 1174
    s_bwd_prop_dot_0(_S356, _S357, _S350[2]);

#line 1174
    DiffPair_float3_0 _S358 = _S356;

#line 1174
    DiffPair_float3_0 _S359;

#line 1174
    _S359.primal_0 = _S341;

#line 1174
    _S359.differential_0 = _S347;

#line 1174
    DiffPair_float3_0 _S360;

#line 1174
    _S360.primal_0 = _S342;

#line 1174
    _S360.differential_0 = _S347;

#line 1174
    s_bwd_prop_dot_0(_S359, _S360, _S350[1]);

#line 1174
    DiffPair_float3_0 _S361 = _S359;

#line 1174
    vec3 _S362 = _S357.differential_0 + _S354.differential_0[2];

#line 1174
    if(plane_intersection_3)
    {

#line 1174
        _S350 = _S347;

#line 1174
    }
    else
    {

#line 1174
        _S350 = _S351;

#line 1174
        _S351 = _S347;

#line 1174
    }

#line 1174
    DiffPair_float3_0 _S363;

#line 1174
    _S363.primal_0 = _S346;

#line 1174
    _S363.differential_0 = _S347;

#line 1174
    s_bwd_prop_length_0(_S363, 0.0);

#line 1174
    vec3 _S364 = _S363.differential_0 + _S362;

#line 1174
    DiffPair_float3_0 _S365;

#line 1174
    _S365.primal_0 = _S339;

#line 1174
    _S365.differential_0 = _S347;

#line 1174
    DiffPair_float3_0 _S366;

#line 1174
    _S366.primal_0 = _S345;

#line 1174
    _S366.differential_0 = _S347;

#line 1174
    s_bwd_prop_cross_0(_S365, _S366, _S364);

#line 1174
    DiffPair_float3_0 _S367 = _S365;

#line 1174
    vec3 _S368 = _S366.differential_0 + _S361.differential_0;

#line 1174
    vec3 _S369 = - _S366.differential_0 + _S358.differential_0;

#line 1174
    if(same_normals_1)
    {

#line 1174
        vec3 _S370 = _S350 + _S351;

#line 1174
        _S350 = _S347;

#line 1174
        _S351 = _S370;

#line 1174
    }

#line 1174
    vec3 _S371;

#line 1174
    if(simple_occluder_1_1)
    {

#line 1174
        vec3 _S372 = _S350 + _S368;

#line 1174
        _S350 = _S347;

#line 1174
        _S371 = _S372;

#line 1174
    }
    else
    {

#line 1174
        _S371 = _S368;

#line 1174
    }

#line 1174
    if(simple_occluder_0_1)
    {

#line 1174
        vec3 _S373 = _S350 + _S351;

#line 1174
        _S350 = _S347;

#line 1174
        _S351 = _S373;

#line 1174
    }

#line 1174
    DiffPair_float3_0 _S374;

#line 1174
    _S374.primal_0 = _S342;

#line 1174
    _S374.differential_0 = _S347;

#line 1174
    DiffPair_float3_0 _S375;

#line 1174
    _S375.primal_0 = _S344;

#line 1174
    _S375.differential_0 = _S347;

#line 1174
    s_bwd_prop_dot_0(_S374, _S375, 0.0);

#line 1174
    vec3 _S376 = - _S375.differential_0;

#line 1174
    DiffPair_float3_0 _S377;

#line 1174
    _S377.primal_0 = _S337.primal_0[0].normal_0;

#line 1174
    _S377.differential_0 = _S347;

#line 1174
    DiffPair_float3_0 _S378;

#line 1174
    _S378.primal_0 = _S343;

#line 1174
    _S378.differential_0 = _S347;

#line 1174
    s_bwd_prop_dot_0(_S377, _S378, 0.0);

#line 1174
    vec3 _S379 = _S375.differential_0 + - _S378.differential_0 + _S351;

#line 1174
    vec3 _S380 = _S376 + _S378.differential_0 + _S371;

#line 1174
    if(only_hit_1_0)
    {

#line 1174
        vec3 _S381 = _S350 + _S380;

#line 1174
        _S350 = _S347;

#line 1174
        _S351 = _S381;

#line 1174
    }
    else
    {

#line 1174
        _S351 = _S380;

#line 1174
    }

#line 1174
    if(only_hit_0_0)
    {

#line 1174
        _S350 = _S350 + _S379;

#line 1174
    }
    else
    {

#line 1174
        _S350 = _S379;

#line 1174
    }

#line 1174
    vec3 _S382 = diff_3 ? _S351 : _S347;

#line 1174
    vec3 _S383 = diff_3 ? _S347 : _S351;

#line 1174
    s_diff_HitAD_0 _S384 = HitAD_x24_syn_dzero_0();

#line 1174
    s_diff_HitAD_0 _S385 = _S384;

#line 1174
    _S385.position_0 = _S382;

#line 1174
    vec3 _S386 = diff_2 ? _S383 : _S347;

#line 1174
    vec3 _S387 = diff_2 ? _S347 : _S383;

#line 1174
    s_diff_HitAD_0 _S388 = _S384;

#line 1174
    _S388.position_0 = _S386;

#line 1174
    DiffPair_float3_0 _S389;

#line 1174
    _S389.primal_0 = _S337.primal_0[0].position_1;

#line 1174
    _S389.differential_0 = _S347;

#line 1174
    DiffPair_float3_0 _S390;

#line 1174
    _S390.primal_0 = _S337.primal_0[0].normal_0;

#line 1174
    _S390.differential_0 = _S347;

#line 1174
    s_bwd_prop_dot_0(_S389, _S390, _S355[0]);

#line 1174
    vec3 _S391 = - _S367.differential_0;

#line 1174
    DiffPair_float3_0 _S392;

#line 1174
    _S392.primal_0 = _S337.primal_0[0].normal_0;

#line 1174
    _S392.differential_0 = _S347;

#line 1174
    DiffPair_float3_0 _S393;

#line 1174
    _S393.primal_0 = _S338;

#line 1174
    _S393.differential_0 = _S347;

#line 1174
    s_bwd_prop_dot_0(_S392, _S393, 0.0);

#line 1174
    vec3 _S394 = - _S393.differential_0;

#line 1174
    vec3 _S395 = _S391 + _S393.differential_0 + _S369;

#line 1174
    s_diff_Ray_0 _S396 = Ray_x24_syn_dzero_0();

#line 1174
    s_diff_Ray_0 _S397 = _S396;

#line 1174
    _S397.origin_1 = _S395;

#line 1174
    s_diff_HitAD_0 _S398 = _S384;

#line 1174
    _S398.position_0 = _S387;

#line 1174
    vec3 _S399 = _S389.differential_0 + _S367.differential_0 + _S394 + _S350;

#line 1174
    s_diff_HitAD_0 _S400 = _S384;

#line 1174
    _S400.position_0 = _S399;

#line 1174
    s_diff_HitAD_0  _S401[4];

#line 1174
    _S401[0] = _S384;

#line 1174
    _S401[1] = _S384;

#line 1174
    _S401[2] = _S384;

#line 1174
    _S401[3] = _S384;

#line 1174
    _S401[3U] = _S385;

#line 1174
    _S401[2U] = _S388;

#line 1174
    _S401[1] = _S398;

#line 1174
    _S401[0] = _S400;

#line 1174
    dpsis_1.primal_0 = dpsis_1.primal_0;

#line 1174
    dpsis_1.differential_0 = _S401;

#line 1174
    s_diff_Ray_0  _S402[4];

#line 1174
    _S402[0] = _S396;

#line 1174
    _S402[1] = _S396;

#line 1174
    _S402[2] = _S396;

#line 1174
    _S402[3] = _S396;

#line 1174
    _S402[0] = _S397;

#line 1174
    dprays_1.primal_0 = dprays_1.primal_0;

#line 1174
    dprays_1.differential_0 = _S402;

#line 1174
    return;
}


#line 1174
struct DiffPair_HitAD_0
{
    HitAD_0 primal_0;
    s_diff_HitAD_0 differential_0;
};


#line 1174
void s_bwd_prop_loadPosition_0(inout DiffPair_HitAD_0 dphit_1, inout DiffPair_float3_0 dptranslation_3, vec3 _s_dOut_8, s_bwd_prop_loadPosition_Intermediates_0 _s_diff_ctx_7)
{

#line 1174
    DiffPair_HitAD_0 _S403 = dphit_1;

#line 1174
    s_diff_HitAD_0 dphit_2 = HitAD_x24_syn_dzero_0();

#line 1174
    bool _S404 = !!_s_diff_ctx_7._S69.hasHit_0;

#line 1174
    vec3 _S405 = vec3(0.0);

#line 1174
    vec3 _S406;

#line 1174
    vec3 _S407;

#line 1174
    vec3 _S408;

#line 1174
    if(_S404)
    {

#line 1174
        float _S409 = _s_diff_ctx_7._S69.uv_0.x;

#line 1174
        vec3 _S410 = vec3(_S409);

#line 1174
        float _S411 = _s_diff_ctx_7._S69.uv_0.y;

#line 1174
        vec3 _S412 = vec3(_S411);

#line 1174
        _S406 = vec3(1.0 - _S409 - _S411);

#line 1174
        _S407 = _S412;

#line 1174
        _S408 = _S410;

#line 1174
    }
    else
    {

#line 1174
        _S406 = _S405;

#line 1174
        _S407 = _S405;

#line 1174
        _S408 = _S405;

#line 1174
    }

#line 1174
    s_diff_HitAD_0 _S413 = HitAD_x24_syn_dadd_0(HitAD_x24_syn_dadd_0(_S403.differential_0, dphit_2), dphit_2);

#line 1174
    s_diff_HitAD_0 dphit_3;

#line 1174
    if(_S404)
    {

#line 1174
        vec3 _S414 = _s_dOut_8 + _S413.position_0;

#line 1174
        vec3 _S415 = _S407 * _S414 + _S408 * _S414 + _S406 * _S414;

#line 1174
        dphit_3.position_0 = _S405;

#line 1174
        _S406 = _S415;

#line 1174
    }
    else
    {

#line 1174
        dphit_3 = HitAD_x24_syn_dadd_0(_S413, dphit_2);

#line 1174
        _S406 = _S405;

#line 1174
    }

#line 1174
    s_diff_HitAD_0 _S416 = HitAD_x24_syn_dadd_0(dphit_2, dphit_3);

#line 1174
    dptranslation_3.primal_0 = dptranslation_3.primal_0;

#line 1174
    dptranslation_3.differential_0 = _S406;

#line 1174
    dphit_1.primal_0 = _S403.primal_0;

#line 1174
    dphit_1.differential_0 = _S416;

#line 1174
    return;
}


#line 1174
void s_bwd_prop_reparameterizing_disconitnuous_integrands_0(Ray_0 prim_ray_2, RayDifferential_0 prim_raydiff_2, RandomSamplerState_0 RNG_2, inout DiffPair_float3_0 dptranslation_4, vec3 s_diff_radiance_T_0, s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0 _s_diff_ctx_8)
{

#line 120 0
    vec3 _S417 = vec3(0.0);

#line 120
    Ray_0 _S418 = prim_ray_2;

#line 120
    _S418.direction_0 = _s_diff_ctx_8._S88;

#line 120
    Ray_0 _S419 = prim_ray_2;

#line 120
    _S419.direction_0 = _s_diff_ctx_8._S89;

#line 120
    Ray_0 _S420 = prim_ray_2;

#line 120
    _S420.direction_0 = _s_diff_ctx_8._S90;

#line 120
    Ray_0 _S421 = prim_ray_2;

#line 120
    _S421.direction_0 = _s_diff_ctx_8._S91;

#line 120
    vec3 _S422 = _s_diff_ctx_8._S92 - prim_ray_2.origin_0;

#line 120
    HitAD_0  _S423[4] = { _s_diff_ctx_8._S74, _s_diff_ctx_8._S77, _s_diff_ctx_8._S80, _s_diff_ctx_8._S83 };

#line 120
    Ray_0  _S424[4] = { _S418, _S419, _S420, _S421 };

#line 120
    vec3 _S425 = s_primal_ctx_normalize_0(_S422);

#line 120
    vec3 _S426 = s_primal_ctx_cross_0(_S425, _S425);

#line 120
    float _S427 = s_primal_ctx_dot_0(_S425, _S425);

#line 120
    vec3 _S428 = s_primal_ctx_mul_0(_s_diff_ctx_8._S93, _s_diff_ctx_8._S90);

#line 120
    vec3 _S429 = s_primal_ctx_mul_0(_s_diff_ctx_8._S93, _s_diff_ctx_8._S91);

#line 120
    vec3 _S430 = vec3(_s_diff_ctx_8._S94);

#line 120
    vec3 _S431 = vec3(_s_diff_ctx_8._S95);

#line 120
    vec3 emission_0_0 = _S430 / _s_diff_ctx_8._S94 * _s_diff_ctx_8.hit_0_0.color_0;

#line 120
    vec3 emission_1_0 = _S431 / _s_diff_ctx_8._S95 * _s_diff_ctx_8.hit_1_0.color_0;

#line 120
    float weights_0_0 = _s_diff_ctx_8._S94 / _s_diff_ctx_8._S94;

#line 120
    float weights_1_0 = _s_diff_ctx_8._S95 / _s_diff_ctx_8._S95;

#line 120
    bool _S432 = s_primal_ctx_abs_0(weights_0_0) < 0.00000999999974737875;

#line 120
    bool _S433 = s_primal_ctx_abs_0(weights_1_0) < 0.00000999999974737875;

#line 120
    s_diff_HitAD_0 _S434 = HitAD_x24_syn_dzero_0();

#line 120
    vec3 _S435 = vec3(0.5) * s_diff_radiance_T_0;

#line 120
    vec3 _S436 = emission_0_0 / (_S432 ? 1.0 : weights_0_0) * - _S435;

#line 120
    vec3 _S437 = - _S417;

#line 120
    vec3 _S438 = emission_0_0 * _S437;

#line 120
    vec3 _S439 = vec3(0.5) * s_diff_radiance_T_0;

#line 120
    vec3 _S440 = emission_1_0 / (_S433 ? 1.0 : weights_1_0) * - _S439;

#line 653 5
    float _S441 = _S440[0] + _S440[1] + _S440[2];

#line 653
    vec3 _S442 = emission_1_0 * _S437;

#line 653
    float _S443 = _S433 ? 0.0 : _S436[0] + _S436[1] + _S436[2] + _S442[0] + _S442[1] + _S442[2];

#line 653
    DiffPair_float_0 _S444;

#line 653
    _S444.primal_0 = weights_1_0;

#line 653
    _S444.differential_0 = 0.0;

#line 653
    s_bwd_prop_abs_0(_S444, 0.0);

#line 653
    float _S445 = _S432 ? 0.0 : _S441 + _S438[0] + _S438[1] + _S438[2];

#line 653
    DiffPair_float_0 _S446;

#line 653
    _S446.primal_0 = weights_0_0;

#line 653
    _S446.differential_0 = 0.0;

#line 653
    s_bwd_prop_abs_0(_S446, 0.0);

#line 653
    float _S447 = (_S445 + _S446.differential_0) / _s_diff_ctx_8._S94;

#line 653
    vec3 _S448 = _s_diff_ctx_8.hit_1_0.color_0 * _S435 / _S431;

#line 653
    vec3 _S449 = _s_diff_ctx_8.hit_0_0.color_0 * _S439 / _S430;

#line 653
    float _S450 = (_S443 + _S444.differential_0) / _s_diff_ctx_8._S95 + _S448[0] + _S448[1] + _S448[2];

#line 653
    DiffPair_float3_0 _S451;

#line 653
    _S451.primal_0 = _S429;

#line 653
    _S451.differential_0 = _S417;

#line 653
    s_bwd_prop_vMFDistribution_Pdf_0(_s_diff_ctx_8.vmf_0, _S451, _S450);

#line 653
    float _S452 = _S447 + _S449[0] + _S449[1] + _S449[2];

#line 653
    DiffPair_float3_0 _S453;

#line 653
    _S453.primal_0 = _S428;

#line 653
    _S453.differential_0 = _S417;

#line 653
    s_bwd_prop_vMFDistribution_Pdf_0(_s_diff_ctx_8.vmf_0, _S453, _S452);

#line 653
    s_diff_Ray_0 _S454 = Ray_x24_syn_dzero_0();

#line 653
    vec3 _S455 = _S451.differential_0 + _S454.direction_1;

#line 1174
    mat3x3 _S456 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 1174
    DiffPair_float3x3_0 _S457;

#line 1174
    _S457.primal_0 = _s_diff_ctx_8._S93;

#line 1174
    _S457.differential_0 = _S456;

#line 1174
    DiffPair_float3_0 _S458;

#line 1174
    _S458.primal_0 = _s_diff_ctx_8._S91;

#line 1174
    _S458.differential_0 = _S417;

#line 1174
    s_bwd_prop_mul_0(_S457, _S458, _S455);

#line 1174
    vec3 _S459 = _S453.differential_0 + _S454.direction_1;

#line 1174
    DiffPair_float3x3_0 _S460;

#line 1174
    _S460.primal_0 = _s_diff_ctx_8._S93;

#line 1174
    _S460.differential_0 = _S456;

#line 1174
    DiffPair_float3_0 _S461;

#line 1174
    _S461.primal_0 = _s_diff_ctx_8._S90;

#line 1174
    _S461.differential_0 = _S417;

#line 1174
    s_bwd_prop_mul_0(_S460, _S461, _S459);

#line 1174
    mat3x3 _S462 = _S457.differential_0 + _S460.differential_0;

#line 1174
    DiffPair_float3_0 _S463;

#line 1174
    _S463.primal_0 = _S426;

#line 1174
    _S463.differential_0 = _S417;

#line 1174
    DiffPair_float_0 _S464;

#line 1174
    _S464.primal_0 = _S427;

#line 1174
    _S464.differential_0 = 0.0;

#line 1174
    s_bwd_prop_rotation_from_axis_cosangle_0(_S463, _S464, _S462, _s_diff_ctx_8._S87);

#line 1174
    DiffPair_float3_0 _S465;

#line 1174
    _S465.primal_0 = _S425;

#line 1174
    _S465.differential_0 = _S417;

#line 1174
    DiffPair_float3_0 _S466;

#line 1174
    _S466.primal_0 = _S425;

#line 1174
    _S466.differential_0 = _S417;

#line 1174
    s_bwd_prop_dot_0(_S465, _S466, _S464.differential_0);

#line 1174
    DiffPair_float3_0 _S467;

#line 1174
    _S467.primal_0 = _S425;

#line 1174
    _S467.differential_0 = _S417;

#line 1174
    DiffPair_float3_0 _S468;

#line 1174
    _S468.primal_0 = _S425;

#line 1174
    _S468.differential_0 = _S417;

#line 1174
    s_bwd_prop_cross_0(_S467, _S468, _S463.differential_0);

#line 1174
    vec3 _S469 = _S465.differential_0 + _S468.differential_0;

#line 1174
    DiffPair_float3_0 _S470;

#line 1174
    _S470.primal_0 = _S422;

#line 1174
    _S470.differential_0 = _S417;

#line 1174
    s_bwd_prop_normalize_0(_S470, _S469);

#line 1174
    s_diff_Ray_0  _S471[4] = { _S454, _S454, _S454, _S454 };

#line 1174
    DiffPair_arrayx3CRayx2C4x3E_0 _S472;

#line 1174
    _S472.primal_0 = _S424;

#line 1174
    _S472.differential_0 = _S471;

#line 1174
    s_diff_HitAD_0  _S473[4] = { _S434, _S434, _S434, _S434 };

#line 1174
    DiffPair_arrayx3CHitADx2C4x3E_0 _S474;

#line 1174
    _S474.primal_0 = _S423;

#line 1174
    _S474.differential_0 = _S473;

#line 1174
    s_bwd_prop_estimate_discontinuity_0(_S472, _S474, _S470.differential_0, _s_diff_ctx_8._S86);

#line 1174
    s_diff_HitAD_0 _S475 = HitAD_x24_syn_dadd_0(_S474.differential_0[3], _S434);

#line 1174
    DiffPair_HitAD_0 _S476;

#line 1174
    _S476.primal_0 = _s_diff_ctx_8._S85;

#line 1174
    _S476.differential_0 = _S475;

#line 1174
    DiffPair_float3_0 _S477;

#line 1174
    _S477.primal_0 = dptranslation_4.primal_0;

#line 1174
    _S477.differential_0 = _S417;

#line 1174
    s_bwd_prop_loadPosition_0(_S476, _S477, _S417, _s_diff_ctx_8._S84);

#line 1174
    s_diff_HitAD_0 _S478 = HitAD_x24_syn_dadd_0(_S474.differential_0[2], _S434);

#line 1174
    DiffPair_HitAD_0 _S479;

#line 1174
    _S479.primal_0 = _s_diff_ctx_8._S82;

#line 1174
    _S479.differential_0 = _S478;

#line 1174
    DiffPair_float3_0 _S480;

#line 1174
    _S480.primal_0 = dptranslation_4.primal_0;

#line 1174
    _S480.differential_0 = _S417;

#line 1174
    s_bwd_prop_loadPosition_0(_S479, _S480, _S417, _s_diff_ctx_8._S81);

#line 1174
    s_diff_HitAD_0 _S481 = HitAD_x24_syn_dadd_0(_S474.differential_0[1], _S434);

#line 1174
    DiffPair_HitAD_0 _S482;

#line 1174
    _S482.primal_0 = _s_diff_ctx_8._S79;

#line 1174
    _S482.differential_0 = _S481;

#line 1174
    DiffPair_float3_0 _S483;

#line 1174
    _S483.primal_0 = dptranslation_4.primal_0;

#line 1174
    _S483.differential_0 = _S417;

#line 1174
    s_bwd_prop_loadPosition_0(_S482, _S483, _S417, _s_diff_ctx_8._S78);

#line 1174
    s_diff_HitAD_0 _S484 = HitAD_x24_syn_dadd_0(_S474.differential_0[0], _S434);

#line 1174
    DiffPair_HitAD_0 _S485;

#line 1174
    _S485.primal_0 = _s_diff_ctx_8._S76;

#line 1174
    _S485.differential_0 = _S484;

#line 1174
    DiffPair_float3_0 _S486;

#line 1174
    _S486.primal_0 = dptranslation_4.primal_0;

#line 1174
    _S486.differential_0 = _S417;

#line 1174
    s_bwd_prop_loadPosition_0(_S485, _S486, _S417, _s_diff_ctx_8._S75);

#line 1174
    vec3 _S487 = _S477.differential_0 + _S480.differential_0 + _S483.differential_0 + _S486.differential_0;

#line 1174
    dptranslation_4.primal_0 = dptranslation_4.primal_0;

#line 1174
    dptranslation_4.differential_0 = _S487;

#line 1174
    return;
}


#line 1174
void s_bwd_prop_forward_render_0(Ray_0 prim_ray_3, RayDifferential_0 prim_raydiff_3, RandomSamplerState_0 RNG_3, inout DiffPair_float3_0 dptranslation_5, float _s_dOut_9, s_bwd_prop_forward_render_Intermediates_0 _s_diff_ctx_9)
{

#line 224 0
    vec3 _S488 = vec3(_s_dOut_9, 0.0, 0.0);

#line 1127 5
    vec3 _S489 = vec3(0.0);

#line 1127
    DiffPair_float3_0 _S490;

#line 1127
    _S490.primal_0 = dptranslation_5.primal_0;

#line 1127
    _S490.differential_0 = _S489;

#line 1127
    s_bwd_prop_reparameterizing_disconitnuous_integrands_0(prim_ray_3, prim_raydiff_3, _s_diff_ctx_9._S96, _S490, _S488, _s_diff_ctx_9._S97);

#line 1127
    dptranslation_5.primal_0 = dptranslation_5.primal_0;

#line 1127
    dptranslation_5.differential_0 = _S490.differential_0;

#line 1127
    return;
}


#line 1127
void s_bwd_forward_render_0(Ray_0 _S491, RayDifferential_0 _S492, RandomSamplerState_0 _S493, inout DiffPair_float3_0 _S494, float _S495)
{

#line 1127
    RandomSamplerState_0 _S496 = _S493;

#line 1127
    s_bwd_prop_forward_render_Intermediates_0 _S497;

#line 1127
    float _S498 = s_bwd_primal_forward_render_0(_S491, _S492, _S496, _S494.primal_0, _S497);

#line 1127
    s_bwd_prop_forward_render_0(_S491, _S492, _S493, _S494, _S495, _S497);

#line 1127
    return;
}


#line 1127
void RWByteAddressBuffer_InterlockedAddF32_0(uint _S499, float _S500)
{

#line 2394 9
    float _S501 = (atomicAdd((u_trans_gradient_0._data[_S499 / 4U]), (_S500)));
    return;
}


#line 236 0
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{

#line 238
    const ivec2 resolution_2 = ivec2(512, 512);
    ivec2 pixel_2 = ivec3(gl_GlobalInvocationID).xy;


    if((any(bvec2((greaterThanEqual(pixel_2,resolution_2))))))
    {

#line 242
        return;
    }
    RandomSamplerState_0 RNG_4 = InitRandomSampler_0(uvec2(pixel_2), uint(PushConstants_0.rand_seed_0));
    Ray_0 ray_2 = generateRay_0(pixel_2, resolution_2);
    RayDifferential_0 raydiff_1 = generateRayDifferential_0(pixel_2, resolution_2);


    vec3 _S502 = vec3(0.0);

#line 249
    DiffPair_float3_0 trans_pair_0;

#line 249
    trans_pair_0.primal_0 = u_trans_0._data[0U];

#line 249
    trans_pair_0.differential_0 = _S502;

    s_bwd_forward_render_0(ray_2, raydiff_1, RNG_4, trans_pair_0, u_gradient_0._data[uint(pixel_2.x * 512 + pixel_2.y)]);

#line 256
    if(!(any(bvec3((bvec3(uvec3(isnan(trans_pair_0.differential_0))|uvec3(isinf(trans_pair_0.differential_0))))))))
    {

#line 256
        RWByteAddressBuffer_InterlockedAddF32_0(0U, trans_pair_0.differential_0.x);

#line 256
        RWByteAddressBuffer_InterlockedAddF32_0(4U, trans_pair_0.differential_0.y);

#line 256
        RWByteAddressBuffer_InterlockedAddF32_0(8U, trans_pair_0.differential_0.z);

#line 256
    }

#line 264
    return;
}

