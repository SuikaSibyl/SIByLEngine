#version 450
#extension GL_EXT_shader_atomic_float : require
layout(column_major) uniform;
layout(column_major) buffer;

#line 8 0
struct SLANG_ParameterGroup_PushConstants_0
{
    int rand_seed_0;
};


#line 8
layout(push_constant)
layout(std140) uniform _S1
{
    int rand_seed_0;
}PushConstants_0;

#line 11
layout(std430, binding = 1) buffer StructuredBuffer_float3_t_0 {
    vec3 _data[];
} u_trans_0;

#line 10
layout(std430, binding = 0) buffer StructuredBuffer_float_t_0 {
    float _data[];
} u_gradient_0;

#line 10
layout(std430, binding = 2) buffer StructuredBuffer_float_t_1 {
    float _data[];
} u_trans_gradient_0;

#line 20 1
uint Hash_CRNG_0(uint seed_0)
{

#line 21
    uint state_0 = seed_0 * 747796405U + 2891336453U;
    uint word_0 = (state_0 >> (state_0 >> 28U) + 4U ^ state_0) * 277803737U;
    return word_0 >> 22U ^ word_0;
}


#line 64
struct RandomSamplerState_0
{
    uint state_1;
};


#line 66
RandomSamplerState_0 InitRandomSampler_0(uvec2 pixelPos_0, uint frameIndex_0)
{

#line 67
    RandomSamplerState_0 r_0;
    r_0.state_1 = frameIndex_0 + Hash_CRNG_0(pixelPos_0.x << 16 | pixelPos_0.y);
    return r_0;
}


#line 31 2
struct DiffPair_float_0
{
    float primal_0;
    float differential_0;
};


#line 1 3
void _d_sqrt_0(inout DiffPair_float_0 dpx_0, float dOut_0)
{

#line 1298 4
    float _S2 = 0.5 / sqrt(max(0.00000010000000116861, dpx_0.primal_0)) * dOut_0;

#line 1298
    dpx_0.primal_0 = dpx_0.primal_0;

#line 1298
    dpx_0.differential_0 = _S2;

#line 1272
    return;
}


#line 1272
void s_bwd_prop_sqrt_0(inout DiffPair_float_0 _S3, float _S4)
{

#line 1272
    _d_sqrt_0(_S3, _S4);

#line 1272
    return;
}


#line 1272
struct DiffPair_float3_0
{
    vec3 primal_0;
    vec3 differential_0;
};


#line 992
void _d_dot_0(inout DiffPair_float3_0 dpx_1, inout DiffPair_float3_0 dpy_0, float dOut_1)
{
    vec3 x_d_result_0;

#line 994
    vec3 y_d_result_0;



    x_d_result_0[0] = dpy_0.primal_0[0] * dOut_1;
    y_d_result_0[0] = dpx_1.primal_0[0] * dOut_1;

#line 998
    x_d_result_0[1] = dpy_0.primal_0[1] * dOut_1;
    y_d_result_0[1] = dpx_1.primal_0[1] * dOut_1;

#line 998
    x_d_result_0[2] = dpy_0.primal_0[2] * dOut_1;
    y_d_result_0[2] = dpx_1.primal_0[2] * dOut_1;

#line 999
    dpx_1.primal_0 = dpx_1.primal_0;

#line 999
    dpx_1.differential_0 = x_d_result_0;

#line 999
    dpy_0.primal_0 = dpy_0.primal_0;

#line 999
    dpy_0.differential_0 = y_d_result_0;



    return;
}


#line 25 2
struct Ray_0
{
    vec3 origin_0;
    vec3 direction_0;
};


#line 41
Ray_0 generateRay_0(ivec2 pixel_0, ivec2 resolution_0)
{
    vec2 p_0 = (vec2(- resolution_0.xy) + 2.0 * vec2(pixel_0)) / float(resolution_0.y);

#line 42
    Ray_0 ray_0;

    ray_0.origin_0 = vec3(0.0, 0.0, 4.0);
    ray_0.direction_0 = normalize(vec3(p_0, -2.0));
    return ray_0;
}


#line 34
struct RayDifferential_0
{
    vec3 dodx_0;
    vec3 dody_0;
    vec3 dddx_0;
    vec3 dddy_0;
};


#line 49
RayDifferential_0 generateRayDifferential_0(ivec2 pixel_1, ivec2 resolution_1)
{
    Ray_0 rx_0 = generateRay_0(pixel_1 + ivec2(1, 0), resolution_1);
    Ray_0 ry_0 = generateRay_0(pixel_1 + ivec2(0, 1), resolution_1);

#line 50
    RayDifferential_0 raydiff_0;


    raydiff_0.dodx_0 = rx_0.origin_0;
    raydiff_0.dody_0 = ry_0.origin_0;
    raydiff_0.dddx_0 = rx_0.direction_0;
    raydiff_0.dddy_0 = ry_0.direction_0;
    return raydiff_0;
}


#line 25
struct s_diff_Ray_0
{
    vec3 origin_1;
    vec3 direction_1;
};


#line 25
s_diff_Ray_0 Ray_x24_syn_dzero_0()
{

#line 25
    s_diff_Ray_0 result_0;

#line 1226 5
    vec3 _S5 = vec3(0.0);

#line 1226
    result_0.origin_1 = _S5;

#line 1226
    result_0.direction_1 = _S5;

#line 1226
    return result_0;
}


#line 60 2
struct s_diff_HitAD_0
{
    vec3 position_0;
};


#line 60
s_diff_HitAD_0 HitAD_x24_syn_dzero_0()
{

#line 60
    s_diff_HitAD_0 result_1;

#line 60
    result_1.position_0 = vec3(0.0);

#line 60
    return result_1;
}


#line 60
s_diff_HitAD_0 HitAD_x24_syn_dadd_0(s_diff_HitAD_0 SLANG_anonymous_0_0, s_diff_HitAD_0 SLANG_anonymous_1_0)
{

#line 60
    s_diff_HitAD_0 result_2;

#line 60
    result_2.position_0 = SLANG_anonymous_0_0.position_0 + SLANG_anonymous_1_0.position_0;

#line 60
    return result_2;
}


#line 60
float s_primal_ctx_min_0(float _S6, float _S7)
{

#line 60
    return min(_S6, _S7);
}


#line 60
float s_primal_ctx_acos_0(float _S8)
{

#line 60
    return acos(_S8);
}


#line 60
float s_primal_ctx_cos_0(float _S9)
{

#line 60
    return cos(_S9);
}


#line 31 6
struct vMFDistribution_0
{
    vec3 u_0;
    float k_0;
};


#line 76
vMFDistribution_0 vMFDistribution_x24init_0(vec3 u_1, float v_0)
{

#line 76
    vMFDistribution_0 _S10;
    _S10.u_0 = u_1;
    _S10.k_0 = v_0;

#line 76
    return _S10;
}


#line 72 1
uint StepRNG_0(uint rngState_0)
{

#line 73
    return rngState_0 * 747796405U + 1U;
}

float StepAndOutputRNGFloat_0(inout RandomSamplerState_0 rngState_1)
{

    uint _S11 = StepRNG_0(rngState_1.state_1);

#line 79
    rngState_1.state_1 = _S11;
    uint word_1 = (_S11 >> (_S11 >> 28) + 4U ^ _S11) * 277803737U;

    return float(word_1 >> 22 ^ word_1) / 4294967296.0;
}


#line 93
float SampleUniformFloat_0(inout RandomSamplerState_0 r_1)
{

#line 94
    float _S12 = StepAndOutputRNGFloat_0(r_1);

#line 94
    return _S12;
}


#line 155
float GetNextRandom_0(inout RandomSamplerState_0 r_2)
{

#line 156
    float _S13 = SampleUniformFloat_0(r_2);

#line 156
    return _S13;
}

vec2 GetNextRandomFloat2_0(inout RandomSamplerState_0 r_3)
{

#line 160
    float _S14 = GetNextRandom_0(r_3);

#line 160
    float _S15 = GetNextRandom_0(r_3);

#line 160
    return vec2(_S14, _S15);
}


#line 11 7
vec3 UniformOnSphere_0(vec2 u_2)
{

#line 12
    float z_0 = 1.0 - 2.0 * u_2.x;
    float r_4 = sqrt(max(0.0, 1.0 - z_0 * z_0));
    float phi_0 = 6.28318548202514648438 * u_2[1];
    return vec3(r_4 * cos(phi_0), r_4 * sin(phi_0), z_0);
}


#line 1 3
void _d_exp_0(inout DiffPair_float_0 dpx_2, float dOut_2)
{

#line 1298 4
    float _S16 = exp(dpx_2.primal_0) * dOut_2;

#line 1298
    dpx_2.primal_0 = dpx_2.primal_0;

#line 1298
    dpx_2.differential_0 = _S16;

#line 1272
    return;
}


#line 1272
float s_primal_ctx_exp_0(float _S17)
{

#line 1272
    return exp(_S17);
}


#line 1272
void s_bwd_prop_exp_0(inout DiffPair_float_0 _S18, float _S19)
{

#line 1272
    _d_exp_0(_S18, _S19);

#line 1272
    return;
}


#line 42 8
mat3x3 createFrame_0(vec3 n_0)
{

#line 43
    if(n_0[2] < -0.99999898672103881836)
    {

#line 44
        return mat3x3(vec3(0.0, -1.0, 0.0), vec3(-1.0, 0.0, 0.0), n_0);
    }
    else
    {

#line 46
        float a_0 = 1.0 / (1.0 + n_0[2]);
        float _S20 = - n_0[0];

#line 47
        float b_0 = _S20 * n_0[1] * a_0;
        return mat3x3(vec3(1.0 - n_0[0] * n_0[0] * a_0, b_0, _S20), vec3(b_0, 1.0 - n_0[1] * n_0[1] * a_0, - n_0[1]), n_0);
    }

#line 48
}


#line 59
mat3x3 createONB_0(vec3 n_1)
{

#line 60
    return createFrame_0(n_1);
}


#line 7
vec3 to_world_0(mat3x3 frame_0, vec3 v_1)
{

#line 8
    return v_1[0] * frame_0[0] + v_1[1] * frame_0[1] + v_1[2] * frame_0[2];
}


#line 40 6
vec3 vMFDistribution_DrawSample_0(vMFDistribution_0 this_0, vec2 rnd_0)
{

#line 41
    if(this_0.k_0 == 0.0)
    {

#line 41
        return UniformOnSphere_0(rnd_0);
    }

#line 42
    float _S21 = rnd_0.y;

#line 42
    float W_0 = 1.0 + log(_S21 + (1.0 - _S21) * exp(-2.0 * this_0.k_0)) / this_0.k_0;
    float _S22 = 6.28318548202514648438 * rnd_0.x;


    return to_world_0(createONB_0(this_0.u_0), vec3(sqrt(1.0 - W_0 * W_0) * vec2(cos(_S22), sin(_S22)), W_0));
}


#line 1039 4
void _d_cross_0(inout DiffPair_float3_0 a_1, inout DiffPair_float3_0 b_1, vec3 dOut_3)
{

#line 1046
    float _S23 = dOut_3.y;

#line 1046
    float _S24 = dOut_3.z;
    float _S25 = dOut_3.x;


    float dbx_0 = a_1.primal_0.z * _S23 + - a_1.primal_0.y * _S24;
    float dby_0 = - a_1.primal_0.z * _S25 + a_1.primal_0.x * _S24;
    float dbz_0 = a_1.primal_0.y * _S25 + - a_1.primal_0.x * _S23;

    vec3 _S26 = vec3(- b_1.primal_0.z * _S23 + b_1.primal_0.y * _S24, b_1.primal_0.z * _S25 + - b_1.primal_0.x * _S24, - b_1.primal_0.y * _S25 + b_1.primal_0.x * _S23);

#line 1054
    a_1.primal_0 = a_1.primal_0;

#line 1054
    a_1.differential_0 = _S26;
    vec3 _S27 = vec3(dbx_0, dby_0, dbz_0);

#line 1055
    b_1.primal_0 = b_1.primal_0;

#line 1055
    b_1.differential_0 = _S27;
    return;
}


#line 5 2
vec3 triIntersect_0(vec3 ro_0, vec3 direction_2, vec3 v0_0, vec3 v1_0, vec3 v2_0)
{


    vec3 v1v0_0 = v1_0 - v0_0;
    vec3 v2v0_0 = v2_0 - v0_0;
    vec3 rov0_0 = ro_0 - v0_0;

    vec3 n_2 = cross(v1v0_0, v2v0_0);
    vec3 q_0 = cross(rov0_0, direction_2);
    float d_0 = 1.0 / dot(direction_2, n_2);
    float u_3 = d_0 * dot(- q_0, v2v0_0);
    float v_2 = d_0 * dot(q_0, v1v0_0);
    float _S28 = d_0 * dot(- n_2, rov0_0);

#line 18
    float t_0;

    if(u_3 < 0.0 || v_2 < 0.0 || u_3 + v_2 > 1.0)
    {

#line 20
        t_0 = -1.0;

#line 20
    }
    else
    {

#line 20
        t_0 = _S28;

#line 20
    }

    return vec3(t_0, u_3, v_2);
}


#line 60
struct HitAD_0
{
    vec3 position_1;
    vec3 normal_0;
    vec3 color_0;
    uint geometryID_0;
    bool hasHit_0;
    vec2 uv_0;
    vec2 bary_0;
};


#line 94
HitAD_0 ray_tracing_0(Ray_0 ray_1, vec3 translation_0)
{
    const vec3 _S29 = vec3(1.5, 1.0, 1.0);

#line 96
    vec3 v1_1 = cos(vec3(2.0, 1.0, 1.0) + 1.0) * _S29 + translation_0;
    vec3 v2_1 = cos(vec3(5.0, 2.0, 3.0) + 2.0) * _S29 + translation_0;
    vec3 v3_0 = cos(vec3(1.0, 3.0, 5.0) + 4.0) * _S29 + translation_0;

#line 104
    vec3 col_0 = (vec3(0.07999999821186065674) + 0.01999999955296516418 * ray_1.direction_0.y) * 0.69999998807907104492;

    HitAD_0 hit_0;

    vec3 res_0 = triIntersect_0(ray_1.origin_0, ray_1.direction_0, v1_1, v2_1, v3_0);
    float t2_0 = res_0.x;

#line 109
    vec3 col_1;
    if(t2_0 > 0.0 && t2_0 < 10000000000.0)
    {


        vec3 nor_0 = normalize(cross(v2_1 - v1_1, v3_0 - v1_1));

        vec3 col_2 = vec3(0.80000001192092895508, 0.40000000596046447754, 0.60000002384185791016) * (0.55000001192092895508 + 0.44999998807907104492 * faceforward(- nor_0, - ray_1.direction_0, nor_0).y);

        hit_0.hasHit_0 = true;
        hit_0.position_1 = ray_1.origin_0 + t2_0 * ray_1.direction_0;
        hit_0.uv_0 = res_0.yz;
        hit_0.normal_0 = nor_0;

#line 121
        col_1 = col_2;

#line 121
    }
    else
    {
        hit_0.hasHit_0 = false;

#line 124
        col_1 = col_0;

#line 124
    }


    hit_0.color_0 = col_1;
    return hit_0;
}


#line 70
bool HasHit_0(HitAD_0 hit_1)
{

#line 71
    return hit_1.hasHit_0;
}


#line 1 3
void _d_abs_0(inout DiffPair_float_0 dpx_3, float dOut_4)
{

#line 1336 4
    float _S30 = (dpx_3.primal_0 > 0.0 ? 1.0 : dpx_3.primal_0 == 0.0 ? 0.0 : -1.0) * dOut_4;

#line 1336
    dpx_3.primal_0 = dpx_3.primal_0;

#line 1336
    dpx_3.differential_0 = _S30;

#line 1272
    return;
}


#line 1272
float s_primal_ctx_abs_0(float _S31)
{

#line 1272
    return abs(_S31);
}


#line 1272
void s_bwd_prop_abs_0(inout DiffPair_float_0 _S32, float _S33)
{

#line 1272
    _d_abs_0(_S32, _S33);

#line 1272
    return;
}


#line 1272
float s_primal_ctx_determinant_0(mat3x3 _S34)
{

#line 1272
    return determinant(_S34);
}


#line 1272
struct DiffPair_float3x3_0
{
    mat3x3 primal_0;
    mat3x3 differential_0;
};


#line 900
void s_bwd_prop_determinant_impl_0(inout DiffPair_float3x3_0 dpm_0, float _s_dOut_0)
{

#line 900
    float _S35 = dpm_0.primal_0[2][0] * _s_dOut_0;

#line 900
    float _S36 = (dpm_0.primal_0[0][1] * dpm_0.primal_0[1][2] - dpm_0.primal_0[1][1] * dpm_0.primal_0[0][2]) * _s_dOut_0;

#line 900
    float _S37 = - _S35;

#line 900
    float _S38 = dpm_0.primal_0[0][2] * _S37;

#line 900
    float _S39 = - _s_dOut_0;

#line 900
    float _S40 = dpm_0.primal_0[1][0] * _S39;

#line 900
    float _S41 = (dpm_0.primal_0[0][1] * dpm_0.primal_0[2][2] - dpm_0.primal_0[2][1] * dpm_0.primal_0[0][2]) * _S39;

#line 900
    float _S42 = - _S40;

#line 509 5
    float _S43 = dpm_0.primal_0[1][1] * _S37 + dpm_0.primal_0[2][1] * _S42;

#line 509
    float _S44 = dpm_0.primal_0[1][2] * _S35 + dpm_0.primal_0[2][2] * _S40;

#line 509
    float _S45 = dpm_0.primal_0[0][0] * _s_dOut_0;

#line 509
    float _S46 = (dpm_0.primal_0[1][1] * dpm_0.primal_0[2][2] - dpm_0.primal_0[2][1] * dpm_0.primal_0[1][2]) * _s_dOut_0;

#line 509
    float _S47 = - _S45;

#line 509
    float _S48 = dpm_0.primal_0[0][1] * _S35 + dpm_0.primal_0[2][1] * _S47;

#line 509
    float _S49 = dpm_0.primal_0[0][2] * _S42 + dpm_0.primal_0[1][2] * _S47;

#line 509
    float _S50 = dpm_0.primal_0[2][2] * _S45;

#line 509
    float _S51 = dpm_0.primal_0[0][1] * _S40 + dpm_0.primal_0[1][1] * _S45;

#line 1226
    vec3 _S52 = vec3(0.0);

#line 1226
    vec3 _S53 = _S52;

#line 1226
    _S53[0] = _S36;

#line 1226
    _S53[1] = _S49;

#line 1226
    _S53[2] = _S51;

#line 509
    float _S54 = _S38 + _S50;

#line 509
    vec3 _S55 = _S52;

#line 509
    _S55[0] = _S41;

#line 509
    _S55[2] = _S48;

#line 509
    _S55[1] = _S54;

#line 509
    vec3 _S56 = _S52;

#line 509
    _S56[2] = _S43;

#line 509
    _S56[1] = _S44;

#line 509
    _S56[0] = _S46;

#line 509
    mat3x3 _S57 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 509
    _S57[2] = _S53;

#line 509
    _S57[1] = _S55;

#line 509
    _S57[0] = _S56;

#line 509
    dpm_0.primal_0 = dpm_0.primal_0;

#line 509
    dpm_0.differential_0 = _S57;

#line 509
    return;
}


#line 509
void s_bwd_determinant_impl_0(inout DiffPair_float3x3_0 _S58, float _S59)
{

#line 509
    s_bwd_prop_determinant_impl_0(_S58, _S59);

#line 509
    return;
}


#line 509
void s_bwd_prop_determinant_0(inout DiffPair_float3x3_0 _S60, float _S61)
{

#line 1927 4
    s_bwd_determinant_impl_0(_S60, _S61);

#line 1927
    return;
}


#line 898
void _d_mul_0(inout DiffPair_float3x3_0 left_0, inout DiffPair_float3_0 right_0, vec3 dOut_5)
{

    vec3 right_d_result_0;

#line 900
    mat3x3 left_d_result_0;

#line 909
    float _S62 = left_0.primal_0[0][0] * dOut_5[0];
    left_d_result_0[0][0] = right_0.primal_0[0] * dOut_5[0];

#line 909
    float sum_0 = _S62 + left_0.primal_0[1][0] * dOut_5[1];
    left_d_result_0[1][0] = right_0.primal_0[0] * dOut_5[1];

#line 909
    float sum_1 = sum_0 + left_0.primal_0[2][0] * dOut_5[2];
    left_d_result_0[2][0] = right_0.primal_0[0] * dOut_5[2];

    right_d_result_0[0] = sum_1;

#line 909
    float _S63 = left_0.primal_0[0][1] * dOut_5[0];
    left_d_result_0[0][1] = right_0.primal_0[1] * dOut_5[0];

#line 909
    float sum_2 = _S63 + left_0.primal_0[1][1] * dOut_5[1];
    left_d_result_0[1][1] = right_0.primal_0[1] * dOut_5[1];

#line 909
    float sum_3 = sum_2 + left_0.primal_0[2][1] * dOut_5[2];
    left_d_result_0[2][1] = right_0.primal_0[1] * dOut_5[2];

    right_d_result_0[1] = sum_3;

#line 909
    float _S64 = left_0.primal_0[0][2] * dOut_5[0];
    left_d_result_0[0][2] = right_0.primal_0[2] * dOut_5[0];

#line 909
    float sum_4 = _S64 + left_0.primal_0[1][2] * dOut_5[1];
    left_d_result_0[1][2] = right_0.primal_0[2] * dOut_5[1];

#line 909
    float sum_5 = sum_4 + left_0.primal_0[2][2] * dOut_5[2];
    left_d_result_0[2][2] = right_0.primal_0[2] * dOut_5[2];

    right_d_result_0[2] = sum_5;

#line 912
    left_0.primal_0 = left_0.primal_0;

#line 912
    left_0.differential_0 = left_d_result_0;

#line 912
    right_0.primal_0 = right_0.primal_0;

#line 912
    right_0.differential_0 = right_d_result_0;



    return;
}


#line 1 3
void _d_rcp_0(inout DiffPair_float_0 dpx_4, float dOut_6)
{

#line 1298 4
    float _S65 = -1.0 / max(0.00000010000000116861, dpx_4.primal_0 * dpx_4.primal_0) * dOut_6;

#line 1298
    dpx_4.primal_0 = dpx_4.primal_0;

#line 1298
    dpx_4.differential_0 = _S65;

#line 1272
    return;
}


#line 4622 9
float rcp_0(float x_0)
{
    return 1.0 / x_0;
}


#line 249 0
struct s_bwd_prop_loadPosition_Intermediates_0
{
    HitAD_0 _S66;
};


#line 249
struct s_bwd_prop_estimate_discontinuity_Intermediates_0
{
    bool _S67;
    bool _S68;
    bool i_hit_0;
    bool i_hit_1;
    mat3x3 _S69;
};


#line 249
struct s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0
{
    mat3x3 _S70;
};


#line 249
struct s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0
{
    HitAD_0 _S71;
    s_bwd_prop_loadPosition_Intermediates_0 _S72;
    HitAD_0 _S73;
    HitAD_0 _S74;
    s_bwd_prop_loadPosition_Intermediates_0 _S75;
    HitAD_0 _S76;
    HitAD_0 _S77;
    s_bwd_prop_loadPosition_Intermediates_0 _S78;
    HitAD_0 _S79;
    HitAD_0 _S80;
    s_bwd_prop_loadPosition_Intermediates_0 _S81;
    HitAD_0 _S82;
    s_bwd_prop_estimate_discontinuity_Intermediates_0 _S83;
    s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _S84;
    vMFDistribution_0 vmf_0;
    vec3 _S85;
    vec3 _S86;
    vec3 _S87;
    vec3 _S88;
    vec3 _S89;
    mat3x3 _S90;
    float _S91;
    float _S92;
    HitAD_0 hit_0_0;
    HitAD_0 hit_1_0;
};


#line 249
struct s_bwd_prop_forward_render_Intermediates_0
{
    RandomSamplerState_0 _S93;
    s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0 _S94;
};


#line 249
float s_primal_ctx_dot_0(vec3 _S95, vec3 _S96)
{

#line 249
    return dot(_S95, _S96);
}


#line 156
vec3 s_primal_ctx_cos_1(vec3 _S97)
{

#line 156
    return cos(_S97);
}


#line 156
vec3 s_bwd_primal_loadPosition_0(inout HitAD_0 dphit_0, vec3 dptranslation_0, out s_bwd_prop_loadPosition_Intermediates_0 _s_diff_ctx_0)
{

#line 156
    vec3 _S98 = vec3(0.0);

#line 156
    vec2 _S99 = vec2(0.0);

#line 156
    HitAD_0 _S100 = { _S98, _S98, _S98, 0U, false, _S99, _S99 };

#line 156
    _s_diff_ctx_0._S66 = _S100;

#line 156
    HitAD_0 _S101 = dphit_0;

#line 156
    _s_diff_ctx_0._S66 = dphit_0;

#line 76 2
    bool _S102 = !_S101.hasHit_0;

#line 76
    vec3 _S103;

#line 76
    if(_S102)
    {

#line 76
        _S103 = vec3(0.0);

#line 76
    }

#line 76
    bool _S104 = !_S102;

#line 76
    HitAD_0 _S105;

#line 76
    if(_S104)
    {

#line 76
        const vec3 _S106 = vec3(1.5, 1.0, 1.0);

#line 76
        float _S107 = _S101.uv_0.x;

#line 76
        float _S108 = _S101.uv_0.y;

#line 76
        vec3 v_3 = _S107 * (s_primal_ctx_cos_1(vec3(5.0, 2.0, 3.0) + 2.0) * _S106 + dptranslation_0) + _S108 * (s_primal_ctx_cos_1(vec3(1.0, 3.0, 5.0) + 4.0) * _S106 + dptranslation_0) + (1.0 - _S107 - _S108) * (s_primal_ctx_cos_1(vec3(2.0, 1.0, 1.0) + 1.0) * _S106 + dptranslation_0);

#line 76
        _S105 = _S101;

#line 76
        _S105.position_1 = v_3;

#line 76
        _S103 = v_3;

#line 76
    }
    else
    {

#line 76
        _S105 = _S101;

#line 76
    }

#line 76
    dphit_0 = _S105;

#line 76
    return _S103;
}


#line 18 0
vec3 s_primal_ctx_cross_0(vec3 _S109, vec3 _S110)
{

#line 18
    return cross(_S109, _S110);
}


#line 18
float s_primal_ctx_length_0(vec3 _S111)
{

#line 18
    return length(_S111);
}


#line 18
mat3x3 s_bwd_primal_Inverse3x3_0(mat3x3 dpm_1)
{

#line 18
    float oneOverDet_0 = 1.0 / s_primal_ctx_determinant_0(dpm_1);

#line 18
    float _S112 = (dpm_1[1][1] * dpm_1[2][2] - dpm_1[1][2] * dpm_1[2][1]) * oneOverDet_0;

#line 18
    mat3x3 _S113 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 18
    _S113[0][0] = _S112;

#line 18
    _S113[0][1] = - (dpm_1[0][1] * dpm_1[2][2] - dpm_1[0][2] * dpm_1[2][1]) * oneOverDet_0;

#line 18
    _S113[0][2] = (dpm_1[0][1] * dpm_1[1][2] - dpm_1[0][2] * dpm_1[1][1]) * oneOverDet_0;

#line 18
    _S113[1][0] = - (dpm_1[1][0] * dpm_1[2][2] - dpm_1[1][2] * dpm_1[2][0]) * oneOverDet_0;

#line 18
    _S113[1][1] = (dpm_1[0][0] * dpm_1[2][2] - dpm_1[0][2] * dpm_1[2][0]) * oneOverDet_0;

#line 18
    _S113[1][2] = - (dpm_1[0][0] * dpm_1[1][2] - dpm_1[0][2] * dpm_1[1][0]) * oneOverDet_0;

#line 18
    _S113[2][0] = (dpm_1[1][0] * dpm_1[2][1] - dpm_1[1][1] * dpm_1[2][0]) * oneOverDet_0;

#line 18
    _S113[2][1] = - (dpm_1[0][0] * dpm_1[2][1] - dpm_1[0][1] * dpm_1[2][0]) * oneOverDet_0;

#line 18
    _S113[2][2] = (dpm_1[0][0] * dpm_1[1][1] - dpm_1[0][1] * dpm_1[1][0]) * oneOverDet_0;

#line 18
    return _S113;
}


#line 18
vec3 s_primal_ctx_mul_0(mat3x3 _S114, vec3 _S115)
{

#line 18
    return (((_S115) * (_S114)));
}


#line 18
vec3 s_bwd_primal_estimate_discontinuity_0(Ray_0  dprays_0[4], HitAD_0  dpsis_0[4], out s_bwd_prop_estimate_discontinuity_Intermediates_0 _s_diff_ctx_1)
{

#line 18
    mat3x3 _S116 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 18
    _s_diff_ctx_1._S67 = false;

#line 18
    _s_diff_ctx_1._S68 = false;

#line 18
    _s_diff_ctx_1.i_hit_0 = false;

#line 18
    _s_diff_ctx_1.i_hit_1 = false;

#line 18
    _s_diff_ctx_1._S69 = _S116;

#line 18
    bool _S117 = HasHit_0(dpsis_0[1]);

#line 18
    _s_diff_ctx_1._S67 = _S117;

#line 18
    uint _S118 = _S117 ? 1U : 0U;

#line 18
    vec3 _S119 = vec3(0.0);

#line 18
    bool _S120 = HasHit_0(dpsis_0[0]);

#line 18
    _s_diff_ctx_1._S68 = _S120;

#line 51
    bool _S121 = !_S120;

#line 51
    float _S122 = s_primal_ctx_dot_0(dpsis_0[0].normal_0, dprays_0[0].origin_0 - dpsis_0[0].position_1);

#line 51
    vec3 _S123 = dpsis_0[0].position_1 - dprays_0[0].origin_0;

#line 51
    float _S124 = s_primal_ctx_dot_0(dpsis_0[0].position_1, dpsis_0[0].normal_0);

#line 51
    bool diff_0 = dpsis_0[0].geometryID_0 != dpsis_0[2U].geometryID_0;

#line 51
    bool i_hit_2 = HasHit_0(dpsis_0[2U]);

#line 51
    _s_diff_ctx_1.i_hit_0 = i_hit_2;

#line 51
    uint _S125 = diff_0 ? (i_hit_2 ? 1U : 0U) : _S118;

#line 51
    vec3 _S126 = diff_0 ? dpsis_0[2U].position_1 : dpsis_0[1].position_1;

#line 51
    vec3 _S127 = diff_0 ? dpsis_0[2U].normal_0 : dpsis_0[1].normal_0;

#line 51
    bool diff_1 = dpsis_0[0].geometryID_0 != dpsis_0[3U].geometryID_0;

#line 51
    bool i_hit_3 = HasHit_0(dpsis_0[3U]);

#line 51
    _s_diff_ctx_1.i_hit_1 = i_hit_3;

#line 51
    vec3 _S128 = diff_1 ? dpsis_0[3U].position_1 : _S126;

#line 51
    vec3 _S129 = diff_1 ? dpsis_0[3U].normal_0 : _S127;

#line 51
    bool is_ray1_hit_0 = (diff_1 ? (i_hit_3 ? 1U : 0U) : _S125) > 0U;

#line 51
    vec3 res_1;

#line 51
    if(_S120 && !is_ray1_hit_0)
    {

#line 51
        res_1 = dpsis_0[0].position_1;

#line 51
    }
    else
    {

#line 51
        res_1 = _S119;

#line 51
    }

#line 51
    if(is_ray1_hit_0 && _S121)
    {

#line 51
        res_1 = _S128;

#line 51
    }

#line 51
    bool has_two_hits_0 = _S120 && is_ray1_hit_0;

#line 51
    bool plane_0_occludes_1_0 = has_two_hits_0 && s_primal_ctx_dot_0(dpsis_0[0].normal_0, _S128 - dpsis_0[0].position_1) * _S122 < 0.0;

#line 51
    bool plane_1_occludes_0_0 = has_two_hits_0 && s_primal_ctx_dot_0(_S129, dpsis_0[0].position_1 - _S128) * _S122 < 0.0;

#line 51
    bool simple_occluder_0_0 = plane_0_occludes_1_0 && !plane_1_occludes_0_0;

#line 51
    bool simple_occluder_1_0 = plane_1_occludes_0_0 && !plane_0_occludes_1_0;

#line 51
    bool plane_intersection_0 = has_two_hits_0 && !simple_occluder_1_0 && !simple_occluder_0_0;

#line 51
    if(simple_occluder_0_0)
    {

#line 51
        res_1 = dpsis_0[0].position_1;

#line 51
    }

#line 51
    if(simple_occluder_1_0)
    {

#line 51
        res_1 = _S128;

#line 51
    }

#line 51
    bool same_normals_0 = plane_intersection_0 && s_primal_ctx_abs_0(s_primal_ctx_dot_0(dpsis_0[0].normal_0, _S129)) > 0.99000000953674316406;

#line 80
    bool plane_intersection_1 = plane_intersection_0&&!same_normals_0;

#line 80
    if(same_normals_0)
    {

#line 80
        res_1 = dpsis_0[0].position_1;

#line 80
    }

#line 80
    vec3 _S130 = s_primal_ctx_cross_0(_S123, _S128 - dprays_0[0].origin_0);

#line 80
    float _S131 = s_primal_ctx_length_0(_S130);

#line 80
    if(plane_intersection_1)
    {

#line 80
        res_1 = dpsis_0[0].position_1;

#line 80
    }

#line 80
    bool invertible_0 = plane_intersection_1 && _S131 > 0.00100000004749745131;

#line 80
    vec3 B_0 = vec3(_S124, s_primal_ctx_dot_0(_S128, _S129), s_primal_ctx_dot_0(dprays_0[0].origin_0, _S130));

#line 80
    mat3x3 _S132 = s_bwd_primal_Inverse3x3_0(mat3x3(dpsis_0[0].normal_0, _S129, _S130));

#line 80
    _s_diff_ctx_1._S69 = _S132;

#line 80
    if(invertible_0)
    {

#line 80
        res_1 = s_primal_ctx_mul_0(_S132, B_0);

#line 80
    }

#line 80
    return res_1;
}


#line 80
vec3 s_primal_ctx_normalize_0(vec3 _S133)
{

#line 80
    return normalize(_S133);
}


#line 80
mat3x3 s_bwd_primal_skew_symmetric_matrix_0(vec3 dpv_0)
{

#line 80
    float _S134 = dpv_0.z;

#line 80
    float _S135 = dpv_0.y;

#line 80
    float _S136 = dpv_0.x;

#line 80
    return mat3x3(0.0, - _S134, _S135, _S134, 0.0, - _S136, - _S135, _S136, 0.0);
}


#line 80
mat3x3 s_bwd_primal_identity3x3_0()
{

#line 80
    return mat3x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
}


#line 80
float s_primal_ctx_rcp_0(float _S137)
{

#line 80
    return rcp_0(_S137);
}


#line 80
mat3x3 s_bwd_primal_rotation_from_axis_cosangle_0(vec3 dpaxis_0, float dpcosangle_0, out s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _s_diff_ctx_2)
{

#line 80
    _s_diff_ctx_2._S70 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 80
    float _S138 = dpaxis_0.x;

#line 80
    float _S139 = dpaxis_0.y;

#line 80
    float axy_0 = _S138 * _S139;

#line 80
    float _S140 = dpaxis_0.z;

#line 80
    float axz_0 = _S138 * _S140;

#line 80
    float ayz_0 = _S139 * _S140;

#line 80
    mat3x3 _S141 = s_bwd_primal_skew_symmetric_matrix_0(dpaxis_0);

#line 80
    mat3x3 uu_0 = mat3x3(_S138 * _S138, axy_0, axz_0, axy_0, _S139 * _S139, ayz_0, axz_0, ayz_0, _S140 * _S140);

#line 80
    mat3x3 _S142 = s_bwd_primal_identity3x3_0();

#line 80
    _s_diff_ctx_2._S70 = _S142;

#line 80
    return _S142 * dpcosangle_0 + _S141 + s_primal_ctx_rcp_0(1.0 + dpcosangle_0) * uu_0;
}


#line 80
float s_bwd_primal_vMFDistribution_Pdf_0(vMFDistribution_0 this_1, vec3 dpdirection_0)
{

#line 54 6
    float _S143;

#line 54
    if(!(this_1.k_0 == 0.0))
    {

#line 54
        _S143 = this_1.k_0 / (6.28318548202514648438 * (1.0 - s_primal_ctx_exp_0(-2.0 * this_1.k_0))) * s_primal_ctx_exp_0(this_1.k_0 * (s_primal_ctx_dot_0(dpdirection_0, this_1.u_0) - 1.0));

#line 54
    }
    else
    {

#line 54
        _S143 = 0.07957746833562850952;

#line 54
    }

#line 54
    return _S143;
}


#line 54
vec3 s_bwd_primal_reparameterizing_disconitnuous_integrands_0(Ray_0 prim_ray_0, RayDifferential_0 prim_raydiff_0, inout RandomSamplerState_0 RNG_0, vec3 dptranslation_1, out s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0 _s_diff_ctx_3)
{

#line 120 0
    vec3 _S144 = vec3(0.0);

#line 120
    vec2 _S145 = vec2(0.0);

#line 120
    HitAD_0 _S146 = { _S144, _S144, _S144, 0U, false, _S145, _S145 };

#line 120
    s_bwd_prop_loadPosition_Intermediates_0 _S147 = { _S146 };

#line 120
    mat3x3 _S148 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 120
    s_bwd_prop_estimate_discontinuity_Intermediates_0 _S149 = { false, false, false, false, _S148 };

#line 120
    s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _S150 = { _S148 };

#line 120
    vMFDistribution_0 _S151 = { _S144, 0.0 };

#line 120
    _s_diff_ctx_3._S71 = _S146;

#line 120
    _s_diff_ctx_3._S72 = _S147;

#line 120
    _s_diff_ctx_3._S73 = _S146;

#line 120
    _s_diff_ctx_3._S74 = _S146;

#line 120
    _s_diff_ctx_3._S75 = _S147;

#line 120
    _s_diff_ctx_3._S76 = _S146;

#line 120
    _s_diff_ctx_3._S77 = _S146;

#line 120
    _s_diff_ctx_3._S78 = _S147;

#line 120
    _s_diff_ctx_3._S79 = _S146;

#line 120
    _s_diff_ctx_3._S80 = _S146;

#line 120
    _s_diff_ctx_3._S81 = _S147;

#line 120
    _s_diff_ctx_3._S82 = _S146;

#line 120
    _s_diff_ctx_3._S83 = _S149;

#line 120
    _s_diff_ctx_3._S84 = _S150;

#line 120
    _s_diff_ctx_3.vmf_0 = _S151;

#line 120
    _s_diff_ctx_3._S85 = _S144;

#line 120
    _s_diff_ctx_3._S86 = _S144;

#line 120
    _s_diff_ctx_3._S87 = _S144;

#line 120
    _s_diff_ctx_3._S88 = _S144;

#line 120
    _s_diff_ctx_3._S89 = _S144;

#line 120
    _s_diff_ctx_3._S90 = _S148;

#line 120
    _s_diff_ctx_3._S91 = 0.0;

#line 120
    _s_diff_ctx_3._S92 = 0.0;

#line 120
    _s_diff_ctx_3.hit_0_0 = _S146;

#line 120
    _s_diff_ctx_3.hit_1_0 = _S146;

#line 120
    _s_diff_ctx_3._S71.position_1 = _S144;

#line 120
    _s_diff_ctx_3._S71.normal_0 = _S144;

#line 120
    _s_diff_ctx_3._S71.color_0 = _S144;

#line 120
    _s_diff_ctx_3._S71.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S71.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S71.uv_0 = _S145;

#line 120
    _s_diff_ctx_3._S71.bary_0 = _S145;

#line 120
    _s_diff_ctx_3._S73.position_1 = _S144;

#line 120
    _s_diff_ctx_3._S73.normal_0 = _S144;

#line 120
    _s_diff_ctx_3._S73.color_0 = _S144;

#line 120
    _s_diff_ctx_3._S73.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S73.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S73.uv_0 = _S145;

#line 120
    _s_diff_ctx_3._S73.bary_0 = _S145;

#line 120
    _s_diff_ctx_3._S74.position_1 = _S144;

#line 120
    _s_diff_ctx_3._S74.normal_0 = _S144;

#line 120
    _s_diff_ctx_3._S74.color_0 = _S144;

#line 120
    _s_diff_ctx_3._S74.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S74.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S74.uv_0 = _S145;

#line 120
    _s_diff_ctx_3._S74.bary_0 = _S145;

#line 120
    _s_diff_ctx_3._S76.position_1 = _S144;

#line 120
    _s_diff_ctx_3._S76.normal_0 = _S144;

#line 120
    _s_diff_ctx_3._S76.color_0 = _S144;

#line 120
    _s_diff_ctx_3._S76.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S76.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S76.uv_0 = _S145;

#line 120
    _s_diff_ctx_3._S76.bary_0 = _S145;

#line 120
    _s_diff_ctx_3._S77.position_1 = _S144;

#line 120
    _s_diff_ctx_3._S77.normal_0 = _S144;

#line 120
    _s_diff_ctx_3._S77.color_0 = _S144;

#line 120
    _s_diff_ctx_3._S77.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S77.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S77.uv_0 = _S145;

#line 120
    _s_diff_ctx_3._S77.bary_0 = _S145;

#line 120
    _s_diff_ctx_3._S79.position_1 = _S144;

#line 120
    _s_diff_ctx_3._S79.normal_0 = _S144;

#line 120
    _s_diff_ctx_3._S79.color_0 = _S144;

#line 120
    _s_diff_ctx_3._S79.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S79.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S79.uv_0 = _S145;

#line 120
    _s_diff_ctx_3._S79.bary_0 = _S145;

#line 120
    _s_diff_ctx_3._S80.position_1 = _S144;

#line 120
    _s_diff_ctx_3._S80.normal_0 = _S144;

#line 120
    _s_diff_ctx_3._S80.color_0 = _S144;

#line 120
    _s_diff_ctx_3._S80.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S80.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S80.uv_0 = _S145;

#line 120
    _s_diff_ctx_3._S80.bary_0 = _S145;

#line 120
    _s_diff_ctx_3._S82.position_1 = _S144;

#line 120
    _s_diff_ctx_3._S82.normal_0 = _S144;

#line 120
    _s_diff_ctx_3._S82.color_0 = _S144;

#line 120
    _s_diff_ctx_3._S82.geometryID_0 = 0U;

#line 120
    _s_diff_ctx_3._S82.hasHit_0 = false;

#line 120
    _s_diff_ctx_3._S82.uv_0 = _S145;

#line 120
    _s_diff_ctx_3._S82.bary_0 = _S145;

#line 120
    RandomSamplerState_0 _S152 = RNG_0;

#line 120
    vMFDistribution_0 vmf_1 = vMFDistribution_x24init_0(prim_ray_0.direction_0, 1.0 / (1.0 - s_primal_ctx_min_0(s_primal_ctx_cos_0(s_primal_ctx_acos_0(s_primal_ctx_min_0(s_primal_ctx_dot_0(prim_raydiff_0.dddx_0, prim_ray_0.direction_0), s_primal_ctx_dot_0(prim_raydiff_0.dddy_0, prim_ray_0.direction_0))) * 0.40000000596046447754), 0.99999988079071044922)));

#line 120
    _s_diff_ctx_3.vmf_0 = vmf_1;

#line 120
    RandomSamplerState_0 _S153 = _S152;

#line 120
    vec2 _S154 = GetNextRandomFloat2_0(_S153);

#line 120
    vec3 _S155 = vMFDistribution_DrawSample_0(vmf_1, _S154);

#line 120
    _s_diff_ctx_3._S85 = _S155;

#line 120
    Ray_0 _S156 = prim_ray_0;

#line 120
    _S156.direction_0 = _S155;

#line 120
    HitAD_0 hit_2 = ray_tracing_0(_S156, dptranslation_1);

#line 120
    HitAD_0 _S157 = hit_2;

#line 120
    vec3 _S158 = s_bwd_primal_loadPosition_0(_S157, dptranslation_1, _s_diff_ctx_3._S72);

#line 120
    _s_diff_ctx_3._S71 = _S157;

#line 120
    _s_diff_ctx_3._S73 = hit_2;

#line 120
    RandomSamplerState_0 _S159 = _S153;

#line 120
    vec2 _S160 = GetNextRandomFloat2_0(_S159);

#line 120
    vec3 _S161 = vMFDistribution_DrawSample_0(vmf_1, _S160);

#line 120
    _s_diff_ctx_3._S86 = _S161;

#line 120
    Ray_0 _S162 = prim_ray_0;

#line 120
    _S162.direction_0 = _S161;

#line 120
    HitAD_0 hit_3 = ray_tracing_0(_S162, dptranslation_1);

#line 120
    HitAD_0 _S163 = hit_3;

#line 120
    vec3 _S164 = s_bwd_primal_loadPosition_0(_S163, dptranslation_1, _s_diff_ctx_3._S75);

#line 120
    _s_diff_ctx_3._S74 = _S163;

#line 120
    _s_diff_ctx_3._S76 = hit_3;

#line 120
    RandomSamplerState_0 _S165 = _S159;

#line 120
    vec2 _S166 = GetNextRandomFloat2_0(_S165);

#line 120
    vec3 _S167 = vMFDistribution_DrawSample_0(vmf_1, _S166);

#line 120
    _s_diff_ctx_3._S87 = _S167;

#line 120
    Ray_0 _S168 = prim_ray_0;

#line 120
    _S168.direction_0 = _S167;

#line 120
    HitAD_0 hit_4 = ray_tracing_0(_S168, dptranslation_1);

#line 120
    HitAD_0 _S169 = hit_4;

#line 120
    vec3 _S170 = s_bwd_primal_loadPosition_0(_S169, dptranslation_1, _s_diff_ctx_3._S78);

#line 120
    _s_diff_ctx_3._S77 = _S169;

#line 120
    _s_diff_ctx_3._S79 = hit_4;

#line 120
    RandomSamplerState_0 _S171 = _S165;

#line 120
    vec2 _S172 = GetNextRandomFloat2_0(_S171);

#line 120
    vec3 _S173 = vMFDistribution_DrawSample_0(vmf_1, _S172);

#line 120
    _s_diff_ctx_3._S88 = _S173;

#line 120
    Ray_0 _S174 = prim_ray_0;

#line 120
    _S174.direction_0 = _S173;

#line 120
    HitAD_0 hit_5 = ray_tracing_0(_S174, dptranslation_1);

#line 120
    HitAD_0 _S175 = hit_5;

#line 120
    vec3 _S176 = s_bwd_primal_loadPosition_0(_S175, dptranslation_1, _s_diff_ctx_3._S81);

#line 120
    _s_diff_ctx_3._S80 = _S175;

#line 120
    _s_diff_ctx_3._S82 = hit_5;

#line 120
    HitAD_0  _S177[4] = { _S157, _S163, _S169, _S175 };

#line 120
    Ray_0  _S178[4] = { _S156, _S162, _S168, _S174 };

#line 120
    vec3 _S179 = s_bwd_primal_estimate_discontinuity_0(_S178, _S177, _s_diff_ctx_3._S83);

#line 120
    _s_diff_ctx_3._S89 = _S179;

#line 120
    vec3 _S180 = s_primal_ctx_normalize_0(_S179 - prim_ray_0.origin_0);

#line 120
    mat3x3 _S181 = s_bwd_primal_rotation_from_axis_cosangle_0(s_primal_ctx_cross_0(_S180, _S180), s_primal_ctx_dot_0(_S180, _S180), _s_diff_ctx_3._S84);

#line 120
    _s_diff_ctx_3._S90 = _S181;

#line 120
    vec3 _S182 = s_primal_ctx_mul_0(_S181, _S167);

#line 120
    vec3 _S183 = s_primal_ctx_mul_0(_S181, _S173);

#line 120
    Ray_0 _S184 = { prim_ray_0.origin_0, _S182 };

#line 120
    Ray_0 _S185 = { prim_ray_0.origin_0, _S183 };

#line 120
    float _S186 = s_bwd_primal_vMFDistribution_Pdf_0(vmf_1, _S182);

#line 120
    _s_diff_ctx_3._S91 = _S186;

#line 120
    float _S187 = s_bwd_primal_vMFDistribution_Pdf_0(vmf_1, _S183);

#line 120
    _s_diff_ctx_3._S92 = _S187;

#line 120
    vec3 throughput_0_0 = vec3(_S186) / _S186;

#line 120
    vec3 throughput_1_0 = vec3(_S187) / _S187;

#line 120
    HitAD_0 hit_0_1 = ray_tracing_0(_S184, dptranslation_1);

#line 120
    _s_diff_ctx_3.hit_0_0 = hit_0_1;

#line 120
    HitAD_0 hit_1_1 = ray_tracing_0(_S185, dptranslation_1);

#line 120
    _s_diff_ctx_3.hit_1_0 = hit_1_1;

#line 120
    vec3 radiance_0 = throughput_0_0 * hit_0_1.color_0 * 0.5 + throughput_1_0 * hit_1_1.color_0 * 0.5;

#line 120
    RNG_0 = _S171;

#line 120
    return radiance_0;
}


#line 120
float s_bwd_primal_forward_render_0(Ray_0 prim_ray_1, RayDifferential_0 prim_raydiff_1, inout RandomSamplerState_0 RNG_1, vec3 dptranslation_2, out s_bwd_prop_forward_render_Intermediates_0 _s_diff_ctx_4)
{

#line 224
    RandomSamplerState_0 _S188 = { 0U };

#line 224
    vec3 _S189 = vec3(0.0);

#line 224
    vec2 _S190 = vec2(0.0);

#line 224
    HitAD_0 _S191 = { _S189, _S189, _S189, 0U, false, _S190, _S190 };

#line 224
    s_bwd_prop_loadPosition_Intermediates_0 _S192 = { _S191 };

#line 224
    mat3x3 _S193 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 224
    s_bwd_prop_estimate_discontinuity_Intermediates_0 _S194 = { false, false, false, false, _S193 };

#line 224
    s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _S195 = { _S193 };

#line 224
    vMFDistribution_0 _S196 = { _S189, 0.0 };

#line 224
    s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0 _S197 = { _S191, _S192, _S191, _S191, _S192, _S191, _S191, _S192, _S191, _S191, _S192, _S191, _S194, _S195, _S196, _S189, _S189, _S189, _S189, _S189, _S193, 0.0, 0.0, _S191, _S191 };

#line 224
    _s_diff_ctx_4._S93 = _S188;

#line 224
    _s_diff_ctx_4._S94 = _S197;

#line 224
    _s_diff_ctx_4._S93.state_1 = 0U;

#line 224
    RandomSamplerState_0 _S198 = RNG_1;

#line 224
    vec3 _S199 = s_bwd_primal_reparameterizing_disconitnuous_integrands_0(prim_ray_1, prim_raydiff_1, _S198, dptranslation_2, _s_diff_ctx_4._S94);

#line 224
    _s_diff_ctx_4._S93 = _S198;

#line 224
    float _S200 = _S199.x;

#line 224
    RNG_1 = _S198;

#line 224
    return _S200;
}


#line 224
void s_bwd_prop_dot_0(inout DiffPair_float3_0 _S201, inout DiffPair_float3_0 _S202, float _S203)
{

#line 224
    _d_dot_0(_S201, _S202, _S203);

#line 224
    return;
}


#line 224
void s_bwd_prop_vMFDistribution_Pdf_0(vMFDistribution_0 this_2, inout DiffPair_float3_0 dpdirection_1, float _s_dOut_1)
{

#line 54 6
    DiffPair_float3_0 _S204 = dpdirection_1;

#line 54
    bool _S205 = !(this_2.k_0 == 0.0);

#line 54
    vec3 _S206 = vec3(0.0);

#line 54
    float _S207;

#line 54
    float _S208;

#line 54
    vec3 _S209;

#line 54
    if(_S205)
    {

#line 54
        float _S210 = this_2.k_0 * (s_primal_ctx_dot_0(_S204.primal_0, this_2.u_0) - 1.0);

#line 54
        _S207 = this_2.k_0 / (6.28318548202514648438 * (1.0 - s_primal_ctx_exp_0(-2.0 * this_2.k_0)));

#line 54
        _S208 = _S210;

#line 54
        _S209 = this_2.u_0;

#line 54
    }
    else
    {

#line 54
        _S207 = 0.0;

#line 54
        _S208 = 0.0;

#line 54
        _S209 = _S206;

#line 54
    }

#line 54
    if(_S205)
    {

#line 54
        float _S211 = _S207 * _s_dOut_1;

#line 54
        DiffPair_float_0 _S212;

#line 54
        _S212.primal_0 = _S208;

#line 54
        _S212.differential_0 = 0.0;

#line 54
        s_bwd_prop_exp_0(_S212, _S211);

#line 54
        float _S213 = this_2.k_0 * _S212.differential_0;

#line 54
        DiffPair_float3_0 _S214;

#line 54
        _S214.primal_0 = _S204.primal_0;

#line 54
        _S214.differential_0 = _S206;

#line 54
        DiffPair_float3_0 _S215;

#line 54
        _S215.primal_0 = _S209;

#line 54
        _S215.differential_0 = _S206;

#line 54
        s_bwd_prop_dot_0(_S214, _S215, _S213);

#line 54
        _S209 = _S214.differential_0;

#line 54
    }
    else
    {

#line 54
        _S209 = _S206;

#line 54
    }

#line 54
    dpdirection_1.primal_0 = dpdirection_1.primal_0;

#line 54
    dpdirection_1.differential_0 = _S209;

#line 54
    return;
}


#line 54
void s_bwd_prop_mul_0(inout DiffPair_float3x3_0 _S216, inout DiffPair_float3_0 _S217, vec3 _S218)
{

#line 54
    _d_mul_0(_S216, _S217, _S218);

#line 54
    return;
}


#line 54
void s_bwd_prop_rcp_0(inout DiffPair_float_0 _S219, float _S220)
{

#line 54
    _d_rcp_0(_S219, _S220);

#line 54
    return;
}


#line 54
void s_bwd_prop_skew_symmetric_matrix_0(inout DiffPair_float3_0 dpv_1, mat3x3 _s_dOut_2)
{

#line 54
    vec3 _S221 = vec3(_s_dOut_2[2][1] + - _s_dOut_2[1][2], _s_dOut_2[0][2] + - _s_dOut_2[2][0], _s_dOut_2[1][0] + - _s_dOut_2[0][1]);

#line 54
    dpv_1.primal_0 = dpv_1.primal_0;

#line 54
    dpv_1.differential_0 = _S221;

#line 54
    return;
}


#line 54
void s_bwd_prop_rotation_from_axis_cosangle_0(inout DiffPair_float3_0 dpaxis_1, inout DiffPair_float_0 dpcosangle_1, mat3x3 _s_dOut_3, s_bwd_prop_rotation_from_axis_cosangle_Intermediates_0 _s_diff_ctx_5)
{

#line 54
    float _S222 = 1.0 + dpcosangle_1.primal_0;

#line 54
    float _S223 = dpaxis_1.primal_0.x;

#line 54
    float _S224 = dpaxis_1.primal_0.y;

#line 54
    float axy_1 = _S223 * _S224;

#line 54
    float _S225 = dpaxis_1.primal_0.z;

#line 54
    float axz_1 = _S223 * _S225;

#line 54
    float ayz_1 = _S224 * _S225;

#line 54
    mat3x3 s_diff_uu_T_0 = matrixCompMult(mat3x3(s_primal_ctx_rcp_0(_S222), s_primal_ctx_rcp_0(_S222), s_primal_ctx_rcp_0(_S222), s_primal_ctx_rcp_0(_S222), s_primal_ctx_rcp_0(_S222), s_primal_ctx_rcp_0(_S222), s_primal_ctx_rcp_0(_S222), s_primal_ctx_rcp_0(_S222), s_primal_ctx_rcp_0(_S222)), _s_dOut_3);

#line 54
    mat3x3 _S226 = matrixCompMult(mat3x3(_S223 * _S223, axy_1, axz_1, axy_1, _S224 * _S224, ayz_1, axz_1, ayz_1, _S225 * _S225), _s_dOut_3);

#line 509 5
    float _S227 = _S226[0][0] + _S226[0][1] + _S226[0][2] + _S226[1][0] + _S226[1][1] + _S226[1][2] + _S226[2][0] + _S226[2][1] + _S226[2][2];

#line 509
    DiffPair_float_0 _S228;

#line 509
    _S228.primal_0 = _S222;

#line 509
    _S228.differential_0 = 0.0;

#line 509
    s_bwd_prop_rcp_0(_S228, _S227);

#line 509
    mat3x3 _S229 = matrixCompMult(_s_diff_ctx_5._S70, _s_dOut_3);

#line 509
    float _S230 = _S225 * s_diff_uu_T_0[2][2];

#line 509
    float _S231 = _S224 * s_diff_uu_T_0[1][1];

#line 509
    float _S232 = _S223 * s_diff_uu_T_0[0][0];

#line 1226
    vec3 _S233 = vec3(0.0);

#line 1226
    DiffPair_float3_0 _S234;

#line 1226
    _S234.primal_0 = dpaxis_1.primal_0;

#line 1226
    _S234.differential_0 = _S233;

#line 1226
    s_bwd_prop_skew_symmetric_matrix_0(_S234, _s_dOut_3);

#line 509
    float _S235 = s_diff_uu_T_0[1][2] + s_diff_uu_T_0[2][1];

#line 509
    float _S236 = s_diff_uu_T_0[0][2] + s_diff_uu_T_0[2][0];

#line 509
    float _S237 = _S230 + _S230 + _S224 * _S235 + _S223 * _S236;

#line 509
    float _S238 = s_diff_uu_T_0[0][1] + s_diff_uu_T_0[1][0];

#line 509
    float _S239 = _S231 + _S231 + _S225 * _S235 + _S223 * _S238;

#line 509
    float _S240 = _S232 + _S232 + _S225 * _S236 + _S224 * _S238;

#line 509
    float _S241 = _S228.differential_0 + _S229[0][0] + _S229[0][1] + _S229[0][2] + _S229[1][0] + _S229[1][1] + _S229[1][2] + _S229[2][0] + _S229[2][1] + _S229[2][2];

#line 509
    dpcosangle_1.primal_0 = dpcosangle_1.primal_0;

#line 509
    dpcosangle_1.differential_0 = _S241;

#line 1233
    vec3 _S242 = _S234.differential_0 + vec3(_S240, _S239, _S237);

#line 1233
    dpaxis_1.primal_0 = dpaxis_1.primal_0;

#line 1233
    dpaxis_1.differential_0 = _S242;

#line 1233
    return;
}


#line 1233
void s_bwd_prop_cross_0(inout DiffPair_float3_0 _S243, inout DiffPair_float3_0 _S244, vec3 _S245)
{

#line 1233
    _d_cross_0(_S243, _S244, _S245);

#line 1233
    return;
}


#line 1710 4
void s_bwd_prop_length_impl_0(inout DiffPair_float3_0 dpx_5, float _s_dOut_4)
{

#line 1710
    float _S246 = dpx_5.primal_0[0];

#line 1710
    float _S247 = dpx_5.primal_0[1];

#line 1710
    float _S248 = dpx_5.primal_0[2];

#line 1710
    DiffPair_float_0 _S249;

#line 1710
    _S249.primal_0 = _S246 * _S246 + _S247 * _S247 + _S248 * _S248;

#line 1710
    _S249.differential_0 = 0.0;

#line 1710
    s_bwd_prop_sqrt_0(_S249, _s_dOut_4);

#line 1710
    float _S250 = dpx_5.primal_0[2] * _S249.differential_0;

#line 509 5
    float _S251 = _S250 + _S250;

#line 509
    float _S252 = dpx_5.primal_0[1] * _S249.differential_0;

#line 509
    float _S253 = _S252 + _S252;

#line 509
    float _S254 = dpx_5.primal_0[0] * _S249.differential_0;

#line 509
    float _S255 = _S254 + _S254;

#line 509
    vec3 _S256 = vec3(0.0);

#line 509
    _S256[2] = _S251;

#line 509
    _S256[1] = _S253;

#line 509
    _S256[0] = _S255;

#line 509
    dpx_5.primal_0 = dpx_5.primal_0;

#line 509
    dpx_5.differential_0 = _S256;

#line 509
    return;
}


#line 509
void s_bwd_length_impl_0(inout DiffPair_float3_0 _S257, float _S258)
{

#line 509
    s_bwd_prop_length_impl_0(_S257, _S258);

#line 509
    return;
}


#line 509
void s_bwd_prop_length_0(inout DiffPair_float3_0 _S259, float _S260)
{

#line 1712 4
    s_bwd_length_impl_0(_S259, _S260);

#line 1712
    return;
}


#line 1712
void s_bwd_prop_normalize_impl_0(inout DiffPair_float3_0 dpx_6, vec3 _s_dOut_5)
{

#line 1712
    float _S261 = s_primal_ctx_length_0(dpx_6.primal_0);

#line 1712
    vec3 _S262 = dpx_6.primal_0 * _s_dOut_5;

#line 1712
    vec3 _S263 = vec3(1.0 / _S261) * _s_dOut_5;

#line 1712
    float _S264 = - ((_S262[0] + _S262[1] + _S262[2]) / (_S261 * _S261));

#line 1226 5
    vec3 _S265 = vec3(0.0);

#line 1226
    DiffPair_float3_0 _S266;

#line 1226
    _S266.primal_0 = dpx_6.primal_0;

#line 1226
    _S266.differential_0 = _S265;

#line 1226
    s_bwd_prop_length_0(_S266, _S264);

#line 1233
    vec3 _S267 = _S263 + _S266.differential_0;

#line 1233
    dpx_6.primal_0 = dpx_6.primal_0;

#line 1233
    dpx_6.differential_0 = _S267;

#line 1233
    return;
}


#line 1233
void s_bwd_normalize_impl_0(inout DiffPair_float3_0 _S268, vec3 _S269)
{

#line 1233
    s_bwd_prop_normalize_impl_0(_S268, _S269);

#line 1233
    return;
}


#line 1233
void s_bwd_prop_normalize_0(inout DiffPair_float3_0 _S270, vec3 _S271)
{

#line 1768 4
    s_bwd_normalize_impl_0(_S270, _S271);

#line 1768
    return;
}


#line 793
struct DiffPair_array_Ray_0
{
    Ray_0  primal_0[4];
    s_diff_Ray_0  differential_0[4];
};


#line 793
struct DiffPair_array_HitAD_0
{
    HitAD_0  primal_0[4];
    s_diff_HitAD_0  differential_0[4];
};


#line 804
void s_bwd_prop_Inverse3x3_0(inout DiffPair_float3x3_0 dpm_2, mat3x3 _s_dOut_6)
{

#line 804
    float _S272 = s_primal_ctx_determinant_0(dpm_2.primal_0);

#line 804
    float oneOverDet_1 = 1.0 / _S272;

#line 804
    float _S273 = _S272 * _S272;

#line 804
    float _S274 = dpm_2.primal_0[1][1] * dpm_2.primal_0[2][2] - dpm_2.primal_0[1][2] * dpm_2.primal_0[2][1];

#line 804
    float _S275 = (dpm_2.primal_0[0][0] * dpm_2.primal_0[1][1] - dpm_2.primal_0[0][1] * dpm_2.primal_0[1][0]) * _s_dOut_6[2][2];

#line 804
    float _S276 = oneOverDet_1 * _s_dOut_6[2][2];

#line 804
    float _S277 = - _S276;

#line 804
    float _S278 = dpm_2.primal_0[0][0] * _S276;

#line 804
    float _S279 = - (dpm_2.primal_0[0][0] * dpm_2.primal_0[2][1] - dpm_2.primal_0[0][1] * dpm_2.primal_0[2][0]) * _s_dOut_6[2][1];

#line 804
    float _S280 = - (oneOverDet_1 * _s_dOut_6[2][1]);

#line 804
    float _S281 = - _S280;

#line 804
    float _S282 = dpm_2.primal_0[0][0] * _S280;

#line 804
    float _S283 = (dpm_2.primal_0[1][0] * dpm_2.primal_0[2][1] - dpm_2.primal_0[1][1] * dpm_2.primal_0[2][0]) * _s_dOut_6[2][0];

#line 804
    float _S284 = oneOverDet_1 * _s_dOut_6[2][0];

#line 804
    float _S285 = - _S284;

#line 804
    float _S286 = dpm_2.primal_0[2][0] * _S285;

#line 804
    float _S287 = dpm_2.primal_0[1][0] * _S284;

#line 804
    float _S288 = - (dpm_2.primal_0[0][0] * dpm_2.primal_0[1][2] - dpm_2.primal_0[0][2] * dpm_2.primal_0[1][0]) * _s_dOut_6[1][2];

#line 804
    float _S289 = - (oneOverDet_1 * _s_dOut_6[1][2]);

#line 804
    float _S290 = - _S289;

#line 804
    float _S291 = dpm_2.primal_0[0][0] * _S289;

#line 804
    float _S292 = (dpm_2.primal_0[0][0] * dpm_2.primal_0[2][2] - dpm_2.primal_0[0][2] * dpm_2.primal_0[2][0]) * _s_dOut_6[1][1];

#line 804
    float _S293 = oneOverDet_1 * _s_dOut_6[1][1];

#line 804
    float _S294 = - _S293;

#line 804
    float _S295 = dpm_2.primal_0[0][0] * _S293;

#line 509 5
    float _S296 = dpm_2.primal_0[1][1] * _S276 + dpm_2.primal_0[2][1] * _S280 + dpm_2.primal_0[1][2] * _S289 + dpm_2.primal_0[2][2] * _S293;

#line 509
    float _S297 = - (dpm_2.primal_0[1][0] * dpm_2.primal_0[2][2] - dpm_2.primal_0[1][2] * dpm_2.primal_0[2][0]) * _s_dOut_6[1][0];

#line 509
    float _S298 = - (oneOverDet_1 * _s_dOut_6[1][0]);

#line 509
    float _S299 = - _S298;

#line 509
    float _S300 = dpm_2.primal_0[2][0] * _S299;

#line 509
    float _S301 = dpm_2.primal_0[0][1] * _S281 + dpm_2.primal_0[1][1] * _S285 + dpm_2.primal_0[0][2] * _S294 + dpm_2.primal_0[1][2] * _S299;

#line 509
    float _S302 = dpm_2.primal_0[1][0] * _S298;

#line 509
    float _S303 = dpm_2.primal_0[0][1] * _S277 + dpm_2.primal_0[2][1] * _S284 + dpm_2.primal_0[0][2] * _S290 + dpm_2.primal_0[2][2] * _S298;

#line 509
    float _S304 = (dpm_2.primal_0[0][1] * dpm_2.primal_0[1][2] - dpm_2.primal_0[0][2] * dpm_2.primal_0[1][1]) * _s_dOut_6[0][2];

#line 509
    float _S305 = oneOverDet_1 * _s_dOut_6[0][2];

#line 509
    float _S306 = - _S305;

#line 509
    float _S307 = dpm_2.primal_0[0][2] * _S306;

#line 509
    float _S308 = dpm_2.primal_0[0][1] * _S305;

#line 509
    float _S309 = - (dpm_2.primal_0[0][1] * dpm_2.primal_0[2][2] - dpm_2.primal_0[0][2] * dpm_2.primal_0[2][1]) * _s_dOut_6[0][1];

#line 509
    float _S310 = - (oneOverDet_1 * _s_dOut_6[0][1]);

#line 509
    float _S311 = - _S310;

#line 509
    float _S312 = dpm_2.primal_0[0][2] * _S311;

#line 509
    float _S313 = dpm_2.primal_0[1][0] * _S290 + dpm_2.primal_0[2][0] * _S294 + dpm_2.primal_0[1][1] * _S306 + dpm_2.primal_0[2][1] * _S311;

#line 509
    float _S314 = dpm_2.primal_0[0][1] * _S310;

#line 509
    float _S315 = dpm_2.primal_0[1][0] * _S277 + dpm_2.primal_0[2][0] * _S281 + dpm_2.primal_0[1][2] * _S305 + dpm_2.primal_0[2][2] * _S310;

#line 1226
    vec3 _S316 = vec3(0.0);

#line 1226
    vec3 _S317 = _S316;

#line 1226
    _S317[0] = _S296;

#line 1226
    _S317[2] = _S313;

#line 1226
    _S317[1] = _S315;

#line 1226
    float _S318 = _S274 * _s_dOut_6[0][0];

#line 1226
    float _S319 = oneOverDet_1 * _s_dOut_6[0][0];

#line 1226
    float _S320 = - _S319;

#line 509
    float _S321 = _S282 + _S287 + _S312 + dpm_2.primal_0[1][2] * _S320;

#line 509
    float _S322 = _S291 + _S300 + _S308 + dpm_2.primal_0[2][1] * _S320;

#line 509
    float _S323 = dpm_2.primal_0[2][2] * _S319;

#line 509
    float _S324 = _S295 + _S302 + _S314 + dpm_2.primal_0[1][1] * _S319;

#line 509
    vec3 _S325 = _S316;

#line 509
    _S325[0] = _S301;

#line 509
    _S325[1] = _S321;

#line 509
    _S325[2] = _S324;

#line 509
    float _S326 = _S278 + _S286 + _S307 + _S323;

#line 509
    vec3 _S327 = _S316;

#line 509
    _S327[0] = _S303;

#line 509
    _S327[2] = _S322;

#line 509
    _S327[1] = _S326;

#line 509
    float _S328 = - ((_S275 + _S279 + _S283 + _S288 + _S292 + _S297 + _S304 + _S309 + _S318) / _S273);

#line 1254
    mat3x3 _S329 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 1254
    DiffPair_float3x3_0 _S330;

#line 1254
    _S330.primal_0 = dpm_2.primal_0;

#line 1254
    _S330.differential_0 = _S329;

#line 1254
    s_bwd_prop_determinant_0(_S330, _S328);

#line 1254
    mat3x3 _S331 = _S329;

#line 1254
    _S331[0] = _S317;

#line 1254
    _S331[2] = _S325;

#line 1254
    _S331[1] = _S327;

#line 1261
    mat3x3 _S332 = _S330.differential_0 + _S331;

#line 1261
    dpm_2.primal_0 = dpm_2.primal_0;

#line 1261
    dpm_2.differential_0 = _S332;

#line 1261
    return;
}


#line 1261
void s_bwd_prop_estimate_discontinuity_0(inout DiffPair_array_Ray_0 dprays_1, inout DiffPair_array_HitAD_0 dpsis_1, vec3 _s_dOut_7, s_bwd_prop_estimate_discontinuity_Intermediates_0 _s_diff_ctx_6)
{

#line 1261
    DiffPair_array_Ray_0 _S333 = dprays_1;

#line 1261
    DiffPair_array_HitAD_0 _S334 = dpsis_1;

#line 1261
    vec3 _S335 = dprays_1.primal_0[0].origin_0 - dpsis_1.primal_0[0].position_1;

#line 1261
    vec3 _S336 = dpsis_1.primal_0[0].position_1 - dprays_1.primal_0[0].origin_0;

#line 1261
    bool diff_2 = dpsis_1.primal_0[0].geometryID_0 != dpsis_1.primal_0[2U].geometryID_0;

#line 1261
    bool diff_3 = dpsis_1.primal_0[0].geometryID_0 != dpsis_1.primal_0[3U].geometryID_0;

#line 1261
    float _S337 = s_primal_ctx_dot_0(dpsis_1.primal_0[0].normal_0, _S335);

#line 1261
    vec3 _S338 = diff_3 ? dpsis_1.primal_0[3U].position_1 : diff_2 ? dpsis_1.primal_0[2U].position_1 : dpsis_1.primal_0[1].position_1;

#line 1261
    vec3 _S339 = diff_3 ? dpsis_1.primal_0[3U].normal_0 : diff_2 ? dpsis_1.primal_0[2U].normal_0 : dpsis_1.primal_0[1].normal_0;

#line 1261
    bool is_ray1_hit_1 = (diff_3 ? (_s_diff_ctx_6.i_hit_1 ? 1U : 0U) : diff_2 ? (_s_diff_ctx_6.i_hit_0 ? 1U : 0U) : _s_diff_ctx_6._S67 ? 1U : 0U) > 0U;

#line 1261
    bool only_hit_0_0 = _s_diff_ctx_6._S68 && !is_ray1_hit_1;

#line 1261
    bool only_hit_1_0 = is_ray1_hit_1 && !_s_diff_ctx_6._S68;

#line 1261
    bool has_two_hits_1 = _s_diff_ctx_6._S68 && is_ray1_hit_1;

#line 1261
    vec3 _S340 = _S338 - dpsis_1.primal_0[0].position_1;

#line 1261
    vec3 _S341 = dpsis_1.primal_0[0].position_1 - _S338;

#line 1261
    bool plane_0_occludes_1_1 = has_two_hits_1 && s_primal_ctx_dot_0(dpsis_1.primal_0[0].normal_0, _S340) * _S337 < 0.0;

#line 1261
    bool plane_1_occludes_0_1 = has_two_hits_1 && s_primal_ctx_dot_0(_S339, _S341) * _S337 < 0.0;

#line 1261
    bool simple_occluder_0_1 = plane_0_occludes_1_1 && !plane_1_occludes_0_1;

#line 1261
    bool simple_occluder_1_1 = plane_1_occludes_0_1 && !plane_0_occludes_1_1;

#line 1261
    bool plane_intersection_2 = has_two_hits_1 && !simple_occluder_1_1 && !simple_occluder_0_1;

#line 1261
    bool same_normals_1 = plane_intersection_2 && s_primal_ctx_abs_0(s_primal_ctx_dot_0(dpsis_1.primal_0[0].normal_0, _S339)) > 0.99000000953674316406;

#line 80 0
    bool plane_intersection_3 = plane_intersection_2&&!same_normals_1;

#line 80
    vec3 _S342 = _S338 - dprays_1.primal_0[0].origin_0;

#line 80
    vec3 _S343 = s_primal_ctx_cross_0(_S336, _S342);

#line 80
    mat3x3 A_0 = mat3x3(dpsis_1.primal_0[0].normal_0, _S339, _S343);

#line 80
    vec3 B_1 = vec3(s_primal_ctx_dot_0(dpsis_1.primal_0[0].position_1, dpsis_1.primal_0[0].normal_0), s_primal_ctx_dot_0(_S338, _S339), s_primal_ctx_dot_0(dprays_1.primal_0[0].origin_0, _S343));

#line 1226 5
    vec3 _S344 = vec3(0.0);

#line 1254
    mat3x3 _S345 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 1254
    mat3x3 _S346;

#line 1254
    vec3 _S347;

#line 1254
    vec3 _S348;

#line 1254
    if(plane_intersection_3 && s_primal_ctx_length_0(_S343) > 0.00100000004749745131)
    {

#line 1254
        DiffPair_float3x3_0 _S349;

#line 1254
        _S349.primal_0 = _s_diff_ctx_6._S69;

#line 1254
        _S349.differential_0 = _S345;

#line 1254
        DiffPair_float3_0 _S350;

#line 1254
        _S350.primal_0 = B_1;

#line 1254
        _S350.differential_0 = _S344;

#line 1254
        s_bwd_prop_mul_0(_S349, _S350, _s_dOut_7);

#line 1254
        _S346 = _S349.differential_0;

#line 1254
        _S347 = _S350.differential_0;

#line 1254
        _S348 = _S344;

#line 1254
    }
    else
    {

#line 1254
        _S346 = _S345;

#line 1254
        _S347 = _S344;

#line 1254
        _S348 = _s_dOut_7;

#line 1254
    }

#line 1254
    DiffPair_float3x3_0 _S351;

#line 1254
    _S351.primal_0 = A_0;

#line 1254
    _S351.differential_0 = _S345;

#line 1254
    s_bwd_prop_Inverse3x3_0(_S351, _S346);

#line 1254
    vec3 _S352 = _S347;

#line 1254
    DiffPair_float3_0 _S353;

#line 1254
    _S353.primal_0 = _S333.primal_0[0].origin_0;

#line 1254
    _S353.differential_0 = _S344;

#line 1254
    DiffPair_float3_0 _S354;

#line 1254
    _S354.primal_0 = _S343;

#line 1254
    _S354.differential_0 = _S344;

#line 1254
    s_bwd_prop_dot_0(_S353, _S354, _S347[2]);

#line 1254
    DiffPair_float3_0 _S355 = _S353;

#line 1254
    DiffPair_float3_0 _S356;

#line 1254
    _S356.primal_0 = _S338;

#line 1254
    _S356.differential_0 = _S344;

#line 1254
    DiffPair_float3_0 _S357;

#line 1254
    _S357.primal_0 = _S339;

#line 1254
    _S357.differential_0 = _S344;

#line 1254
    s_bwd_prop_dot_0(_S356, _S357, _S347[1]);

#line 1254
    DiffPair_float3_0 _S358 = _S356;

#line 1233
    vec3 _S359 = _S354.differential_0 + _S351.differential_0[2];

#line 1233
    if(plane_intersection_3)
    {

#line 1233
        _S347 = _S344;

#line 1233
    }
    else
    {

#line 1233
        _S347 = _S348;

#line 1233
        _S348 = _S344;

#line 1233
    }

#line 1233
    DiffPair_float3_0 _S360;

#line 1233
    _S360.primal_0 = _S343;

#line 1233
    _S360.differential_0 = _S344;

#line 1233
    s_bwd_prop_length_0(_S360, 0.0);

#line 1233
    vec3 _S361 = _S360.differential_0 + _S359;

#line 1233
    DiffPair_float3_0 _S362;

#line 1233
    _S362.primal_0 = _S336;

#line 1233
    _S362.differential_0 = _S344;

#line 1233
    DiffPair_float3_0 _S363;

#line 1233
    _S363.primal_0 = _S342;

#line 1233
    _S363.differential_0 = _S344;

#line 1233
    s_bwd_prop_cross_0(_S362, _S363, _S361);

#line 1233
    DiffPair_float3_0 _S364 = _S362;

#line 1233
    vec3 _S365 = _S363.differential_0 + _S358.differential_0;

#line 1233
    vec3 _S366 = - _S363.differential_0 + _S355.differential_0;

#line 1233
    if(same_normals_1)
    {

#line 1233
        vec3 _S367 = _S347 + _S348;

#line 1233
        _S347 = _S344;

#line 1233
        _S348 = _S367;

#line 1233
    }

#line 1233
    vec3 _S368;

#line 1233
    if(simple_occluder_1_1)
    {

#line 1233
        vec3 _S369 = _S347 + _S365;

#line 1233
        _S347 = _S344;

#line 1233
        _S368 = _S369;

#line 1233
    }
    else
    {

#line 1233
        _S368 = _S365;

#line 1233
    }

#line 1233
    if(simple_occluder_0_1)
    {

#line 1233
        vec3 _S370 = _S347 + _S348;

#line 1233
        _S347 = _S344;

#line 1233
        _S348 = _S370;

#line 1233
    }

#line 1233
    DiffPair_float3_0 _S371;

#line 1233
    _S371.primal_0 = _S339;

#line 1233
    _S371.differential_0 = _S344;

#line 1233
    DiffPair_float3_0 _S372;

#line 1233
    _S372.primal_0 = _S341;

#line 1233
    _S372.differential_0 = _S344;

#line 1233
    s_bwd_prop_dot_0(_S371, _S372, 0.0);

#line 1233
    vec3 _S373 = - _S372.differential_0;

#line 1233
    DiffPair_float3_0 _S374;

#line 1233
    _S374.primal_0 = _S334.primal_0[0].normal_0;

#line 1233
    _S374.differential_0 = _S344;

#line 1233
    DiffPair_float3_0 _S375;

#line 1233
    _S375.primal_0 = _S340;

#line 1233
    _S375.differential_0 = _S344;

#line 1233
    s_bwd_prop_dot_0(_S374, _S375, 0.0);

#line 1233
    vec3 _S376 = _S372.differential_0 + - _S375.differential_0 + _S348;

#line 1233
    vec3 _S377 = _S373 + _S375.differential_0 + _S368;

#line 1233
    if(only_hit_1_0)
    {

#line 1233
        vec3 _S378 = _S347 + _S377;

#line 1233
        _S347 = _S344;

#line 1233
        _S348 = _S378;

#line 1233
    }
    else
    {

#line 1233
        _S348 = _S377;

#line 1233
    }

#line 1233
    if(only_hit_0_0)
    {

#line 1233
        _S347 = _S347 + _S376;

#line 1233
    }
    else
    {

#line 1233
        _S347 = _S376;

#line 1233
    }

#line 1233
    vec3 _S379 = diff_3 ? _S348 : _S344;

#line 1233
    vec3 _S380 = diff_3 ? _S344 : _S348;

#line 1233
    s_diff_HitAD_0 _S381 = HitAD_x24_syn_dzero_0();

#line 1233
    s_diff_HitAD_0 _S382 = _S381;

#line 1233
    _S382.position_0 = _S379;

#line 1233
    vec3 _S383 = diff_2 ? _S380 : _S344;

#line 1233
    vec3 _S384 = diff_2 ? _S344 : _S380;

#line 1233
    s_diff_HitAD_0 _S385 = _S381;

#line 1233
    _S385.position_0 = _S383;

#line 1233
    DiffPair_float3_0 _S386;

#line 1233
    _S386.primal_0 = _S334.primal_0[0].position_1;

#line 1233
    _S386.differential_0 = _S344;

#line 1233
    DiffPair_float3_0 _S387;

#line 1233
    _S387.primal_0 = _S334.primal_0[0].normal_0;

#line 1233
    _S387.differential_0 = _S344;

#line 1233
    s_bwd_prop_dot_0(_S386, _S387, _S352[0]);

#line 1233
    vec3 _S388 = - _S364.differential_0;

#line 1233
    DiffPair_float3_0 _S389;

#line 1233
    _S389.primal_0 = _S334.primal_0[0].normal_0;

#line 1233
    _S389.differential_0 = _S344;

#line 1233
    DiffPair_float3_0 _S390;

#line 1233
    _S390.primal_0 = _S335;

#line 1233
    _S390.differential_0 = _S344;

#line 1233
    s_bwd_prop_dot_0(_S389, _S390, 0.0);

#line 1233
    vec3 _S391 = - _S390.differential_0;

#line 1233
    vec3 _S392 = _S388 + _S390.differential_0 + _S366;

#line 1233
    s_diff_Ray_0 _S393 = Ray_x24_syn_dzero_0();

#line 1233
    s_diff_Ray_0 _S394 = _S393;

#line 1233
    _S394.origin_1 = _S392;

#line 1233
    s_diff_HitAD_0 _S395 = _S381;

#line 1233
    _S395.position_0 = _S384;

#line 1233
    vec3 _S396 = _S386.differential_0 + _S364.differential_0 + _S391 + _S347;

#line 1233
    s_diff_HitAD_0 _S397 = _S381;

#line 1233
    _S397.position_0 = _S396;

#line 1233
    s_diff_HitAD_0  _S398[4];

#line 1233
    _S398[0] = _S381;

#line 1233
    _S398[1] = _S381;

#line 1233
    _S398[2] = _S381;

#line 1233
    _S398[3] = _S381;

#line 1233
    _S398[3U] = _S382;

#line 1233
    _S398[2U] = _S385;

#line 1233
    _S398[1] = _S395;

#line 1233
    _S398[0] = _S397;

#line 1233
    dpsis_1.primal_0 = dpsis_1.primal_0;

#line 1233
    dpsis_1.differential_0 = _S398;

#line 1233
    s_diff_Ray_0  _S399[4];

#line 1233
    _S399[0] = _S393;

#line 1233
    _S399[1] = _S393;

#line 1233
    _S399[2] = _S393;

#line 1233
    _S399[3] = _S393;

#line 1233
    _S399[0] = _S394;

#line 1233
    dprays_1.primal_0 = dprays_1.primal_0;

#line 1233
    dprays_1.differential_0 = _S399;

#line 1233
    return;
}


#line 1233
struct DiffPair_HitAD_0
{
    HitAD_0 primal_0;
    s_diff_HitAD_0 differential_0;
};


#line 1233
void s_bwd_prop_loadPosition_0(inout DiffPair_HitAD_0 dphit_1, inout DiffPair_float3_0 dptranslation_3, vec3 _s_dOut_8, s_bwd_prop_loadPosition_Intermediates_0 _s_diff_ctx_7)
{

#line 1233
    DiffPair_HitAD_0 _S400 = dphit_1;

#line 1233
    s_diff_HitAD_0 dphit_2 = HitAD_x24_syn_dzero_0();

#line 1233
    bool _S401 = !!_s_diff_ctx_7._S66.hasHit_0;

#line 1233
    vec3 _S402 = vec3(0.0);

#line 1233
    vec3 _S403;

#line 1233
    vec3 _S404;

#line 1233
    vec3 _S405;

#line 1233
    if(_S401)
    {

#line 1233
        float _S406 = _s_diff_ctx_7._S66.uv_0.x;

#line 1233
        vec3 _S407 = vec3(_S406);

#line 1233
        float _S408 = _s_diff_ctx_7._S66.uv_0.y;

#line 1233
        vec3 _S409 = vec3(_S408);

#line 1233
        _S403 = vec3(1.0 - _S406 - _S408);

#line 1233
        _S404 = _S409;

#line 1233
        _S405 = _S407;

#line 1233
    }
    else
    {

#line 1233
        _S403 = _S402;

#line 1233
        _S404 = _S402;

#line 1233
        _S405 = _S402;

#line 1233
    }

#line 1233
    s_diff_HitAD_0 _S410 = HitAD_x24_syn_dadd_0(HitAD_x24_syn_dadd_0(_S400.differential_0, dphit_2), dphit_2);

#line 1233
    s_diff_HitAD_0 dphit_3;

#line 1233
    if(_S401)
    {

#line 1233
        vec3 _S411 = _s_dOut_8 + _S410.position_0;

#line 1233
        vec3 _S412 = _S404 * _S411 + _S405 * _S411 + _S403 * _S411;

#line 1233
        dphit_3.position_0 = _S402;

#line 1233
        _S403 = _S412;

#line 1233
    }
    else
    {

#line 1233
        dphit_3 = HitAD_x24_syn_dadd_0(_S410, dphit_2);

#line 1233
        _S403 = _S402;

#line 1233
    }

#line 1233
    s_diff_HitAD_0 _S413 = HitAD_x24_syn_dadd_0(dphit_2, dphit_3);

#line 1233
    dptranslation_3.primal_0 = dptranslation_3.primal_0;

#line 1233
    dptranslation_3.differential_0 = _S403;

#line 1233
    dphit_1.primal_0 = _S400.primal_0;

#line 1233
    dphit_1.differential_0 = _S413;

#line 1233
    return;
}


#line 1233
void s_bwd_prop_reparameterizing_disconitnuous_integrands_0(Ray_0 prim_ray_2, RayDifferential_0 prim_raydiff_2, RandomSamplerState_0 RNG_2, inout DiffPair_float3_0 dptranslation_4, vec3 s_diff_radiance_T_0, s_bwd_prop_reparameterizing_disconitnuous_integrands_Intermediates_0 _s_diff_ctx_8)
{

#line 120 0
    vec3 _S414 = vec3(0.0);

#line 120
    Ray_0 _S415 = prim_ray_2;

#line 120
    _S415.direction_0 = _s_diff_ctx_8._S85;

#line 120
    Ray_0 _S416 = prim_ray_2;

#line 120
    _S416.direction_0 = _s_diff_ctx_8._S86;

#line 120
    Ray_0 _S417 = prim_ray_2;

#line 120
    _S417.direction_0 = _s_diff_ctx_8._S87;

#line 120
    Ray_0 _S418 = prim_ray_2;

#line 120
    _S418.direction_0 = _s_diff_ctx_8._S88;

#line 120
    vec3 _S419 = _s_diff_ctx_8._S89 - prim_ray_2.origin_0;

#line 120
    HitAD_0  _S420[4] = { _s_diff_ctx_8._S71, _s_diff_ctx_8._S74, _s_diff_ctx_8._S77, _s_diff_ctx_8._S80 };

#line 120
    Ray_0  _S421[4] = { _S415, _S416, _S417, _S418 };

#line 120
    vec3 _S422 = s_primal_ctx_normalize_0(_S419);

#line 120
    vec3 _S423 = s_primal_ctx_cross_0(_S422, _S422);

#line 120
    float _S424 = s_primal_ctx_dot_0(_S422, _S422);

#line 120
    vec3 _S425 = s_primal_ctx_mul_0(_s_diff_ctx_8._S90, _s_diff_ctx_8._S87);

#line 120
    vec3 _S426 = s_primal_ctx_mul_0(_s_diff_ctx_8._S90, _s_diff_ctx_8._S88);

#line 120
    vec3 _S427 = vec3(_s_diff_ctx_8._S91);

#line 120
    vec3 _S428 = vec3(_s_diff_ctx_8._S92);

#line 120
    vec3 emission_0_0 = _S427 / _s_diff_ctx_8._S91 * _s_diff_ctx_8.hit_0_0.color_0;

#line 120
    vec3 emission_1_0 = _S428 / _s_diff_ctx_8._S92 * _s_diff_ctx_8.hit_1_0.color_0;

#line 120
    float weights_0_0 = _s_diff_ctx_8._S91 / _s_diff_ctx_8._S91;

#line 120
    float weights_1_0 = _s_diff_ctx_8._S92 / _s_diff_ctx_8._S92;

#line 120
    bool _S429 = s_primal_ctx_abs_0(weights_0_0) < 0.00000999999974737875;

#line 120
    bool _S430 = s_primal_ctx_abs_0(weights_1_0) < 0.00000999999974737875;

#line 120
    s_diff_HitAD_0 _S431 = HitAD_x24_syn_dzero_0();

#line 120
    vec3 _S432 = vec3(0.5) * s_diff_radiance_T_0;

#line 120
    vec3 _S433 = emission_0_0 / (_S429 ? 1.0 : weights_0_0) * - _S432;

#line 120
    vec3 _S434 = - _S414;

#line 120
    vec3 _S435 = emission_0_0 * _S434;

#line 120
    vec3 _S436 = vec3(0.5) * s_diff_radiance_T_0;

#line 120
    vec3 _S437 = emission_1_0 / (_S430 ? 1.0 : weights_1_0) * - _S436;

#line 509 5
    float _S438 = _S437[0] + _S437[1] + _S437[2];

#line 509
    vec3 _S439 = emission_1_0 * _S434;

#line 509
    float _S440 = _S430 ? 0.0 : _S433[0] + _S433[1] + _S433[2] + _S439[0] + _S439[1] + _S439[2];

#line 509
    DiffPair_float_0 _S441;

#line 509
    _S441.primal_0 = weights_1_0;

#line 509
    _S441.differential_0 = 0.0;

#line 509
    s_bwd_prop_abs_0(_S441, 0.0);

#line 509
    float _S442 = _S429 ? 0.0 : _S438 + _S435[0] + _S435[1] + _S435[2];

#line 509
    DiffPair_float_0 _S443;

#line 509
    _S443.primal_0 = weights_0_0;

#line 509
    _S443.differential_0 = 0.0;

#line 509
    s_bwd_prop_abs_0(_S443, 0.0);

#line 509
    float _S444 = (_S442 + _S443.differential_0) / _s_diff_ctx_8._S91;

#line 509
    vec3 _S445 = _s_diff_ctx_8.hit_1_0.color_0 * _S432 / _S428;

#line 509
    vec3 _S446 = _s_diff_ctx_8.hit_0_0.color_0 * _S436 / _S427;

#line 509
    float _S447 = (_S440 + _S441.differential_0) / _s_diff_ctx_8._S92 + _S445[0] + _S445[1] + _S445[2];

#line 509
    DiffPair_float3_0 _S448;

#line 509
    _S448.primal_0 = _S426;

#line 509
    _S448.differential_0 = _S414;

#line 509
    s_bwd_prop_vMFDistribution_Pdf_0(_s_diff_ctx_8.vmf_0, _S448, _S447);

#line 509
    float _S449 = _S444 + _S446[0] + _S446[1] + _S446[2];

#line 509
    DiffPair_float3_0 _S450;

#line 509
    _S450.primal_0 = _S425;

#line 509
    _S450.differential_0 = _S414;

#line 509
    s_bwd_prop_vMFDistribution_Pdf_0(_s_diff_ctx_8.vmf_0, _S450, _S449);

#line 509
    s_diff_Ray_0 _S451 = Ray_x24_syn_dzero_0();

#line 1233
    vec3 _S452 = _S448.differential_0 + _S451.direction_1;

#line 1254
    mat3x3 _S453 = mat3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

#line 1254
    DiffPair_float3x3_0 _S454;

#line 1254
    _S454.primal_0 = _s_diff_ctx_8._S90;

#line 1254
    _S454.differential_0 = _S453;

#line 1254
    DiffPair_float3_0 _S455;

#line 1254
    _S455.primal_0 = _s_diff_ctx_8._S88;

#line 1254
    _S455.differential_0 = _S414;

#line 1254
    s_bwd_prop_mul_0(_S454, _S455, _S452);

#line 1233
    vec3 _S456 = _S450.differential_0 + _S451.direction_1;

#line 1233
    DiffPair_float3x3_0 _S457;

#line 1233
    _S457.primal_0 = _s_diff_ctx_8._S90;

#line 1233
    _S457.differential_0 = _S453;

#line 1233
    DiffPair_float3_0 _S458;

#line 1233
    _S458.primal_0 = _s_diff_ctx_8._S87;

#line 1233
    _S458.differential_0 = _S414;

#line 1233
    s_bwd_prop_mul_0(_S457, _S458, _S456);

#line 1261
    mat3x3 _S459 = _S454.differential_0 + _S457.differential_0;

#line 1261
    DiffPair_float3_0 _S460;

#line 1261
    _S460.primal_0 = _S423;

#line 1261
    _S460.differential_0 = _S414;

#line 1261
    DiffPair_float_0 _S461;

#line 1261
    _S461.primal_0 = _S424;

#line 1261
    _S461.differential_0 = 0.0;

#line 1261
    s_bwd_prop_rotation_from_axis_cosangle_0(_S460, _S461, _S459, _s_diff_ctx_8._S84);

#line 1261
    DiffPair_float3_0 _S462;

#line 1261
    _S462.primal_0 = _S422;

#line 1261
    _S462.differential_0 = _S414;

#line 1261
    DiffPair_float3_0 _S463;

#line 1261
    _S463.primal_0 = _S422;

#line 1261
    _S463.differential_0 = _S414;

#line 1261
    s_bwd_prop_dot_0(_S462, _S463, _S461.differential_0);

#line 1261
    DiffPair_float3_0 _S464;

#line 1261
    _S464.primal_0 = _S422;

#line 1261
    _S464.differential_0 = _S414;

#line 1261
    DiffPair_float3_0 _S465;

#line 1261
    _S465.primal_0 = _S422;

#line 1261
    _S465.differential_0 = _S414;

#line 1261
    s_bwd_prop_cross_0(_S464, _S465, _S460.differential_0);

#line 1233
    vec3 _S466 = _S462.differential_0 + _S465.differential_0;

#line 1233
    DiffPair_float3_0 _S467;

#line 1233
    _S467.primal_0 = _S419;

#line 1233
    _S467.differential_0 = _S414;

#line 1233
    s_bwd_prop_normalize_0(_S467, _S466);

#line 1233
    s_diff_Ray_0  _S468[4] = { _S451, _S451, _S451, _S451 };

#line 1233
    DiffPair_array_Ray_0 _S469;

#line 1233
    _S469.primal_0 = _S421;

#line 1233
    _S469.differential_0 = _S468;

#line 1233
    s_diff_HitAD_0  _S470[4] = { _S431, _S431, _S431, _S431 };

#line 1233
    DiffPair_array_HitAD_0 _S471;

#line 1233
    _S471.primal_0 = _S420;

#line 1233
    _S471.differential_0 = _S470;

#line 1233
    s_bwd_prop_estimate_discontinuity_0(_S469, _S471, _S467.differential_0, _s_diff_ctx_8._S83);

#line 1233
    s_diff_HitAD_0 _S472 = HitAD_x24_syn_dadd_0(_S471.differential_0[3], _S431);

#line 1233
    DiffPair_HitAD_0 _S473;

#line 1233
    _S473.primal_0 = _s_diff_ctx_8._S82;

#line 1233
    _S473.differential_0 = _S472;

#line 1233
    DiffPair_float3_0 _S474;

#line 1233
    _S474.primal_0 = dptranslation_4.primal_0;

#line 1233
    _S474.differential_0 = _S414;

#line 1233
    s_bwd_prop_loadPosition_0(_S473, _S474, _S414, _s_diff_ctx_8._S81);

#line 1233
    s_diff_HitAD_0 _S475 = HitAD_x24_syn_dadd_0(_S471.differential_0[2], _S431);

#line 1233
    DiffPair_HitAD_0 _S476;

#line 1233
    _S476.primal_0 = _s_diff_ctx_8._S79;

#line 1233
    _S476.differential_0 = _S475;

#line 1233
    DiffPair_float3_0 _S477;

#line 1233
    _S477.primal_0 = dptranslation_4.primal_0;

#line 1233
    _S477.differential_0 = _S414;

#line 1233
    s_bwd_prop_loadPosition_0(_S476, _S477, _S414, _s_diff_ctx_8._S78);

#line 1233
    s_diff_HitAD_0 _S478 = HitAD_x24_syn_dadd_0(_S471.differential_0[1], _S431);

#line 1233
    DiffPair_HitAD_0 _S479;

#line 1233
    _S479.primal_0 = _s_diff_ctx_8._S76;

#line 1233
    _S479.differential_0 = _S478;

#line 1233
    DiffPair_float3_0 _S480;

#line 1233
    _S480.primal_0 = dptranslation_4.primal_0;

#line 1233
    _S480.differential_0 = _S414;

#line 1233
    s_bwd_prop_loadPosition_0(_S479, _S480, _S414, _s_diff_ctx_8._S75);

#line 1233
    s_diff_HitAD_0 _S481 = HitAD_x24_syn_dadd_0(_S471.differential_0[0], _S431);

#line 1233
    DiffPair_HitAD_0 _S482;

#line 1233
    _S482.primal_0 = _s_diff_ctx_8._S73;

#line 1233
    _S482.differential_0 = _S481;

#line 1233
    DiffPair_float3_0 _S483;

#line 1233
    _S483.primal_0 = dptranslation_4.primal_0;

#line 1233
    _S483.differential_0 = _S414;

#line 1233
    s_bwd_prop_loadPosition_0(_S482, _S483, _S414, _s_diff_ctx_8._S72);

#line 1233
    vec3 _S484 = _S474.differential_0 + _S477.differential_0 + _S480.differential_0 + _S483.differential_0;

#line 1233
    dptranslation_4.primal_0 = dptranslation_4.primal_0;

#line 1233
    dptranslation_4.differential_0 = _S484;

#line 1233
    return;
}


#line 1233
void s_bwd_prop_forward_render_0(Ray_0 prim_ray_3, RayDifferential_0 prim_raydiff_3, RandomSamplerState_0 RNG_3, inout DiffPair_float3_0 dptranslation_5, float _s_dOut_9, s_bwd_prop_forward_render_Intermediates_0 _s_diff_ctx_9)
{

#line 224 0
    vec3 _S485 = vec3(_s_dOut_9, 0.0, 0.0);

#line 1226 5
    vec3 _S486 = vec3(0.0);

#line 1226
    DiffPair_float3_0 _S487;

#line 1226
    _S487.primal_0 = dptranslation_5.primal_0;

#line 1226
    _S487.differential_0 = _S486;

#line 1226
    s_bwd_prop_reparameterizing_disconitnuous_integrands_0(prim_ray_3, prim_raydiff_3, _s_diff_ctx_9._S93, _S487, _S485, _s_diff_ctx_9._S94);

#line 1226
    dptranslation_5.primal_0 = dptranslation_5.primal_0;

#line 1226
    dptranslation_5.differential_0 = _S487.differential_0;

#line 1226
    return;
}


#line 1226
void s_bwd_forward_render_0(Ray_0 _S488, RayDifferential_0 _S489, RandomSamplerState_0 _S490, inout DiffPair_float3_0 _S491, float _S492)
{

#line 1226
    RandomSamplerState_0 _S493 = _S490;

#line 1226
    s_bwd_prop_forward_render_Intermediates_0 _S494;

#line 1226
    float _S495 = s_bwd_primal_forward_render_0(_S488, _S489, _S493, _S491.primal_0, _S494);

#line 1226
    s_bwd_prop_forward_render_0(_S488, _S489, _S490, _S491, _S492, _S494);

#line 1226
    return;
}


#line 1226
void RWByteAddressBuffer_InterlockedAddF32_0(uint _S496, float _S497)
{

#line 618 9
    float _S498 = (atomicAdd((u_trans_gradient_0._data[_S496 / 4U]), (_S497)));
    return;
}


#line 236 0
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{

#line 238
    const ivec2 resolution_2 = ivec2(512, 512);
    ivec2 pixel_2 = ivec3(gl_GlobalInvocationID).xy;


    if((any(bvec2((greaterThanEqual(pixel_2,resolution_2))))))
    {

#line 242
        return;
    }
    RandomSamplerState_0 RNG_4 = InitRandomSampler_0(uvec2(pixel_2), uint(PushConstants_0.rand_seed_0));
    Ray_0 ray_2 = generateRay_0(pixel_2, resolution_2);
    RayDifferential_0 raydiff_1 = generateRayDifferential_0(pixel_2, resolution_2);


    vec3 _S499 = vec3(0.0);

#line 249
    DiffPair_float3_0 trans_pair_0;

#line 249
    trans_pair_0.primal_0 = u_trans_0._data[0U];

#line 249
    trans_pair_0.differential_0 = _S499;

    s_bwd_forward_render_0(ray_2, raydiff_1, RNG_4, trans_pair_0, u_gradient_0._data[uint(pixel_2.x * 512 + pixel_2.y)]);

#line 256
    if(!(any(bvec3((bvec3(uvec3(isnan(trans_pair_0.differential_0))|uvec3(isinf(trans_pair_0.differential_0))))))))
    {

#line 256
        RWByteAddressBuffer_InterlockedAddF32_0(0U, trans_pair_0.differential_0.x);

#line 256
        RWByteAddressBuffer_InterlockedAddF32_0(4U, trans_pair_0.differential_0.y);

#line 256
        RWByteAddressBuffer_InterlockedAddF32_0(8U, trans_pair_0.differential_0.z);

#line 256
    }

#line 264
    return;
}

