#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../../../Utility/random.h"
#include "../include/rtCommon.h"

struct PushConstants {
    uint sample_batch;
};

layout(push_constant) uniform PushConsts {
  PushConstants pushConstants;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1, set = 0, rgba32f) uniform image2D storageImage;

struct GlobalUniforms
{
  mat4 model;
  mat4 view;
  mat4 proj;
  mat4 viewInverse;  // Camera inverse view matrix
  mat4 projInverse;  // Camera inverse projection matrix
};
layout(binding = 0, set = 1) uniform _GlobalUniforms { GlobalUniforms uni; };

// Ray payloads are used to send information between shaders.
layout(location = 0) rayPayloadEXT PassableInfo pld;

void main()
{   
    // // The resolution of the image, which is the same as the launch size:
    // const ivec2 resolution = imageSize(storageImage);
    const uvec2 resolution = uvec2(800, 600);
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    // State of the random number generator with an initial seed.
    pld.rngState = uint((pushConstants.sample_batch * resolution.y + pixel.y) * resolution.x + pixel.x);

    vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
    // The sum of the colors of all of the samples.
    vec3 summedPixelColor = vec3(0.0);

    // Limit the kernel to trace at most 64 samples.
    const int NUM_SAMPLES = 16;
    for(int sampleIdx = 0; sampleIdx < NUM_SAMPLES; sampleIdx++)
    {
        // Use a Gaussian with standard deviation 0.375 centered at the center of the pixel:
        const vec2 pixelCenter = vec2(pixel.xy) + vec2(0.5) + 0.375 * randomGaussian(pld.rngState);
        const vec2 inUV = pixelCenter/vec2(resolution.xy);
        vec2 d = inUV * 2.0 - 1.0;
        vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);
        vec3 rayDirection = direction.xyz;
        rayDirection      = normalize(rayDirection);
        vec3 rayOrigin = origin.xyz;

        vec3 accumulatedRayColor = vec3(1.0);  // The amount of light that made it to the end of the current ray.

        // Limit the kernel to trace at most 32 segments.
        for(int tracedSegments = 0; tracedSegments < 32; tracedSegments++)
        {
        // Trace the ray into the scene and get data back!
        traceRayEXT(tlas,                  // Top-level acceleration structure
                    gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                    0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                    0,                     // SBT record offset
                    0,                     // SBT record stride for offset
                    0,                     // Miss index
                    rayOrigin,             // Ray origin
                    0.0,                   // Minimum t-value
                    rayDirection,          // Ray direction
                    10000.0,               // Maximum t-value
                    0);                    // Location of payload

        // Compute the amount of light that returns to this sample from the ray
        accumulatedRayColor *= pld.color;

        if(pld.rayHitSky) {
            // Done tracing this ray.
            // Sum this with the pixel's other samples.
            // (Note that we treat a ray that didn't find a light source as if it had
            // an accumulated color of (0, 0, 0)).
            summedPixelColor += accumulatedRayColor;

            break;
        }
        else
        {
            // Start a new segment
            rayOrigin    = pld.rayOrigin;
            rayDirection = pld.rayDirection;
        }
        }
    }

  // Blend with the averaged image in the buffer:
  vec3 averagePixelColor = summedPixelColor / float(NUM_SAMPLES);
  if(pushConstants.sample_batch != 0)
  {
    // Read the storage image:
    const vec3 previousAverageColor = imageLoad(storageImage, pixel).rgb;
    // Compute the new average:
    averagePixelColor =
        (pushConstants.sample_batch * previousAverageColor + averagePixelColor) / (pushConstants.sample_batch + 1);
  }
  // Set the color of the pixel `pixel` in the storage image to `averagePixelColor`:
  imageStore(storageImage, pixel, vec4(averagePixelColor, 1.0));
}