#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "lwb_common.h"
#include "../../include/rtCommon.h"
#include "../../../../Utility/random.h"
#include "../../../../Utility/sampling.h"
#include "../../../../Utility/visualization.h"

struct PushConstants {
    uint sample_batch;
};

layout(push_constant) uniform PushConsts {
  PushConstants pushConstants;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;

layout(binding = 7, set = 2, rgba32f) uniform image2D storageImage;

// buffers
// layout(binding = 0, set = 2) writeonly  buffer slopeBuffer        { vec2 slope[]; };
// layout(binding = 1, set = 2, scalar) writeonly  buffer giBuffer   { vec3 gi[]; };
// layout(binding = 2, set = 2) writeonly  buffer projDistBuffer     { float proj_dist[]; };
// layout(binding = 3, set = 2) writeonly  buffer worldPosBuffer     { vec3 world_position[]; };
// layout(binding = 4, set = 2) writeonly  buffer worldNormalBuffer  { vec3 world_normal[]; };
// layout(binding = 5, set = 2, scalar) writeonly buffer brdfBuffer  { vec3 brdf[]; };
// layout(binding = 6, set = 2) writeonly buffer useFilterBuffer     { uint use_filter[]; };
// layout(binding = 8, set = 2) writeonly buffer useFilterBlurTmpBuffer { uint use_filter_tmp[]; };

// layout(binding = 6, set = 2, rgba32f) uniform image2D storageImage;

// Global uniforms carrying camera information.
struct GlobalUniforms {
  mat4 model;
  mat4 view;
  mat4 proj;
  mat4 viewInverse;  // Camera inverse view matrix
  mat4 projInverse;  // Camera inverse projection matrix
};
layout(binding = 0, set = 1) uniform _GlobalUniforms { GlobalUniforms uni; };

// Primary ray payload.
layout(location = 0) rayPayloadEXT PrimaryRayPayload pld;

void main()
{   
    // The resolution of the image, which is the same as the launch size:
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    // Initialize payload.
    // Set the state of the random number generator with an initial seed.
    pld.rngState = uint((pushConstants.sample_batch * resolution.y + pixel.y) * resolution.x + pixel.x);
    pld.rayHitSky = false;
    pld.color = vec3(0);

    // As we only use 1spp, no random offset.
    const vec2 pixelCenter  = vec2(pixel.xy) + vec2(0.5);
    const vec2 inUV         = pixelCenter/vec2(resolution.xy);
    const vec2 d            = inUV * 2.0 - 1.0;

    const float focus_dist = 5.5f;
    const float length_radius = 0.;
    const vec3 targetOnFocusPlane = (uni.projInverse * vec4(d.x, d.y, 1, 1)).xyz * focus_dist;
    const vec2 diskSample = uniformSampleDisk(vec2(stepAndOutputRNGFloat(pld.rngState), stepAndOutputRNGFloat(pld.rngState)));
    const vec3 sampleOnApeture = vec3(length_radius * diskSample, 0);
    const vec4 origin       = uni.viewInverse * vec4(sampleOnApeture, 1);
    const vec4 direction    = uni.viewInverse * vec4(normalize(targetOnFocusPlane - sampleOnApeture), 0);
 
    vec3 rayDirection = normalize(direction.xyz);
    vec3 rayOrigin    = origin.xyz;

    vec3 pixelColor = vec3(0.);

#if BENCHMARK == 0
    vec3 attenuation = vec3(1.);
    const int NUM_BOUNCE = 4;
    for(int i=0; i<NUM_BOUNCE; ++i) {
      // When do initial sampling for AAF, only trace single primary ray
      traceRayEXT(tlas,                  // Top-level acceleration structure
                  gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                  0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                  0,                     // SBT record offset
                  0,                     // SBT record stride for offset
                  0,                     // Miss index
                  rayOrigin,             // Ray origin
                  0.0,                   // Minimum t-value
                  rayDirection,          // Ray direction
                  10000.0,               // Maximum t-value
                  0);                    // Location of payload
      if(pld.rayHitSky) {
        break;
      }
      else {
        attenuation *= pld.color;
        vec3 color = getAlbedo(pld.hitNormal);
        rayOrigin = offsetPositionAlongNormal(pld.hitPoint, pld.hitNormal);
        rayDirection = pld.hitNormal + randomPointInSphere(pld.rngState);
        float pdf = dot(rayDirection, pld.hitNormal)  * k_inv_pi;
        attenuation *= color * dot(rayDirection, pld.hitNormal) / pdf;
        pixelColor += attenuation * pld.color;
      }
    }
#endif
#if BENCHMARK == 1
    // When do initial sampling for AAF, only trace single primary ray
    traceRayEXT(tlas,                  // Top-level acceleration structure
                gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                0,                     // SBT record offset
                0,                     // SBT record stride for offset
                0,                     // Miss index
                rayOrigin,             // Ray origin
                0.0,                   // Minimum t-value
                rayDirection,          // Ray direction
                10000.0,               // Maximum t-value
                0);                    // Location of payload
    if(pld.rayHitSky) {
      pixelColor = vec3(0.34f, 0.55f, 0.85f);
    }
    else {
      pixelColor = pld.color;
    }
#endif
#if BENCHMARK == 2
    // trace the primary ray
    traceRayEXT(tlas,                  // Top-level acceleration structure
                gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                0,                     // SBT record offset
                0,                     // SBT record stride for offset
                0,                     // Miss index
                rayOrigin,             // Ray origin
                0.0,                   // Minimum t-value
                rayDirection,          // Ray direction
                10000.0,               // Maximum t-value
                0);                    // Location of payload
    if(pld.rayHitSky == true) {
      pixelColor = vec3(0.f);
    }
    else {
      vec3 secondaryRayOrigin = offsetPositionAlongNormal(pld.hitPoint, pld.hitNormal);
      // direct illumination
      vec3 attenuation = pld.color;
      vec3 direct = attenuation * pld.direct;
      // indirect illumination
      const int bounceNum = 1;
      const int nSPP = 64;
      vec3 normal = pld.hitNormal;
      vec3 pRayDir;
      vec3 indirect = vec3(0);
      for(int i=0; i<nSPP; ++i) {
          // cosine sampling the hemisphere
          vec3 pRayOrigin = secondaryRayOrigin;
          pRayDir = normalize(normal + randomPointInSphere(pld.rngState));
          vec3 atten = vec3(1.);
          vec3 Li = vec3(0.);
          for(int k=0; k<bounceNum; ++k) {
              // cast secondary ray
              pld.rayHitSky = true;
              pld.direct = vec3(0.);
              pld.color = vec3(0.);
              traceRayEXT(tlas,   // acceleration structure
                      gl_RayFlagsOpaqueEXT,       // rayFlags
                      0xFF,        // cullMask
                      0,           // sbtRecordOffset
                      0,           // sbtRecordStride
                      0,           // missIndex
                      pRayOrigin,  // ray origin
                      0.0,         // ray min range
                      pRayDir,      // ray direction
                      10000.0,        // ray max range
                      0            // payload (location = 1)
              );
              if(pld.rayHitSky == true)
                  break;
              pRayOrigin = offsetPositionAlongNormal(pld.hitPoint, pld.hitNormal);
              pRayDir = pld.hitNormal + randomPointInSphere(pld.rngState);
              atten *= pld.color;
              Li += atten  * pld.direct;
          }
          indirect += Li; // if do uniform sample: * secNdL * 2
      }
      pixelColor = attenuation * indirect / nSPP + direct;
    }

#endif

  if(pushConstants.sample_batch != 0) {
    vec3 color = imageLoad(storageImage, ivec2(pixel)).rgb;
    pixelColor = (pushConstants.sample_batch * color + pixelColor) / (pushConstants.sample_batch + 1);
  }
  imageStore(storageImage, ivec2(pixel), vec4(pixelColor, 1.0));
  // const float avgVis = (pld.rayShadow && pld.accumWeights > 0.01) ? pld.accumVis/pld.accumWeights : 1.0;
  // // fill in output buffers
  // uint gid = pixel.x + pixel.y * resolution.x;
  // slope[gid] = vec2(pld.s1, pld.s2);
  // vis[gid] = vec3(avgVis, pld.accumWeights, pld.accumVis);
  // world_position[gid] = pld.hitPoint;
  // world_normal[gid] = normalize(pld.hitNormal);
  // brdf[gid] = pld.brdf;
  // use_filter[gid] = pld.rayShadow ? 1:0;
  // use_filter_tmp[gid] = 0;
}