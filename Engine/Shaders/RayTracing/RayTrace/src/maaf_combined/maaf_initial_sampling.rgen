#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "maaf_common.h"
#include "../../../../Utility/random.h"
#include "../../../../Utility/sampling.h"
#include "../../../../Utility/Visualization.h"
#include "../../include/rtCommon.h"

struct PushConstants {
    uint sample_batch;
};

layout(push_constant) uniform PushConsts {
  PushConstants pushConstants;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;

// buffers
layout(binding = 0, set = 2, scalar) writeonly buffer defocusSlopeBuffer                { vec2 defocus_slope[]; };
layout(binding = 1, set = 2, scalar) writeonly buffer directSlopeBuffer                 { vec2 direct_slope[]; };
layout(binding = 2, set = 2, scalar) writeonly buffer indirectSlopeBuffer               { vec2 indirect_slope[]; };
layout(binding = 3, set = 2, scalar) writeonly buffer worldPositionBuffer               { vec4 world_position[]; };
layout(binding = 4, set = 2, scalar) writeonly buffer worldNormalBuffer                 { vec3 world_normal[]; };
layout(binding = 5, set = 2, scalar) writeonly buffer useFilterBuffer                   { uint use_filter[]; };
layout(binding = 6, set = 2, scalar) writeonly buffer MAAFParametersBuffer              { MAAFParameters params[]; };
layout(binding = 7, set = 2, scalar) writeonly buffer MAAFIntermediateDirectBuffer      { InitialSampleRecord directRecord[]; };
layout(binding = 8, set = 2, scalar) writeonly buffer MAAFIntermediateIndirectBuffer    { InitialSampleRecord indirectRecord[]; };

// Global uniforms carrying camera information.
struct GlobalUniforms {
  mat4 model;
  mat4 view;
  mat4 proj;
  mat4 viewInverse;  // Camera inverse view matrix
  mat4 projInverse;  // Camera inverse projection matrix
};
layout(binding = 0, set = 1) uniform _GlobalUniforms { GlobalUniforms uni; };

// Primary ray payload.
layout(location = 0) rayPayloadEXT PrimaryRayPayload pld;;

void main()
{   
    // The resolution of the image, which is the same as the launch size:
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }
    // Compute gid
    uint gid = pixel.x + pixel.y * resolution.x;
    use_filter[gid] = 0;
    // initialize primary payload
    pld.rngState = uint((pushConstants.sample_batch * resolution.y + pixel.y) * resolution.x + pixel.x);
    // find the central ray status.
    const vec2 pixelCenter  = vec2(pixel.xy) + vec2(0.5);       // [+0,+resolution] pixel uv
    const vec2 inUV         = pixelCenter/vec2(resolution.xy);  // [+0,+1] pixel uv
    const vec2 d            = inUV * 2.0 - 1.0;                 // [-1,+1] pixel uv
    const vec3 targetOnFocusPlane = (uni.projInverse * vec4(d.x, d.y, 1, 1)).xyz * focus_dist;
    // sample 16 path samples per pixel
    // each sample consists of:
    // + a primary lens ray
    // + a shadow ray
    // + a one-bounce indirect illumination sample.
    vec3 albedo = vec3(0.);
    float apeture_weight = 0.f;

    vec2 directSlopes   = vec2(k_inf, -k_inf);
    vec2 indirectSlopes = vec2(k_inf, -k_inf);
    vec2 defocusSlopes  = vec2(k_inf, -k_inf);

    pld.reflectorDistMinMax = vec2(k_inf, -k_inf);
    pld.direcetSlopeMinMax = vec2(k_inf, -k_inf);

    vec3 avgWorldPosition = vec3(0);
    vec3 avgWorldNormal = vec3(0);
    float avgProjDist = 0.f;
    float weights = 0.f;

    const int spp = 16;
    for(int i=0; i<spp; ++i) {
        const vec2 diskSample = uniformSampleDisk(vec2(stepAndOutputRNGFloat(pld.rngState), stepAndOutputRNGFloat(pld.rngState)));
        const vec3 apetureSample = vec3(length_radius * diskSample, 0);
        // find the pimary sample
        const vec4 origin       = uni.viewInverse * vec4(apetureSample, 1);
        const vec3 toTarget     = normalize(targetOnFocusPlane - apetureSample);
        const vec4 direction    = uni.viewInverse * vec4(toTarget, 0);
        const vec3 rayOrigin    = origin.xyz;
        const vec3 rayDirection = normalize(direction.xyz);
        // reset payload
        pld.visibility = 0.f;
        pld.indirect = vec3(0.f);
        pld.rayHitSky = true;
        // emit primary ray
        traceRayEXT(tlas,                  // Top-level acceleration structure
                    gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                    0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                    0,                     // SBT record offset
                    0,                     // SBT record stride for offset
                    0,                     // Miss index
                    rayOrigin,             // Ray origin
                    0.0,                   // Minimum t-value
                    rayDirection,          // Ray direction
                    10000.0,               // Maximum t-value
                    0);                    // Location of payload

        albedo += pld.brdf;
        apeture_weight += 1;

        if(!pld.rayHitSky) {
            // projected distance
            const float tHit = distance(pld.worldLocation, rayOrigin);
            const float proj_tHit = tHit * dot(toTarget, vec3(0,0,1));
            const float proj_distance  = 2.f * (proj_tHit * tan(half_fov* k_pi / 180.0)) / resolution.y;
            // lens weight
            const float lens_weight = unnormalized_gaussian(diskSample.x, inv_sigma_lens) * unnormalized_gaussian(diskSample.y, inv_sigma_lens);
            // accum worldPos worldNormal ProjDist
            avgWorldPosition += lens_weight * pld.worldLocation;
            avgWorldNormal += lens_weight * pld.worldNormal;
            avgProjDist += lens_weight * proj_distance;
            weights += lens_weight;
            // direct slope
            const float slopeDefocusBlur = computeDefocusBlurSlope(proj_tHit);
            defocusSlopes.x = min(defocusSlopes.x, slopeDefocusBlur);
            defocusSlopes.y = max(defocusSlopes.y, slopeDefocusBlur);
            // record
            directRecord[gid].illumination[i] = vec4(pld.brdf * pld.visibility, 1);
            indirectRecord[gid].illumination[i] = vec4(pld.brdf * pld.indirect, 1);
            const float u = length(diskSample);
            directRecord[gid].yu[i] = vec2(pld.yd, u);
            indirectRecord[gid].yu[i] = vec2(pld.yi, u);
        }
        else {
            directRecord[gid].illumination[i] = vec4(0,0,0,0);
            indirectRecord[gid].illumination[i] = vec4(0,0,0,0);
            indirectRecord[gid].yu[i] = vec2(0,0);
        }
    }

    indirectSlopes = pld.reflectorDistMinMax;

    albedo = albedo / apeture_weight;

    if(weights > 0.0001) {
        avgWorldPosition = avgWorldPosition / weights;
        avgWorldNormal =  avgWorldNormal / weights;
        avgProjDist = avgProjDist / weights;

        pld.reflectorDistMinMax.x = max(pld.reflectorDistMinMax.x, zMIN); // clamp z_min
        pld.reflectorDistMinMax.y = max(pld.reflectorDistMinMax.y, zMIN);
        if(pld.reflectorDistMinMax.x == k_inf) {
            pld.reflectorDistMinMax.x = zMINNONE;
            pld.reflectorDistMinMax.y = zMINNONE;
        }
    }
    use_filter[gid] = weights > 0.0001 ? 1:0;
    defocus_slope[gid] = defocusSlopes;
    direct_slope[gid] = (weights > 0.0001) ? pld.direcetSlopeMinMax : vec2(k_inf, -k_inf);
    indirect_slope[gid] = pld.reflectorDistMinMax;
    world_position[gid] = vec4(avgWorldPosition, avgProjDist);
    world_normal[gid] = normalize(avgWorldNormal);
}