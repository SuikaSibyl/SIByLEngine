#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "aaf_gi_common.h"
#include "../../../../Utility/Visualization.h"

layout(binding = 0, set = 0, scalar) readonly buffer zMinMaxBuffer     { vec2 z_min_max[]; };
layout(binding = 1, set = 0, scalar) readonly buffer indirectBuffer    { vec3 indirect[]; };
layout(binding = 2, set = 0, scalar) readonly buffer albedoBuffer      { vec3 albedo[]; };
layout(binding = 3, set = 0, scalar) readonly buffer projDistBuffer    { float proj_dist[]; };
layout(binding = 4, set = 0, scalar) readonly buffer worldPosBuffer    { vec3 world_position[]; };
layout(binding = 5, set = 0, scalar) readonly buffer worldNormalBuffer { vec3 world_normal[]; };
layout(binding = 6, set = 0, scalar) readonly buffer useFilterBuffer   { uint use_filter[]; };
layout(binding = 8, set = 0, scalar) readonly buffer directBuffer      { vec3 direct[]; };
layout(binding = 9, set = 0, scalar) readonly buffer sppBuffer         { float spp[]; };
layout(binding = 10, set = 0, scalar) readonly buffer betaBuffer       { float beta[]; };
layout(binding = 11, set = 0, scalar) readonly buffer tmpGIBuffer      { vec3 tmpGI[]; };

layout(binding = 7, set = 0, rgba32f) uniform image2D storageImage;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// 1: output
// 2: z_min
// 3: z_max
// 4: use filter
// 5: spp
// 6: proj_dist
// 7: normal
// 8: beta
// 9: Indirect Only
const int DISPLAY_MODE = 1;

void main()
{
    // Get current pixel position and global index.
    const uvec2 pixel = gl_GlobalInvocationID.xy;
    const uint gid = pixel.x + pixel.y * resolution.x;
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }
    
    // the output color
    vec3 pixelColor = vec3(0.f);

    if(DISPLAY_MODE == 1)
        pixelColor = vec3(indirect[gid] * albedo[gid] + direct[gid]);
    else if(DISPLAY_MODE == 2)
        pixelColor = vec3(colorMap_naive(z_min_max[gid].x / 4));
    else if(DISPLAY_MODE == 3)
        pixelColor = vec3(colorMap_naive(z_min_max[gid].y / 3));
    else if(DISPLAY_MODE == 4)
        pixelColor = vec3(use_filter[gid]);
    else if(DISPLAY_MODE == 5)
        pixelColor = vec3(colorMap_naive(spp[gid] / 100));
    else if(DISPLAY_MODE == 6)
        pixelColor = vec3(colorMap_naive(proj_dist[gid] * 10));
    else if(DISPLAY_MODE == 7)
        pixelColor = vec3(normalToColor(world_normal[gid]));
    else if(DISPLAY_MODE == 8)
        pixelColor = vec3(colorMap_naive(beta[gid] * 5));
    else if(DISPLAY_MODE == 9)
        pixelColor = vec3(indirect[gid]);


    // imageStore(storageImage, ivec2(pixel), vec4(pixelColor, 1.0));
}