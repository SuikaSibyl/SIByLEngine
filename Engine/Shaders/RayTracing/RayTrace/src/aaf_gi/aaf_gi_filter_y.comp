#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "aaf_gi_common.h"

layout(binding = 0, set = 0, scalar) readonly buffer zMinMaxBuffer     { vec2 z_min_max[]; };
layout(binding = 1, set = 0, scalar) writeonly buffer indirectBuffer    { vec3 indirect[]; };
layout(binding = 2, set = 0, scalar) readonly buffer albedoBuffer      { vec3 albedo[]; };
layout(binding = 3, set = 0, scalar) readonly buffer projDistBuffer    { float proj_dist[]; };
layout(binding = 4, set = 0, scalar) readonly buffer worldPosBuffer    { vec3 world_position[]; };
layout(binding = 5, set = 0, scalar) readonly buffer worldNormalBuffer { vec3 world_normal[]; };
layout(binding = 6, set = 0, scalar) readonly buffer useFilterBuffer   { uint use_filter[]; };
layout(binding = 8, set = 0, scalar) readonly buffer directBuffer      { vec3 direct[]; };
layout(binding = 9, set = 0, scalar) readonly buffer sppBuffer         { float spp[]; };
layout(binding = 10, set = 0, scalar) readonly buffer betaBuffer       { float beta[]; };
layout(binding = 11, set = 0, scalar) readonly buffer tmpGIBuffer     { vec3 tmpGI[]; };

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    // Get current pixel position and global index.
    const uvec2 pixel = gl_GlobalInvocationID.xy;
    const uint gid = pixel.x + pixel.y * resolution.x;
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }
    
    // Get center pixel properties.
    const vec3  center_gi = tmpGI[gid];
    const float center_omega_x_r = 2 / beta[gid];
    const vec3  center_world_pos = world_position[gid];
    const vec3  center_world_norm = world_normal[gid];
    const float center_beta = beta[gid];

    if(use_filter[gid] == 0) { // TODO: use filter n?
        indirect[gid] = center_gi;
        return;
    }

    vec3 accum_blurred_gi = vec3(0.f);
    float accum_gi_weights = 0.f;

    for (int i = int(pixel.y)-pixel_radius.y; i <= int(pixel.y)+pixel_radius.y; ++i) {
        // ignore if the sample exceed the resolution valid region
        if(i<0 || i>=resolution.y) continue;
        const uint  neighbor_gid = pixel.x + i * resolution.x;
        const vec3 neighbor_gi = tmpGI[neighbor_gid];
        const float neighbor_omega_x_r = 2 / beta[neighbor_gid];

        if (neighbor_omega_x_r > 0                                                  // have a positive x bandlimiting
            && abs(center_omega_x_r - neighbor_omega_x_r) < dist_scale_threshold   // x bandlimiting distance not too large
            && use_filter[neighbor_gid] != 0)  // what?
        {
            const vec3 neighbor_world_pos = world_position[neighbor_gid];
            const vec3 diff = center_world_pos - neighbor_world_pos;
            const float distancesq = dot(diff, diff);
            if (distancesq < dist_threshold) {
                const vec3 neighbor_world_norm = world_normal[neighbor_gid];
                if(acos(dot(center_world_norm, neighbor_world_norm)) < angle_threshold) {
                    const float weight = gaussian(distancesq, center_beta);
                    accum_blurred_gi += weight * neighbor_gi;
                    accum_gi_weights += weight;
                }
           }
        }
    }

    vec3 blurred_gi = vec3(0.f);
    if (accum_gi_weights > 0.0001f) // if the filter is ? enough
        blurred_gi = accum_blurred_gi / accum_gi_weights;
    else // else use current local visibility
        blurred_gi = center_gi;

    indirect[gid] = blurred_gi;
}