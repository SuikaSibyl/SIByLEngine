#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "aaf_gi_common.h"
#include "../../../../Utility/random.h"
#include "../../../../Utility/Visualization.h"
#include "../../include/rtCommon.h"

struct PushConstants {
    uint sample_batch;
};

layout(push_constant) uniform PushConsts {
  PushConstants pushConstants;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;

layout(binding = 7, set = 2, rgba32f) uniform image2D storageImage;

// buffers
layout(binding = 0, set = 2, scalar) writeonly buffer zMinMaxBuffer     { vec2 z_min_max[]; };
layout(binding = 1, set = 2, scalar) writeonly buffer indirectBuffer    { vec3 indirect[]; };
layout(binding = 2, set = 2, scalar) writeonly buffer albedoBuffer      { vec3 albedo[]; };
layout(binding = 3, set = 2, scalar) writeonly buffer projDistBuffer    { float proj_dist[]; };
layout(binding = 4, set = 2, scalar) writeonly buffer worldPosBuffer    { vec3 world_position[]; };
layout(binding = 5, set = 2, scalar) writeonly buffer worldNormalBuffer { vec3 world_normal[]; };
layout(binding = 6, set = 2, scalar) writeonly buffer useFilterBuffer   { uint use_filter[]; };
layout(binding = 8, set = 2, scalar) writeonly buffer directBuffer      { vec3 direct[]; };
layout(binding = 9, set = 2, scalar) writeonly buffer sppBuffer         { float spp[]; };
layout(binding = 10, set = 2, scalar) writeonly buffer betaBuffer       { float beta[]; };

// Global uniforms carrying camera information.
struct GlobalUniforms {
  mat4 model;
  mat4 view;
  mat4 proj;
  mat4 viewInverse;  // Camera inverse view matrix
  mat4 projInverse;  // Camera inverse projection matrix
};
layout(binding = 0, set = 1) uniform _GlobalUniforms { GlobalUniforms uni; };

// Primary ray payload.
layout(location = 0) rayPayloadEXT PrimarySamplePayload pld;

void main()
{   
    // The resolution of the image, which is the same as the launch size:
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    // As we only use 1spp, no random offset.
    const vec4 origin       = uni.viewInverse * vec4(0, 0, 0, 1);
    const vec2 pixelCenter  = vec2(pixel.xy) + vec2(0.5);
    const vec2 inUV         = pixelCenter/vec2(resolution.xy);
    const vec2 d            = inUV * 2.0 - 1.0;
    const vec4 target       = uni.projInverse * vec4(d.x, d.y, 1, 1);
    const vec4 direction    = uni.viewInverse * vec4(normalize(target.xyz), 0);
    const vec3 rayDirection = normalize(direction.xyz);
    const vec3 rayOrigin    = origin.xyz;

    // Initialize payload.
    // Set the state of the random number generator with an initial seed.
    pld.rngState = uint((pushConstants.sample_batch * resolution.y + pixel.y) * resolution.x + pixel.x);
    pld.rayHitReflector = false;
    pld.rayHitShadow = false;
    pld.indirect = vec3(0.f);
    pld.direct = vec3(0.f);
    pld.z_min = k_inf;
    pld.z_max = 0.0;
    pld.albedo = vec3(0.);
    // When do initial sampling for AAF, only trace single primary ray
    traceRayEXT(tlas,                  // Top-level acceleration structure
                gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                0,                     // SBT record offset
                0,                     // SBT record stride for offset
                0,                     // Miss index
                rayOrigin,             // Ray origin
                0.0,                   // Minimum t-value
                rayDirection,          // Ray direction
                10000.0,               // Maximum t-value
                0);                    // Location of payload

  const float tHit = distance(pld.hitPoint, rayOrigin);
  const float proj_distance  = 2.f / resolution.y * (tHit * tan(half_fov* k_pi / 180.0));

  uint gid = pixel.x + pixel.y * resolution.x;
  
  pld.z_min = max(pld.z_min, zMIN); // clamp z_min
  pld.z_max = max(pld.z_max, zMIN);
  if(pld.z_min == k_inf) {
    pld.z_min = zMIN * 10;
    pld.z_max = zMIN * 10;
  }
  z_min_max[gid] = vec2(pld.z_min, pld.z_max);

  albedo[gid] = pld.albedo;
  direct[gid] = pld.direct;
  indirect[gid] = pld.indirect;
  proj_dist[gid] = proj_distance;
  spp[gid] = computeSPP(pld.z_min, pld.z_max, proj_distance);
  beta[gid] = computeBeta(pld.z_min, proj_distance);
  use_filter[gid] = pld.rayHitSky ? 0 : 1;
  world_position[gid] = pld.hitPoint;
  world_normal[gid] = normalize(pld.hitNormal);
}