#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "aaf_common.h"

layout(binding = 0, set = 0) writeonly buffer slopeBuffer        { vec2 slope[]; };
layout(binding = 6, set = 0) writeonly buffer useFilterBuffer    { uint use_filter[]; };

layout(binding = 8, set = 0) readonly buffer useFilterBlurTmpBuffer        { uint use_filter_tmp[]; };
layout(binding = 10, set = 0, scalar) readonly buffer slopeBlurTmpBuffer   { vec2 slope_tmp[]; };

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    // Get current pixel position and global index.
    const uvec2 pixel = gl_GlobalInvocationID.xy;
    const uint gid = pixel.x + pixel.y * resolution.x;
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }
    
    vec2 center_slope = slope_tmp[gid];
    uint center_use_filter = use_filter_tmp[gid];
    vec2 filterd_slope = center_slope;
    int obj_id = 0; // TODO: add object idx
    
    for (int i=int(pixel.y)-pixel_radius.y; i<=int(pixel.y)+pixel_radius.y; i++) {
        if (i < 0 || i >= resolution.y) continue;
        uint neighbor_id = pixel.x + i*resolution.x;
        vec2 neighbor_slope = slope_tmp[neighbor_id];
        uint neighbor_use_filter = use_filter_tmp[neighbor_id];
        // int neigbor_obj_id = 0; // TODO
        // if (neigbor_obj_id != center_slope) {
        //     center_slope = filterd_slope;
        //     break;
        // }
        if (neighbor_use_filter != 0) {
            filterd_slope.x = max(neighbor_slope.x, filterd_slope.x);
            filterd_slope.y = min(neighbor_slope.y, filterd_slope.y);
        }
        center_use_filter |= neighbor_use_filter;
    }
    use_filter[gid] |= center_use_filter;
    slope[gid] = filterd_slope;
    return;
}