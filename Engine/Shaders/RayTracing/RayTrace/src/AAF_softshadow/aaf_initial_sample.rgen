#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "aaf_payloads.h"
#include "../../../../Utility/random.h"
#include "../../../../Utility/Visualization.h"
#include "../../include/rtCommon.h"

struct PushConstants {
    uint sample_batch;
};

layout(push_constant) uniform PushConsts {
  PushConstants pushConstants;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1, set = 0, rgba32f) uniform image2D storageImage;

// Global uniforms carrying camera information.
struct GlobalUniforms {
  mat4 model;
  mat4 view;
  mat4 proj;
  mat4 viewInverse;  // Camera inverse view matrix
  mat4 projInverse;  // Camera inverse projection matrix
};
layout(binding = 0, set = 1) uniform _GlobalUniforms { GlobalUniforms uni; };

// Primary ray payload.
layout(location = 0) rayPayloadEXT InitalSamplePayload pld;

void main()
{   
    // The resolution of the image, which is the same as the launch size:
    const uvec2 resolution = uvec2(800, 600);
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }
    // State of the random number generator with an initial seed.
    pld.rngState = uint((pushConstants.sample_batch * resolution.y + pixel.y) * resolution.x + pixel.x);
    pld.rayShadow = false;
    // camera origin
    const vec4 origin = uni.viewInverse * vec4(0, 0, 0, 1);
    // The sum of the colors of all of the samples.
    vec3 pixelColor = vec3(0.0);

    // Limit the kernel to trace at most 64 samples.
    // Use a Gaussian with standard deviation 0.375 centered at the center of the pixel:
    const vec2 pixelCenter = vec2(pixel.xy) + vec2(0.5) + 0.375 * randomGaussian(pld.rngState);
    const vec2 inUV = pixelCenter/vec2(resolution.xy);
    const vec2 d = inUV * 2.0 - 1.0;
    const vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
    const vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);
    const vec3 rayDirection = normalize(direction.xyz);
    const vec3 rayOrigin = origin.xyz;

    // When do initial sampling for AAF, only trace single primary ray
    traceRayEXT(tlas,                  // Top-level acceleration structure
                gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                0,                     // SBT record offset
                0,                     // SBT record stride for offset
                0,                     // Miss index
                rayOrigin,             // Ray origin
                0.0,                   // Minimum t-value
                rayDirection,          // Ray direction
                10000.0,               // Maximum t-value
                0);                    // Location of payload

//   // Blend with the averaged image in the buffer:
    // vec3 averagePixelColor = summedPixelColor / float(NUM_SAMPLES);
//   if(pushConstants.sample_batch != 0)
//   {
//     // Read the storage image:
//     const vec3 previousAverageColor = imageLoad(storageImage, pixel).rgb;
//     // Compute the new average:
//     averagePixelColor =
//         (pushConstants.sample_batch * previousAverageColor + averagePixelColor) / (pushConstants.sample_batch + 1);
//   }
    const vec3 background_color = vec3(0.34f, 0.55f, 0.85f);
    pixelColor = pld.rayHitSky ? background_color : (pld.rayShadow ? colorMap_naive(pld.distanceMax): vec3(0.f));
    // Set the color of the pixel `pixel` in the storage image to `averagePixelColor`:
    imageStore(storageImage, pixel, vec4(pixelColor, 1.0));
}