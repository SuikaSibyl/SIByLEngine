#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../../Utility/math.glsl"
#include "../../Utility/random.glsl"

#include "../../RayTracing/rayCommon.h"
#include "../../RayTracing/host_device.glsl"
#include "../../RayTracing/raycommon.glsl"

layout(binding = 1, set = 0, rgba32f) uniform image2D storageImage;

void main()
{   
    // // The resolution of the image, which is the same as the launch size:
    // const ivec2 resolution = imageSize(storageImage);
    const uvec2 resolution = uvec2(800, 600);
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    // Set the color of the pixel `pixel` in the storage image as follows:
    vec4 color = vec4(pixel.x / float(resolution.x),  //
                    pixel.y / float(resolution.y),  //
                    0.0,                            //
                    1.0);
    imageStore(storageImage, pixel, color);
}