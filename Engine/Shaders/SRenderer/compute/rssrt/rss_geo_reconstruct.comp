#version 460
#extension GL_EXT_scalar_block_layout : require

struct PushConstants {
    mat4    invProjMat;
    mat4    invViewMat;
    uvec2   resolution;
    int     geoType;
};
layout(push_constant) uniform PushConsts { PushConstants pushConstants; };

layout(binding = 0, set = 0) uniform sampler2D hi_z;
layout(binding = 1, set = 0, scalar) buffer _PositionBuffer   { vec3 positions[]; };
layout(binding = 2, set = 0, scalar) buffer _IndicesBuffer    { uint indices[]; };

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

vec3 SS2WS(in const vec2 xy, in const float z) {
    const vec4 posInCS =  vec4((xy/pushConstants.resolution)*2-1.0f, z, 1) * vec4(1,1,1,1);
    vec4 posInVS = pushConstants.invProjMat * posInCS;
    posInVS /= posInVS.w;
    const vec4 posInWS = pushConstants.invViewMat * vec4(posInVS.xyz, 1.0);
    return posInWS.xyz;
}

/**
* In this setting, we assume pixels are piece-wise constant without connections.
* Each pixel has 1 quads, 4 vertices and 6 indices.
*/
void geo_setting_1_reconstruct() {
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    const uint gid = pixel.x + pixel.y * resolution.x;
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    // The depth value of the pixel:
    const float z = texelFetch(hi_z, pixel, 0).r;
    const bool is_valid = (z < 1.0) ? true : false;

    // The position of the pixel in world space:
    const vec3 posInWS_0 = is_valid ? SS2WS(pixel + vec2(0, 0), z) : vec3(0.0);
    const vec3 posInWS_1 = is_valid ? SS2WS(pixel + vec2(0, 1), z) : vec3(0.0);
    const vec3 posInWS_2 = is_valid ? SS2WS(pixel + vec2(1, 0), z) : vec3(0.0);
    const vec3 posInWS_3 = is_valid ? SS2WS(pixel + vec2(1, 1), z) : vec3(0.0);

    // mapping texture space to world space
    positions[gid * 4 + 0] = posInWS_0;
    positions[gid * 4 + 1] = posInWS_1;
    positions[gid * 4 + 2] = posInWS_2;
    positions[gid * 4 + 3] = posInWS_3;

    // write indices buffer
    indices[gid * 6 + 0] = gid * 4 + 0;
    indices[gid * 6 + 1] = gid * 4 + 1;
    indices[gid * 6 + 2] = gid * 4 + 2;
    indices[gid * 6 + 3] = gid * 4 + 2;
    indices[gid * 6 + 4] = gid * 4 + 1;
    indices[gid * 6 + 5] = gid * 4 + 3;
}

/**
* In this setting, we assume pixels are piece-wise constant with connections.
* Each pixel has 3 quads, 8 vertices and 18 indices.
*/
void geo_setting_2_reconstruct() {
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    const uint gid = pixel.x + pixel.y * resolution.x;
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    // The depth value of the pixel:
    const float z = texelFetch(hi_z, pixel, 0).r;
    const bool is_valid = (z < 1.0) ? true : false;
    // The position of the pixel in world space:
    const vec3 posInWS_0 = is_valid ? SS2WS(pixel + vec2(0, 0), z) : vec3(0.0);
    const vec3 posInWS_1 = is_valid ? SS2WS(pixel + vec2(0, 1), z) : vec3(0.0);
    const vec3 posInWS_2 = is_valid ? SS2WS(pixel + vec2(1, 0), z) : vec3(0.0);
    const vec3 posInWS_3 = is_valid ? SS2WS(pixel + vec2(1, 1), z) : vec3(0.0);

    // Fetch right pixel
    const bool is_valid_right = (pixel.x + 1 < resolution.x) ? true : false;
    const float z_right = is_valid_right ? texelFetch(hi_z, pixel + ivec2(1, 0), 0).r : 0.0;
    const vec3 posInWS_4 = is_valid_right ? SS2WS(pixel + vec2(1, 0), z_right) : posInWS_2;
    const vec3 posInWS_5 = is_valid_right ? SS2WS(pixel + vec2(1, 1), z_right) : posInWS_3;
    // Fetch bottom pixel
    const bool is_valid_down = (pixel.y + 1 < resolution.y) ? true : false;
    const float z_down = is_valid_down ? texelFetch(hi_z, pixel + ivec2(0, 1), 0).r : 0.0;
    const vec3 posInWS_6 = is_valid_down ? SS2WS(pixel + vec2(0, 1), z_down) : posInWS_1;
    const vec3 posInWS_7 = is_valid_down ? SS2WS(pixel + vec2(1, 1), z_down) : posInWS_3;

    // mapping texture space to world space
    positions[gid * 8 + 0] = posInWS_0;
    positions[gid * 8 + 1] = posInWS_1;
    positions[gid * 8 + 2] = posInWS_2;
    positions[gid * 8 + 3] = posInWS_3;
    positions[gid * 8 + 4] = posInWS_4;
    positions[gid * 8 + 5] = posInWS_5;
    positions[gid * 8 + 6] = posInWS_6;
    positions[gid * 8 + 7] = posInWS_7;

    // write indices buffer
    indices[gid * 18 + 0] = gid * 8 + 0;
    indices[gid * 18 + 1] = gid * 8 + 1;
    indices[gid * 18 + 2] = gid * 8 + 2;
    indices[gid * 18 + 3] = gid * 8 + 2;
    indices[gid * 18 + 4] = gid * 8 + 1;
    indices[gid * 18 + 5] = gid * 8 + 3;
    
    indices[gid * 18 + 6] = gid * 8 + 2;
    indices[gid * 18 + 7] = gid * 8 + 3;
    indices[gid * 18 + 8] = gid * 8 + 4;
    indices[gid * 18 + 9] = gid * 8 + 4;
    indices[gid * 18 + 10] = gid * 8 + 3;
    indices[gid * 18 + 11] = gid * 8 + 5;
    
    indices[gid * 18 + 12] = gid * 8 + 1;
    indices[gid * 18 + 13] = gid * 8 + 6;
    indices[gid * 18 + 14] = gid * 8 + 3;
    indices[gid * 18 + 15] = gid * 8 + 3;
    indices[gid * 18 + 16] = gid * 8 + 6;
    indices[gid * 18 + 17] = gid * 8 + 7;
}

/**
* In this setting, we assume pixels are triangulated with same direction.
* Each pixel has 1 quads, 4 vertices and 6 indices.
*/
void geo_setting_3_reconstruct() {
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    const uint gid = pixel.x + pixel.y * resolution.x;
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }
    
    // The depth value of the pixel:
    const float z = texelFetch(hi_z, pixel, 0).r;
    const bool is_valid = (z < 1.0) ? true : false;
    // The position of the pixel in world space:
    const vec3 posInWS_0 = is_valid ? SS2WS(pixel + vec2(0.5, 0.5), z) : vec3(0.0);
    // Fetch right pixel
    bool is_valid_right = (pixel.x + 1 < resolution.x) ? true : false;
    const float z_right = is_valid_right ? texelFetch(hi_z, pixel + ivec2(1, 0), 0).r : 0.0;
    is_valid_right = is_valid_right && (z_right < 1.0);
    const vec3 posInWS_1 = is_valid_right ? SS2WS(pixel + vec2(1.5, 0.5), z_right) : posInWS_0;
    const vec3 normInWS_1 = is_valid_right ? unpackNormal(texelFetch(ws_normal, ivec2(tid), 0).xyz) : vec3(0.0);
    // Fetch bottom pixel
    bool is_valid_down = (pixel.y + 1 < resolution.y) ? true : false;
    const float z_down = is_valid_down ? texelFetch(hi_z, pixel + ivec2(0, 1), 0).r : 0.0;
    is_valid_down = is_valid_down && (z_down < 1.0);
    const vec3 posInWS_2 = is_valid_down ? SS2WS(pixel + vec2(0.5, 1.5), z_down) : posInWS_0;
    // Fetch right-bottom pixel
    bool is_valid_rd = (pixel.x + 1 < resolution.x && pixel.y + 1 < resolution.y) ? true : false;
    const float z_rd = is_valid_rd ? texelFetch(hi_z, pixel + ivec2(1, 1), 0).r : 0.0;
    is_valid_rd = is_valid_rd && (z_rd < 1.0);
    const vec3 posInWS_3 = is_valid_rd ? SS2WS(pixel + vec2(1.5, 1.5), z_rd) : posInWS_0;

    positions[gid * 4 + 0] = posInWS_0;
    positions[gid * 4 + 1] = posInWS_1;
    positions[gid * 4 + 2] = posInWS_2;
    positions[gid * 4 + 3] = posInWS_3;

    // write indices buffer
    if(is_valid && is_valid_right && is_valid_down) {
        indices[gid * 6 + 0] = gid * 4 + 0;
        indices[gid * 6 + 1] = gid * 4 + 1;
        indices[gid * 6 + 2] = gid * 4 + 2;
    }
    else {
        indices[gid * 6 + 0] = gid * 4 + 0;
        indices[gid * 6 + 1] = gid * 4 + 0;
        indices[gid * 6 + 2] = gid * 4 + 0;
    }
    if(is_valid_rd && is_valid_right && is_valid_down) {
        indices[gid * 6 + 3] = gid * 4 + 2;
        indices[gid * 6 + 4] = gid * 4 + 1;
        indices[gid * 6 + 5] = gid * 4 + 3;
    }
    else {
        indices[gid * 6 + 3] = gid * 4 + 1;
        indices[gid * 6 + 4] = gid * 4 + 1;
        indices[gid * 6 + 5] = gid * 4 + 1;
    }
}

/**
* In this setting, we assume pixels are triangulated with same direction with mirrored direction.
* Each pixel has 1 quads, 4 vertices and 6 indices.
*/
ivec3 triangleIDs[4] = ivec3[](
  ivec3(0, 1, 2),
  ivec3(2, 1, 3),
  ivec3(0, 1, 3),
  ivec3(0, 3, 2)
);

void geo_setting_4_reconstruct() {
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    const uint gid = pixel.x + pixel.y * resolution.x;
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    const int directionID = (pixel.x + pixel.y) % 2;

    // The depth value of the pixel:
    const float z = texelFetch(hi_z, pixel, 0).r;
    const bool is_valid = (z < 1.0) ? true : false;
    // The position of the pixel in world space:
    const vec3 posInWS_0 = is_valid ? SS2WS(pixel + vec2(0.5, 0.5), z) : vec3(0.0);
    // Fetch right pixel
    const bool is_valid_right = (pixel.x + 1 < resolution.x) ? true : false;
    const float z_right = is_valid_right ? texelFetch(hi_z, pixel + ivec2(1, 0), 0).r : 0.0;
    const vec3 posInWS_1 = is_valid_right ? SS2WS(pixel + vec2(1.5, 0.5), z_right) : posInWS_0;
    // Fetch bottom pixel
    const bool is_valid_down = (pixel.y + 1 < resolution.y) ? true : false;
    const float z_down = is_valid_down ? texelFetch(hi_z, pixel + ivec2(0, 1), 0).r : 0.0;
    const vec3 posInWS_2 = is_valid_down ? SS2WS(pixel + vec2(0.5, 1.5), z_down) : posInWS_0;
    // Fetch right-bottom pixel
    const bool is_valid_rd = (pixel.x + 1 < resolution.x && pixel.y + 1 < resolution.y) ? true : false;
    const float z_rd = is_valid_rd ? texelFetch(hi_z, pixel + ivec2(1, 1), 0).r : 0.0;
    const vec3 posInWS_3 = is_valid_rd ? SS2WS(pixel + vec2(1.5, 1.5), z_rd) : posInWS_0;

    // mapping texture space to world space
    positions[gid * 4 + 0] = posInWS_0;
    positions[gid * 4 + 1] = posInWS_1;
    positions[gid * 4 + 2] = posInWS_2;
    positions[gid * 4 + 3] = posInWS_3;

    // write indices buffer
    indices[gid * 6 + 0] = gid * 4 + triangleIDs[directionID*2 + 0][0];
    indices[gid * 6 + 1] = gid * 4 + triangleIDs[directionID*2 + 0][1];
    indices[gid * 6 + 2] = gid * 4 + triangleIDs[directionID*2 + 0][2];
    indices[gid * 6 + 3] = gid * 4 + triangleIDs[directionID*2 + 1][0];
    indices[gid * 6 + 4] = gid * 4 + triangleIDs[directionID*2 + 1][1];
    indices[gid * 6 + 5] = gid * 4 + triangleIDs[directionID*2 + 1][2];
}

void main() {
    if (pushConstants.geoType == 0)
        geo_setting_1_reconstruct();
    else if (pushConstants.geoType == 1)
        geo_setting_2_reconstruct();
    else if (pushConstants.geoType == 2)
        geo_setting_3_reconstruct();
    else if (pushConstants.geoType == 3)
        geo_setting_4_reconstruct();
}