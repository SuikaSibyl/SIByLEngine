#version 460
#extension GL_GOOGLE_include_directive : enable

struct PushConstants { 
    uvec2 resolution;
    uint sample_batch; 
};
layout(push_constant) uniform PushConsts { PushConstants pushConstants; };

#include "../../../Utility/random.h"
#include "../../../Utility/sampling.h"

#include "../include/common_trace.h"
#include "../include/common_rgen.h"

#include "../../include/plugins/material/lambertian_common.h"

layout(binding = 0, set = 2, r32f)              uniform  image2D u_ViewDepth;      //
layout(binding = 1, set = 2, r11f_g11f_b10f)    uniform  image2D u_DiffuseAlbedo;  // R11G11B10_UFLOAT
layout(binding = 2, set = 2, rgba8_snorm)       uniform  image2D u_SpecularRough;  // R8G8B8A8_Gamma_UFLOAT
layout(binding = 3, set = 2, r32ui)             uniform uimage2D u_Normals;
layout(binding = 4, set = 2, r32ui)             uniform uimage2D u_GeoNormals;
layout(binding = 5, set = 2, rgba16f)           uniform  image2D u_Emissive;
layout(binding = 6, set = 2, rg16f)             uniform  image2D u_MotionVectors;
layout(binding = 7, set = 2, r32f)              uniform  image2D u_DeviceDepth;

void main() {
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    uint RNG = InitRNG(pixel, pushConstants.sample_batch);

    Ray primaryRay = generateRay(
        pixel,
        resolution,
        false
    );

    // const vec3 direction = pushConstants.direction;

    // const vec2 uv = (vec2(pixel) + vec2(0.5)) / vec2(resolution);
    // const vec3 wsPos = CS2WS(uv);
    
    // uint RNG = InitRNG(pixel, pushConstants.sample_batch);

    // Ray ray = Ray(wsPos - direction * 1000.0f, 0, direction, k_inf);

    // // primary intersection
    // SurfaceIntersection vertex;
    // const bool intersected = intersectEX(ray, vertex, RNG);   // TODO :: ray differential
    // const vec3 albedo = intersected 
    //     ? texture(textures[lambertian_materials[vertex.matID].basecolor_opacity_tex], vertex.uv).rgb 
    //     : vec3(0.0f);
    // const float lum = max(albedo.x, max(albedo.y, albedo.z));
    
    // const vec3 normal = intersected ? vertex.geometric_normal : vec3(0.0f);

    // const vec3 aabbMin = intersected ? vertex.position : vec3(+k_inf);
    // const vec3 aabbMax = intersected ? vertex.position : vec3(-k_inf);

    // // For orthogonal camera, the pixel area is the same for all pixels
    // // but we still cares about normals which compress the pixel area    
    // const float pixelAreaCompensation = intersected 
    //     ? min(1. / abs(dot(direction, normal)), 5.)
    //     : 1.;

    // imageStore(pixImpImage, pixel, vec4(lum));
    // imageStore(normalConeImage, pixel, vec4(normal, 0));
    // imageStore(aabbXYImage, pixel, vec4(aabbMin.xy, aabbMax.xy));
    // imageStore(aabbzImage, pixel, vec4(aabbMin.z, aabbMax.z,0,0));
}
// // #include "GBufferHelpers.hlsli"
// // #include "SceneGeometry.hlsli"
// // #include "ShaderParameters.h"

// ConstantBuffer<GBufferConstants> g_Const : register(b0);
// VK_PUSH_CONSTANT ConstantBuffer<PerPassConstants> g_PerPassConstants : register(b1);

// RWTexture2D<float> u_ViewDepth : register(u0);
// RWTexture2D<uint> u_DiffuseAlbedo : register(u1);
// RWTexture2D<uint> u_SpecularRough : register(u2);
// RWTexture2D<uint> u_Normals : register(u3);
// RWTexture2D<uint> u_GeoNormals : register(u4);
// RWTexture2D<float4> u_Emissive : register(u5);
// RWTexture2D<float4> u_MotionVectors : register(u6);
// RWTexture2D<float> u_DeviceDepth : register(u7);
// RWBuffer<uint> u_RayCountBuffer : register(u8);

// RaytracingAccelerationStructure SceneBVH : register(t0);
// StructuredBuffer<InstanceData> t_InstanceData : register(t1);
// StructuredBuffer<GeometryData> t_GeometryData : register(t2);
// StructuredBuffer<MaterialConstants> t_MaterialConstants : register(t3);

// SamplerState s_MaterialSampler : register(s0);

// void shadeSurface(
//     uint2 pixelPosition, 
//     uint instanceIndex,
//     uint geometryIndex,
//     uint primitiveIndex, 
//     float2 rayBarycentrics, 
//     float3 viewDirection, 
//     float maxGlassHitT)
// {
//     GeometrySample gs = getGeometryFromHit(instanceIndex, geometryIndex, primitiveIndex, rayBarycentrics, 
//         GeomAttr_All, t_InstanceData, t_GeometryData, t_MaterialConstants);
    
//     RayDesc ray_0 = setupPrimaryRay(pixelPosition, g_Const.view);
//     RayDesc ray_x = setupPrimaryRay(pixelPosition + uint2(1, 0), g_Const.view);
//     RayDesc ray_y = setupPrimaryRay(pixelPosition + uint2(0, 1), g_Const.view);
//     float3 worldSpacePositions[3];
//     worldSpacePositions[0] = mul(gs.instance.transform, float4(gs.vertexPositions[0], 1.0)).xyz;
//     worldSpacePositions[1] = mul(gs.instance.transform, float4(gs.vertexPositions[1], 1.0)).xyz;
//     worldSpacePositions[2] = mul(gs.instance.transform, float4(gs.vertexPositions[2], 1.0)).xyz;
//     float3 bary_0 = computeRayIntersectionBarycentrics(worldSpacePositions, ray_0.Origin, ray_0.Direction);
//     float3 bary_x = computeRayIntersectionBarycentrics(worldSpacePositions, ray_x.Origin, ray_x.Direction);
//     float3 bary_y = computeRayIntersectionBarycentrics(worldSpacePositions, ray_y.Origin, ray_y.Direction);
//     float2 texcoord_0 = interpolate(gs.vertexTexcoords, bary_0);
//     float2 texcoord_x = interpolate(gs.vertexTexcoords, bary_x);
//     float2 texcoord_y = interpolate(gs.vertexTexcoords, bary_y);
//     float2 texGrad_x = texcoord_x - texcoord_0;
//     float2 texGrad_y = texcoord_y - texcoord_0;

//     texGrad_x *= g_Const.textureGradientScale;
//     texGrad_y *= g_Const.textureGradientScale;

//     if (dot(gs.geometryNormal, viewDirection) > 0)
//         gs.geometryNormal = -gs.geometryNormal;

//     MaterialSample ms = sampleGeometryMaterial(gs, texGrad_x, texGrad_y, -1, MatAttr_All, 
//         s_MaterialSampler, g_Const.normalMapScale);

//     ms.shadingNormal = getBentNormal(gs.flatNormal, ms.shadingNormal, viewDirection);

//     if (g_Const.roughnessOverride >= 0)
//         ms.roughness = g_Const.roughnessOverride;

//     if (g_Const.metalnessOverride >= 0)
//     {
//         ms.metalness = g_Const.metalnessOverride;
//         getReflectivity(ms.metalness, ms.baseColor, ms.diffuseAlbedo, ms.specularF0);
//     }

//     float clipDepth = 0;
//     float viewDepth = 0;
//     float3 motion = getMotionVector(g_Const.view, g_Const.viewPrev, 
//         gs.instance, gs.objectSpacePosition, gs.prevObjectSpacePosition, clipDepth, viewDepth);

//     u_ViewDepth[pixelPosition] = viewDepth;
//     u_DeviceDepth[pixelPosition] = clipDepth;
//     u_DiffuseAlbedo[pixelPosition] = Pack_R11G11B10_UFLOAT(ms.diffuseAlbedo);
//     u_SpecularRough[pixelPosition] = Pack_R8G8B8A8_Gamma_UFLOAT(float4(ms.specularF0, ms.roughness));
//     u_Normals[pixelPosition] = ndirToOctUnorm32(ms.shadingNormal);
//     u_GeoNormals[pixelPosition] = ndirToOctUnorm32(gs.flatNormal);
//     u_Emissive[pixelPosition] = float4(ms.emissiveColor, maxGlassHitT);
//     u_MotionVectors[pixelPosition] = float4(motion, 0);
    
//     if (all(g_Const.materialReadbackPosition == int2(pixelPosition)))
//     {
//         u_RayCountBuffer[g_Const.materialReadbackBufferIndex] = gs.geometry.materialIndex + 1;
//     }
// }

// int evaluateNonOpaqueMaterials(uint instanceID, uint geometryIndex, uint primitiveIndex, float2 rayBarycentrics)
// {
//     GeometrySample gs = getGeometryFromHit(instanceID, geometryIndex, primitiveIndex, rayBarycentrics, 
//         GeomAttr_TexCoord, t_InstanceData, t_GeometryData, t_MaterialConstants);
    
//     MaterialSample ms = sampleGeometryMaterial(gs, 0, 0, 0, MatAttr_BaseColor | MatAttr_Transmission, 
//         s_MaterialSampler, g_Const.normalMapScale);

//     bool alphaMask = ms.opacity >= gs.material.alphaCutoff;

//     if (gs.material.domain == MaterialDomain_AlphaTested && alphaMask)
//         return MaterialDomain_Opaque;

//     if (gs.material.domain == MaterialDomain_AlphaBlended && ms.opacity >= 0.5)
//         return MaterialDomain_Opaque; // no support for blending
    
//     if (gs.material.domain == MaterialDomain_Transmissive ||
//         (gs.material.domain == MaterialDomain_TransmissiveAlphaTested && alphaMask) ||
//         gs.material.domain == MaterialDomain_TransmissiveAlphaBlended)
//     {
//         float throughput = ms.transmission;

//         if ((gs.material.flags & MaterialFlags_UseSpecularGlossModel) == 0)
//             throughput *= (1.0 - ms.metalness) * max(ms.baseColor.r, max(ms.baseColor.g, ms.baseColor.b));

//         if (gs.material.domain == MaterialDomain_TransmissiveAlphaBlended)
//             throughput *= (1.0 - ms.opacity);

//         if (throughput == 0)
//             return MaterialDomain_Opaque;
//     }

//     return gs.material.domain;
// }

// struct RayPayload
// {
//     float minGlassRayT;
//     float committedRayT;
//     uint instanceID;
//     uint geometryIndex;
//     uint primitiveIndex;
//     float2 barycentrics;
// };

// bool anyHitLogic(inout RayPayload payload, uint instanceID, uint geometryIndex, uint primitiveIndex, float2 rayBarycentrics, float rayT)
// {
//     int evaluatedMaterialDomain = evaluateNonOpaqueMaterials(instanceID, geometryIndex, primitiveIndex, rayBarycentrics);

//     if (evaluatedMaterialDomain == MaterialDomain_Transmissive || 
//         evaluatedMaterialDomain == MaterialDomain_TransmissiveAlphaTested || 
//         evaluatedMaterialDomain == MaterialDomain_TransmissiveAlphaBlended)
//     {
//         payload.minGlassRayT = min(payload.minGlassRayT, rayT);
//     }
//     else if(evaluatedMaterialDomain == MaterialDomain_Opaque)
//     {
//         return true;
//     }

//     return false;
// }

// #if !USE_RAY_QUERY
// struct Attributes 
// {
//     float2 uv;
// };

// [shader("miss")]
// void Miss(inout RayPayload payload : SV_RayPayload)
// {
// }

// [shader("closesthit")]
// void ClosestHit(inout RayPayload payload : SV_RayPayload, in Attributes attrib : SV_IntersectionAttributes)
// {
//     payload.committedRayT = RayTCurrent();
//     payload.instanceID = InstanceID();
//     payload.geometryIndex = GeometryIndex();
//     payload.primitiveIndex = PrimitiveIndex();
//     payload.barycentrics = attrib.uv;
// }

// [shader("anyhit")]
// void AnyHit(inout RayPayload payload : SV_RayPayload, in Attributes attrib : SV_IntersectionAttributes)
// {
//     if (!anyHitLogic(payload, InstanceID(), GeometryIndex(), PrimitiveIndex(), attrib.uv, RayTCurrent()))
//         IgnoreHit();
// }
// #endif

// [shader("raygeneration")]
// void RayGen() {
//     if (any(float2(pixelPosition) >= g_Const.view.viewportSize))
//         return;

//     RayDesc ray = setupPrimaryRay(pixelPosition, g_Const.view);

//     uint instanceMask = INSTANCE_MASK_OPAQUE;
//     uint rayFlags = RAY_FLAG_NONE;

//     if (g_Const.enableAlphaTestedGeometry)
//         instanceMask |= INSTANCE_MASK_ALPHA_TESTED;

//     if (g_Const.enableTransparentGeometry)
//         instanceMask |= INSTANCE_MASK_TRANSPARENT;

//     if (!g_Const.enableTransparentGeometry && !g_Const.enableAlphaTestedGeometry)
//         rayFlags |= RAY_FLAG_CULL_NON_OPAQUE;

//     RayPayload payload;
//     payload.minGlassRayT = ray.TMax + 1.0;
//     payload.committedRayT = 0;
//     payload.instanceID = ~0u;
//     payload.primitiveIndex = 0;
//     payload.barycentrics = 0;

// #if USE_RAY_QUERY
//     RayQuery<RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES> rayQuery;

//     rayQuery.TraceRayInline(SceneBVH, rayFlags, instanceMask, ray);

//     while (rayQuery.Proceed())
//     {
//         if (rayQuery.CandidateType() == CANDIDATE_NON_OPAQUE_TRIANGLE)
//         {
//             if (anyHitLogic(payload,
//                             rayQuery.CandidateInstanceID(),
//                             rayQuery.CandidateGeometryIndex(),
//                             rayQuery.CandidatePrimitiveIndex(),
//                             rayQuery.CandidateTriangleBarycentrics(),
//                             rayQuery.CandidateTriangleRayT()))
//             {
//                 rayQuery.CommitNonOpaqueTriangleHit();
//             }
//         }
//     }

//     if (rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT)
//     {
//         payload.instanceID = rayQuery.CommittedInstanceID();
//         payload.geometryIndex = rayQuery.CommittedGeometryIndex();
//         payload.primitiveIndex = rayQuery.CommittedPrimitiveIndex();
//         payload.barycentrics = rayQuery.CommittedTriangleBarycentrics();
//         payload.committedRayT = rayQuery.CommittedRayT();
//     }
// #else
//     TraceRay(SceneBVH, rayFlags, instanceMask, 0, 0, 0, ray, payload);
// #endif

//     REPORT_RAY(payload.instanceID != ~0u);

//     const float hitT = payload.committedRayT;
//     const bool hasGlass = payload.minGlassRayT < hitT;
//     const float maxGlassHitT = hasGlass ? hitT : 0;

//     if (payload.instanceID != ~0u)
//     {
//         shadeSurface(
//             pixelPosition,
//             payload.instanceID,
//             payload.geometryIndex,
//             payload.primitiveIndex,
//             payload.barycentrics,
//             ray.Direction,
//             maxGlassHitT);

//         return;
//     }

//     u_ViewDepth[pixelPosition] = BACKGROUND_DEPTH;
//     u_DeviceDepth[pixelPosition] = 0;
//     u_DiffuseAlbedo[pixelPosition] = 0;
//     u_SpecularRough[pixelPosition] = 0;
//     u_Normals[pixelPosition] = 0;
//     u_GeoNormals[pixelPosition] = 0;
//     u_Emissive[pixelPosition] = float4(0, 0, 0, maxGlassHitT);
//     u_MotionVectors[pixelPosition] = 0;
// }