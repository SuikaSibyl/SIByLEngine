#version 460 core
#extension GL_EXT_ray_tracing           : enable
#extension GL_GOOGLE_include_directive  : enable

#include "../../include/common_trace.h"
#include "../../../include/plugins/material/lambertian_common.h"
#include "../../../include/common/common_microfacet.h"
#include "../../../../Utility/math.h"
#include "../../../../Utility/geometry.h"
#include "../../../../Utility/sampling.h"

layout(location = CALLABLE_LOC_BSDF_SAMPLE) callableDataInEXT BSDFSampleQuery cBSDFSampleQuery;

void main()
{
    const float bsdf_eta = 1.2;  // TODO :: MOVE TO PARAM
    float roughness = 0.1;

    // Load dir in/out for simplicity
    const vec3 dir_in  = cBSDFSampleQuery.dir_in;
    const vec3 dir_out = cBSDFSampleQuery.dir_out;
    const vec3 unflipped_ng = cBSDFSampleQuery.geometric_normal * cBSDFSampleQuery.hitFrontface;
    
    // Flip the shading frame if it is inconsistent with the geometry normal
    mat3 frame = cBSDFSampleQuery.frame;
    if (dot(frame[2], dir_in) * dot(unflipped_ng, dir_in) < 0) {
        frame = -frame;
    }
    // If we are going into the surface, then we use normal eta
    // (internal/external), otherwise we use external/internal.
    const float eta = dot(unflipped_ng, dir_in) > 0 ? bsdf_eta : 1. / bsdf_eta;

    // Clamp roughness to avoid numerical issues.
    roughness = clamp(roughness, 0.01, 1);
    // Sample a micro normal and transform it to world space -- this is our half-vector.
    const float alpha = roughness * roughness;
    const vec3 local_dir_in = to_local(frame, dir_in);
    const vec3 local_micro_normal =
        sample_visible_normals(local_dir_in, alpha, cBSDFSampleQuery.rnd_uv);

    vec3 half_vector = frame * local_micro_normal;
    // Flip half-vector if it's below surface
    if (dot(half_vector, frame[2]) < 0) {
        half_vector = -half_vector;
    }

    // Now we need to decide whether to reflect or refract.
    // We do this using the Fresnel term.
    const float h_dot_in = dot(half_vector, dir_in);
    const float F = fresnel_dielectric(h_dot_in, eta);

    if (cBSDFSampleQuery.rnd_w <= F) {
        // Reflection
        vec3 reflected = normalize(-dir_in + 2 * dot(dir_in, half_vector) * half_vector);
        // set eta to 0 since we are not transmitting
        cBSDFSampleQuery.dir_out = reflected;
    } else {
        // Refraction
        // https://en.wikipedia.org/wiki/Snell%27s_law#Vector_form
        // (note that our eta is eta2 / eta1, and l = -dir_in)
        float h_dot_out_sq = 1 - (1 - h_dot_in * h_dot_in) / (eta * eta);
        if (h_dot_out_sq <= 0) {
            // Total internal reflection
            // This shouldn't really happen, as F will be 1 in this case.
            return;
        }
        // flip half_vector if needed
        if (h_dot_in < 0) {
            half_vector = -half_vector;
        }
        float h_dot_out= sqrt(h_dot_out_sq);
        vec3 refracted = -dir_in / eta + (abs(h_dot_in) / eta - h_dot_out) * half_vector;
        cBSDFSampleQuery.dir_out = refracted;
    }
}