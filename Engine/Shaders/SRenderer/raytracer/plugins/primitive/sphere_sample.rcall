#version 460 core
#extension GL_EXT_ray_tracing           : enable
#extension GL_GOOGLE_include_directive  : enable

#include "../../include/common_trace.h"
#include "../../../../Utility/math.h"
#include "../../../../Utility/sampling.h"
#include "../../../../Utility/geometry.h"

layout(location = 0) callableDataInEXT ShapeSampleQuery cSampleQuery;

/**
* Sample a point on a sphere light.
* @ref: https://www.pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Sampling_Light_Sources#x2-SamplingSpheres
*/
void main()
{
    const uint geometryID = cSampleQuery.geometry_id;
    const GeometryInfo geometryInfo = geometryInfos[geometryID];
    const mat4 o2w = ObjectToWorld(geometryInfo);
    const vec3  center = (o2w * vec4(0,0,0,1)).xyz;
    const float r = length((o2w * vec4(1,0,0,1)).xyz - center);
    // If the reference point is inside the sphere, just sample the whole sphere uniformly
    if (distance_squared(cSampleQuery.ref_point, center) < r * r) {
        float z = 1 - 2 * cSampleQuery.uv.x;
        float r_ = sqrt(max(0., 1 - z * z));
        float phi = 2 * k_pi * cSampleQuery.uv.y;
        vec3 offset = normalize(vec3(r_ * cos(phi), r_ * sin(phi), z));
        cSampleQuery.position = center + r * offset;
        cSampleQuery.normal = -offset;
        return;
    }
    // Otherwise sample a ray inside a cone towards the sphere center.
    // Build a coordinate system with n pointing towards the sphere
    vec3 dir_to_center = normalize(center - cSampleQuery.ref_point);
    mat3 frame = createONB(dir_to_center);
    float sin_theta_max_sq = r * r / distance_squared(cSampleQuery.ref_point, center);
    float cos_theta_max = sqrt(max(0.f, 1 - sin_theta_max_sq));
    vec3 n_on_sphere;
    if(cos_theta_max > 0.999999) {
        n_on_sphere = - normalize(frame * cosineSampleHemisphere(cSampleQuery.uv));
    }
    else {
        // Uniformly interpolate between 1 (angle 0) and max
        float cos_theta = (1 - cSampleQuery.uv[0]) + cSampleQuery.uv[0] * cos_theta_max;
        float sin_theta = sqrt(max(0.f, 1 - cos_theta * cos_theta));
        float phi = cSampleQuery.uv[1] * 2 * k_pi;
        // Compute angle from center of sphere to sampled point on surface
        float dc = distance(cSampleQuery.ref_point, center);
        float ds = dc * cos_theta - sqrt(max(0.f, r * r - dc * dc * sin_theta * sin_theta));
        float cos_alpha = (dc * dc + r * r - ds * ds) / (2 * dc * r);
        float sin_alpha = sqrt(max(0.f, 1 - cos_alpha * cos_alpha));
        // get the normal of the sample
        n_on_sphere = - normalize(frame * vec3(sin_alpha * cos(phi), sin_alpha * sin(phi), cos_alpha));
    }
    // Compute surface normal and sampled point on sphere
    // Add negative sign since normals point outwards
    vec3 p_on_sphere = r * n_on_sphere + center;
    cSampleQuery.position = p_on_sphere;
    cSampleQuery.normal = n_on_sphere;
    return;
}