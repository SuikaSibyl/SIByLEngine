#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

struct PushConstants { 
    uvec2 resolution;
    uint sample_batch; 
};
layout(push_constant) uniform PushConsts { PushConstants pushConstants; };

layout(binding = 1, set = 1, rgba32f) uniform image2D storageImage;
layout(binding = 0, set = 2, r32i) volatile coherent uniform  iimage2D atomicMutex;

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

void main()
{
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    ivec2 newpixel = pixel / 4;

    bool keepWaiting = true;
    while(keepWaiting) {
        if(imageAtomicCompSwap(atomicMutex, newpixel, 0, 1) == 0) {
            // insert(...);
            imageStore(storageImage, newpixel, vec4(vec2(pixel)/vec2(resolution), 0.0, 1.0));
            // memoryBarrier();
            imageAtomicExchange(atomicMutex, newpixel, 0);
            keepWaiting = false;
        }
    }
}