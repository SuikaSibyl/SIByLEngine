#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float: enable


struct PushConstants { 
    uvec2 resolution;
    uint sample_batch; 
};
layout(push_constant) uniform PushConsts { PushConstants pushConstants; };

#include "bdpt_common.h"
#include "bdpt_descriptor_set.h"
#include "../include/common_splat_film.h"

vec3 bidirectional_path_tracing(
    in Ray ray,
    inout uint RNG
) {
    vec3 radiance = vec3(0.);
    
    return radiance;
}

void oneStrategy(
    in BDPTPath cameraSubpath,
    in BDPTPath lightSubpath,
    in const int s,
    in const int t,
    in const int nLight,
    in const int nCamera,
    inout vec3 L,
    inout uint RNG,
    in const ivec2 resolution
) {
    if(t>nCamera || s>nLight) return;

    // Execute the  connection strategy and update L
    vec2 newuv;
    float misWeight = 0.f;
    vec4 rnds = vec4(stepAndOutputRNGFloat(RNG),stepAndOutputRNGFloat(RNG),stepAndOutputRNGFloat(RNG),stepAndOutputRNGFloat(RNG));
    vec3 Lpath = connectBDPT(lightSubpath, cameraSubpath, s, t, newuv, misWeight, rnds, resolution);
    ivec2 newpixel = uv2pixel(newuv, resolution);
    if (t != 1)
        L += Lpath;
    else
        if(insideExclusive(newpixel, resolution))
            addSplat(newpixel, vec4(Lpath, 1));

}

void oneDepth(
    inout BDPTPath cameraSubpath,
    inout BDPTPath lightSubpath,
    in const int depth,
    in const int nLight,
    in const int nCamera,
    inout vec3 L,
    inout uint RNG,
    in const ivec2 resolution
) {
    for(int i=0; i<depth; ++i)
        oneStrategy(cameraSubpath, lightSubpath, i, depth-1, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 1, depth-1, nLight, nCamera, L, RNG, resolution);
}

void main() {
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    uint RNG = uint((pushConstants.sample_batch * resolution.y + pixel.y) * resolution.x + pixel.x);

    // Generate a single sample using BDPT.
    // ******************************************
    // 0. Config
    const int maxDepth = 3;
    // 1. Trace the camera and light subpaths
    BDPTPath cameraSubpath;
    BDPTPath lightSubpath;
    // One more vertex than the maximum path length must be allocated
    // to store the starting vertex on the light or camera.
    // Camera subpaths get yet again one more vertex, which allows camera paths to randomly intersect light sources.
    const int nCamera = generateCameraSubpath(maxDepth+2, pixel, resolution, cameraSubpath, RNG);
    const int nLight  = generateLightSubpath(maxDepth+1, lightSubpath, RNG);

    // 2. Execute all BDPT connection strategies
    vec3 L = vec3(0.f);

    // oneStrategy(cameraSubpath, lightSubpath, 0, 2, nLight, nCamera, L, RNG, resolution);
    // oneDepth(cameraSubpath, lightSubpath, 3, nLight, nCamera, L, RNG, resolution);
    // oneDepth(cameraSubpath, lightSubpath, 4, nLight, nCamera, L, RNG, resolution);
    // oneDepth(cameraSubpath, lightSubpath, 5, nLight, nCamera, L, RNG, resolution);
    // oneDepth(cameraSubpath, lightSubpath, 6, nLight, nCamera, L, RNG, resolution);
    // oneDepth(cameraSubpath, lightSubpath, 7, nLight, nCamera, L, RNG, resolution);
    // oneDepth(cameraSubpath, lightSubpath, 8, nLight, nCamera, L, RNG, resolution);
    // oneDepth(cameraSubpath, lightSubpath, 9, nLight, nCamera, L, RNG, resolution);

    oneStrategy(cameraSubpath, lightSubpath, 0, 2, nLight, nCamera, L, RNG, resolution);
    
    oneStrategy(cameraSubpath, lightSubpath, 0, 3, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 1, 2, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 2, 1, nLight, nCamera, L, RNG, resolution);

    oneStrategy(cameraSubpath, lightSubpath, 0, 4, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 1, 3, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 2, 2, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 3, 1, nLight, nCamera, L, RNG, resolution);

    oneStrategy(cameraSubpath, lightSubpath, 0, 5, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 1, 4, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 2, 3, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 3, 2, nLight, nCamera, L, RNG, resolution);
    oneStrategy(cameraSubpath, lightSubpath, 4, 1, nLight, nCamera, L, RNG, resolution);
    
    // oneStrategy(cameraSubpath, lightSubpath, 0, 6, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 1, 5, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 2, 4, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 3, 3, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 4, 2, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 5, 1, nLight, nCamera, L, RNG, resolution);
    
    // oneStrategy(cameraSubpath, lightSubpath, 0, 7, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 1, 6, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 2, 5, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 3, 4, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 4, 3, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 5, 2, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 6, 1, nLight, nCamera, L, RNG, resolution);

    // oneStrategy(cameraSubpath, lightSubpath, 0, 8, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 1, 7, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 2, 6, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 3, 5, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 4, 4, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 5, 3, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 6, 2, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 7, 1, nLight, nCamera, L, RNG, resolution);

    // oneStrategy(cameraSubpath, lightSubpath, 0, 9, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 1, 8, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 2, 7, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 3, 6, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 4, 5, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 5, 4, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 6, 3, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 7, 2, nLight, nCamera, L, RNG, resolution);
    // oneStrategy(cameraSubpath, lightSubpath, 8, 1, nLight, nCamera, L, RNG, resolution);

    addSplat(pixel, vec4(L, 1));
}