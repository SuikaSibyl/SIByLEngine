#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

struct PushConstants { 
    uvec2 resolution;
    uint sample_batch; 
};
layout(push_constant) uniform PushConsts { PushConstants pushConstants; };

layout(binding = 1, set = 1, rgba32f) uniform image2D storageImage;
layout(binding = 1, set = 2, r32f) coherent uniform image2DArray atomicRGB;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    float r = imageLoad(atomicRGB, ivec3(pixel, 0)).x;
    float g = imageLoad(atomicRGB, ivec3(pixel, 1)).x;
    float b = imageLoad(atomicRGB, ivec3(pixel, 2)).x;
    float a = imageLoad(atomicRGB, ivec3(pixel, 3)).x;

    vec3 pixelColor = a == 0? vec3(0) : vec3(r,g,b);

    if(pushConstants.sample_batch != 0) {
        vec3 color = imageLoad(storageImage, ivec2(pixel)).rgb;
        pixelColor = (pushConstants.sample_batch * color + pixelColor) / (pushConstants.sample_batch + 1);
    }
    imageStore(storageImage, pixel, vec4(pixelColor, 1.0));
}