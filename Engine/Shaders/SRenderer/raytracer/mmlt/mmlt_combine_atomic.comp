#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "mmlt_config.h"

struct PushConstants { 
    uvec2 resolution;
    uint sample_batch;
    uint timestamp; 
};
layout(push_constant) uniform PushConsts { PushConstants pushConstants; };

layout(binding = 1, set = 1, rgba32f) uniform image2D storageImage;
layout(binding = 1, set = 2, r32f) coherent uniform image2DArray atomicRGB;
layout(binding = 6, set = 2) uniform sampler2D boostrapImportMIP;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }
    
    float b_val = texelFetch(boostrapImportMIP, ivec2(0), maximum_lod).x;
    b_val /= float(boostrap_buffer_size * boostrap_buffer_size);
    // b_val *= possible_depth_num;
    b_val *= 1;

    float r = imageLoad(atomicRGB, ivec3(pixel, 0)).x;
    float g = imageLoad(atomicRGB, ivec3(pixel, 1)).x;
    float b = imageLoad(atomicRGB, ivec3(pixel, 2)).x;
    float a = imageLoad(atomicRGB, ivec3(pixel, 3)).x;

    uint accum_pass = pushConstants.sample_batch - possible_depth_num;
    vec3 pixelColor = vec3(0);
    
    float mutationsPerPixel = float(accum_pass) * float(metroplis_buffer_width * metroplis_buffer_height) / float(resolution.x * resolution.y);

    // if(a != 0)
        // pixelColor = vec3(r,g,b);
    if(accum_pass > 0)
        pixelColor = vec3(r,g,b) * b_val / mutationsPerPixel;

    imageStore(storageImage, pixel, vec4(pixelColor, 1.0));
}