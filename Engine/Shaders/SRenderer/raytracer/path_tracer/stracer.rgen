#version 460
#extension GL_GOOGLE_include_directive : enable

struct PushConstants { 
    uvec2 resolution;
    uint sample_batch; 
};
layout(push_constant) uniform PushConsts { PushConstants pushConstants; };

#include "../include/common_trace.h"

layout(location = 0) rayPayloadEXT PrimaryPayload primaryPld;

struct Ray {
    vec3    origin;
    float   tnear;
    vec3    direction;
    float   tfar;
};

vec3 skyColor(in vec3 rayDir) {
    const float t = 0.5 * (rayDir.y + 1.0);
    return (1.0-t)*vec3(1.0) + t*vec3(0.5, 0.7, 1.0);
}

vec3 unidirectional_path_tracing(in Ray ray) {
    // primary intersection
    traceRayEXT(tlas,                  // Top-level acceleration structure
                gl_RayFlagsOpaqueEXT,  // Ray flags, here saying "treat all geometry as opaque"
                0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                0,                     // SBT record offset
                0,                     // SBT record stride for offset
                0,                     // Miss index
                ray.origin,            // Ray origin
                ray.tnear,             // Minimum t-value
                ray.direction,         // Ray direction
                ray.tfar,              // Maximum t-value
                0);                    // Location of payload

    bool intersected = getIntersected(primaryPld.flags);
    if(!intersected) {
        // TODO:: add background / env map
        return skyColor(ray.direction);
        // return vec3(0,0,0);
    }

    vec3 radiance = vec3(0);
    vec3 current_path_throughput = vec3(1);
    // eta_scale stores the scale introduced by Snell-Descartes law to the BSDF (eta^2).
    // We use the same Russian roulette strategy as Mitsuba/pbrt-v3
    // and tracking eta_scale and removing it from the
    // path contribution is crucial for many bounces of refraction.
    float eta_scale = 1.f;
    // We hit a light immediately. 
    // This path has only two vertices and has contribution
    // C = W(v0, v1) * G(v0, v1) * L(v0, v1)
    // if (is_light(scene.shapes[vertex.shape_id])) {
    //     radiance += current_path_throughput *
    //         emission(vertex, -ray.dir, scene);
    // }

    
    // We iteratively sum up path contributions from paths with different number of vertices
    // If max_depth == -1, we rely on Russian roulette for path termination.
    for (int num_vertices = 3; MAX_DEPTH == -1 || num_vertices <= MAX_DEPTH + 1; ++num_vertices) {
        // Remember "current_path_throughput" already stores all the path contribution on and before v_i.
        // So we only need to compute G(v_{i}, v_{i+1}) * f(v_{i-1}, v_{i}, v_{i+1}) * L(v_{i}, v_{i+1})
        {
        }
    }

    return primaryPld.baseColor;
}

void main() {
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }
    
    // As we only use 1spp, no random offset.
    const vec2 pixelCenter  = vec2(pixel.xy) + vec2(0.5);
    const vec2 inUV         = pixelCenter/vec2(resolution.xy);
    const vec2 d            = inUV * 2.0 - 1.0;

    const float focus_dist = 0.0f;
    const float length_radius = 0.;
    const vec3 targetOnFocusPlane = (globalUniform.projInverse * vec4(d.x, d.y, 1, 1)).xyz;
    const vec2 diskSample = vec2(0);
    // const vec2 diskSample = uniformSampleDisk(vec2(stepAndOutputRNGFloat(pld.rngState), stepAndOutputRNGFloat(pld.rngState)));
    const vec3 sampleOnApeture = vec3(length_radius * diskSample, 0);
    const vec4 origin       = globalUniform.viewInverse * vec4(vec3(0), 1);
    const vec4 direction    = globalUniform.viewInverse * vec4(normalize(targetOnFocusPlane - sampleOnApeture), 0);
 
    primaryPld.rngState = uint((pushConstants.sample_batch * resolution.y + pixel.y) * resolution.x + pixel.x);

    Ray primaryRay;
    primaryRay.origin       = origin.xyz;
    primaryRay.direction    = normalize(direction.xyz);
    primaryRay.tnear        = 0.0;
    primaryRay.tfar         = 10000.0;
    vec3 pixelColor = unidirectional_path_tracing(primaryRay);

    if(pushConstants.sample_batch != 0) {
        vec3 color = imageLoad(storageImage, ivec2(pixel)).rgb;
        pixelColor = (pushConstants.sample_batch * color + pixelColor) / (pushConstants.sample_batch + 1);
    }
    imageStore(storageImage, pixel, vec4(pixelColor, 1.0));
}