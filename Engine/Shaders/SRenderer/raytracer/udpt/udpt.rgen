#version 460
#extension GL_GOOGLE_include_directive : enable

struct PushConstants { 
    uvec2 resolution;
    uint sample_batch; 
};
layout(push_constant) uniform PushConsts { PushConstants pushConstants; };

#include "../../../Utility/random.h"
#include "../../../Utility/sampling.h"

#include "../include/common_trace.h"
#include "../include/common_rgen.h"

#include "../../include/plugins/material/lambertian_common.h"

layout(binding = 0, set = 2, rgba32f) uniform image2D storageImage;

vec3 skyColor(in vec3 rayDir) {
    const float t = 0.5 * (rayDir.y + 1.0);
    return (1.0-t)*vec3(1.0) + t*vec3(0.5, 0.7, 1.0);
}

vec3 unidirectional_path_tracing(in Ray ray, inout uint RNG) {
    // loop carrying variable definition
    // A path's contribution is 
    // C(v) = W(v0, v1) * G(v0, v1) * f(v0, v1, v2) * 
    //                    G(v1, v2) * f(v1, v2, v3) * 
    //                  ........
    //                  * G(v_{n-1}, v_n) * L(v_{n-1}, v_n)
    // where v is the path vertices, W is the sensor response
    // G is the geometry term, f is the BSDF, L is the emission
    vec3 radiance = vec3(0);
    // current_path_throughput stores the ratio between
    // 1) the path contribution from v0 up to v_{i} (the BSDF f(v_{i-1}, v_i, v_{i+1}) is not included), 
    // where i is where the PathVertex "vertex" lies on, and
    // 2) the probability density for computing the path v from v0 up to v_i,
    // so that we can compute the Monte Carlo estimates C/p. 
    vec3 path_throughput = vec3(1);
    // eta_scale stores the scale introduced by Snell-Descartes law to the BSDF (eta^2).
    // We use the same Russian roulette strategy as Mitsuba/pbrt-v3
    // and tracking eta_scale and removing it from the
    // path contribution is crucial for many bounces of refraction.
    float eta_scale = 1.f;

    // primary intersection
    SurfaceIntersection vertex;
    bool intersected = intersect(ray, vertex);   // TODO :: ray differential
    if(!intersected) {
        // TODO:: add background / env map
        // return skyColor(ray.direction);
        return vec3(0,0,0);
    }

    // return radiance;
    
    // We hit a light immediately. 
    // This path has only two vertices and has contribution
    // C = W(v0, v1) * G(v0, v1) * L(v0, v1)
    if (is_light(vertex)) {
        LightSample vertexLight;
        vertexLight.position = vertex.position;
        vertexLight.normal = vertex.lightNormal;
        radiance += path_throughput
                  * emission(vertex.lightID, -ray.direction, 0, vertexLight);
    }

    // // reflection
    // {
    //     vec3 wo = reflect(-vertex.wo, vertex.geometric_normal);
    //     Ray refl_ray = spawnRay(vertex, wo);
    //     SurfaceIntersection refl_vertex;
    //     bool refl_ray_intersected = intersect(refl_ray, refl_vertex);
    //     if(refl_ray_intersected) {
    //         return texture(textures[lambertian_materials[refl_vertex.matID].basecolor_opacity_tex], refl_vertex.uv).rgb;
    //     }
    //     else {
    //         return vec3(0,0,0);
    //     }
    // }

    // return radiance;
    
    // We iteratively sum up path contributions from paths with different number of vertices
    // If max_depth == -1, we rely on Russian roulette for path termination.
    for (int num_vertices = 3; MAX_DEPTH == -1 || num_vertices <= MAX_DEPTH + 1; ++num_vertices) {
        
        // 1.
        // ---------------------------------------------
        // 1.1 Sample a light and a point on the light.
        LightSample lightSample = sampleLight(vertex.position, RNG);
        // 1.2 Compute w1*C1/p1
        vec3 C1 = vec3(0); // stores C1/p1
        float w1;
        {
            // 1.2.1 Compute C1 = G * f * L
            float G = 0;
            
            if(vertex.lightID != lightSample.lightID) {
                // cast shadow ray
                SurfaceIntersection lightIsect;
                lightIsect.position = lightSample.unoffsetPosition;
                lightIsect.geometric_normal = lightSample.normal;
                lightIsect.lightNormal = lightSample.normal;
                lightIsect.lightID = lightSample.lightID;
                vec3 visible = transmittance(vertex, lightIsect);
                // We use different direction for shadow ray and shading.
                // Generally because a point on the light geometry will probabily has unwanted
                // self intersection, a "wrong" shadow ray direction could solve this.
                // But we have to use the true direction for shading
                G = visible.x * max(-dot(lightSample.rayDirection, lightSample.normal), 0.f) /
                    distance_squared(lightSample.unoffsetPosition, vertex.position);
            }
            else {
                // TODO :: envmap case
            }

            // The probability density for light sampling to sample our point is
            // just the probability of sampling a light times the probability of sampling a point
            float p1 = 1 * // TODO :: use light_pmf(scene, light_id) *
                pdf_point_on_light(vertex.position, lightSample);

            // We don't need to continue the computation if G is 0.
            // Also sometimes there can be some numerical issue such that we generate
            // a light path with probability zero
            if (G > 0 && p1 > 0) {
                // Let's compute f (BSDF) next.
                vec3 f = bsdf_eval(vertex, lightSample.rayDirection);
                // Evaluate the emission
                // We set the footprint to zero since it is not fully clear how
                // to set it in this case.
                // One way is to use a roughness based heuristics, but we have multi-layered BRDFs.
                // See "Real-time Shading with Filtered Importance Sampling" from Colbert et al.
                // for the roughness based heuristics.
                vec3 L = emission(lightSample.lightID,
                            -lightSample.rayDirection,
                            0, lightSample);
                C1 = G * f * L;
                
                // Next let's compute w1
                float p2 = bsdf_pdf(vertex, lightSample.rayDirection);

                p2 *= G;

                w1 = (p1*p1) / (p1*p1 + p2*p2);
                C1 /= p1;
            }
        }
        radiance += path_throughput * C1 * w1;

        // 1.2 Sample the hemisphere with bsdf importance
        vec2 bsdf_uv = vec2(stepAndOutputRNGFloat(RNG), stepAndOutputRNGFloat(RNG));
        const vec3 dir_view = -ray.direction;
        vec3 dir_bsdf = bsdf_sample(
            vertex,
            dir_view,
            bsdf_uv,
            stepAndOutputRNGFloat(RNG));
        // TODO :: polymorphic bsdf sampling 
        // TODO :: Update ray differentials & eta_scale
        // if (bsdf_sample.eta == 0) {
        //     ray_diff.spread = reflect(ray_diff, vertex.mean_curvature, bsdf_sample.roughness);
        // } else {
        //     ray_diff.spread = refract(ray_diff, vertex.mean_curvature, bsdf_sample.eta, bsdf_sample.roughness);
        //     eta_scale /= (bsdf_sample.eta * bsdf_sample.eta);
        // }

        float G = 0;

        // Trace a ray towards bsdf_dir. 
        Ray bsdf_ray = spawnRay(vertex, dir_bsdf);
        SurfaceIntersection bsdf_vertex;
        bool bsdf_ray_intersected = intersect(bsdf_ray, bsdf_vertex);
        if(bsdf_ray_intersected) {
            // TEST(?) :: abs(-dot(dir_bsdf, bsdf_vertex.geometric_normal)) / 
            G = abs(-dot(dir_bsdf, bsdf_vertex.geometric_normal)) /
                        distance_squared(bsdf_vertex.position, bsdf_ray.origin);
        }
        else {
            G = 1;
        }
                
        vec3 f = bsdf_eval(vertex, dir_bsdf);
        float p2 = bsdf_pdf(vertex, dir_bsdf);

        if (p2 <= 0) {
            // Numerical issue -- we generated some invalid rays.
            break;
        }
        // Remember to convert p2 to area measure!
        p2 *= G;
        // Now we want to check whether dir_bsdf hit a light source, and
        // account for the light contribution (C2 & w2 & p2).
        // There are two possibilities: either we hit an emissive surface,
        // or we hit an environment map.
        // We will handle them separately.
        if(bsdf_ray_intersected && is_light(bsdf_vertex)) {
            LightSample bsdfHitSample;
            bsdfHitSample.lightID = bsdf_vertex.lightID;
            bsdfHitSample.position = bsdf_vertex.position;
            bsdfHitSample.normal = bsdf_vertex.lightNormal;
            vec3 L = emission(bsdf_vertex.lightID, // TODO:: flexible light ID
                        -dir_bsdf,
                        0, bsdfHitSample);
            vec3 C2 = G * f * L;
            // Next let's compute p1(v2): the probability of the light source sampling
            // directly drawing the point corresponds to bsdf_dir.
            int light_id = 0; // TODO :: flexible light id

            // const Light &light = lights[light_id];
            bsdfHitSample.normal = bsdf_vertex.geometric_normal;
            float p1 = 1. * //light_pmf(scene, light_id) *
                pdf_point_on_light(vertex.position,
                                bsdfHitSample);
            float w2 = (p2*p2) / (p1*p1 + p2*p2);
            // w2 = w2 < 0 ? 0 : w2;
            // w2 = w2 >= 0 ? w2 : 0;
            // if(isnan(p1)) w2 = 0;
            // if(isnan(p2)) w2 = 0;
            // if(isinf(p1)) w2 = 0;
            // if(isinf(p2)) w2 = 0;
            // if(p1==0) w2 = 0;
            // if(p2==0) w2 = 0;
            // if(isinf(w2)) w2 = 0;
            C2 /= p2;
            radiance += path_throughput * C2 * w2;  
        }
        // TODO :: ENV MAP
        // else if () {

        // }

        if(!bsdf_ray_intersected) {
            break;
        }
        
        // // TODO :: Russian roulette
        // // // Update rays/intersection/path_throughput/current_pdf
        // // // Russian roulette heuristics
        float rr_prob = 1;
        // // if (num_vertices - 1 >= scene.options.rr_depth) {
        // //     rr_prob = min(max((1 / eta_scale) * path_throughput), Real(0.95));
        // //     if (next_pcg32_real<Real>(rng) > rr_prob) {
        // //         // Terminate the path
        // //         break;
        // //     }
        // // }

        ray = bsdf_ray;
        vertex = bsdf_vertex;
        path_throughput *= (G * f) / (p2 * rr_prob);
    }

    return radiance;
}

void main() {
    // The resolution of the image, which is the same as the launch size:
    const ivec2 resolution = ivec2(pushConstants.resolution);
    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    // If the pixel is outside of the image, don't do anything:
    if((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    uint RNG = InitRNG(pixel, pushConstants.sample_batch);

    Ray primaryRay = generateRay(
        pixel,
        resolution,
        false
    );

    vec3 pixelColor = unidirectional_path_tracing(primaryRay, RNG);
    
    // if(pushConstants.sample_batch != 0) {
    //     vec3 color = imageLoad(storageImage, ivec2(pixel)).rgb;
    //     pixelColor = (pushConstants.sample_batch * color + pixelColor) / (pushConstants.sample_batch + 1);
    // }
    imageStore(storageImage, pixel, vec4(pixelColor, 1.0));
}