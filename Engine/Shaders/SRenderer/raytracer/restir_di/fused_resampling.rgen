

void main() {
    const ReSTIRDI_ResamplingRuntimeParameters params = g_Const.runtimeParams;
    uint2 pixelPosition = RTXDI_ReservoirPosToPixelPos(GlobalIndex, params);

    RAB_RandomSamplerState rng = RAB_InitRandomSampler(pixelPosition, 2);
    RandomSamplerState RNG = InitRNG(pixelPosition, g_Const.frameIndex + pass * 13);

    RAB_Surface surface = RAB_GetGBufferSurface(pixelPosition, false);

    RTXDI_Reservoir reservoir = LoadReservoir(params, GlobalIndex, g_Const.initialOutputBufferIndex);

    int2 temporalSamplePixelPos = -1;

    float3 motionVector = t_MotionVectors[pixelPosition].xyz;
    motionVector = convertMotionVectorToPixelSpace(g_Const.view, g_Const.prevView, pixelPosition, motionVector);

    bool usePermutationSampling = false;
    if (g_Const.enablePermutationSampling)
    {
        // Permutation sampling makes more noise on thin, high-detail objects.
        usePermutationSampling = !IsComplexSurface(pixelPosition, surface);
    }

    RTXDI_SpatioTemporalResamplingParameters stparams;
    stparams.screenSpaceMotion = motionVector;
    stparams.sourceBufferIndex = g_Const.temporalInputBufferIndex;
    stparams.maxHistoryLength = g_Const.maxHistoryLength;
    stparams.biasCorrectionMode = g_Const.temporalBiasCorrection;
    stparams.depthThreshold = g_Const.temporalDepthThreshold;
    stparams.normalThreshold = g_Const.temporalNormalThreshold;
    stparams.numSamples = g_Const.numSpatialSamples + 1;
    stparams.numDisocclusionBoostSamples = g_Const.numDisocclusionBoostSamples;
    stparams.samplingRadius = g_Const.spatialSamplingRadius;
    stparams.enableVisibilityShortcut = g_Const.discardInvisibleSamples;
    stparams.enablePermutationSampling = usePermutationSampling;
    stparams.enableMaterialSimilarityTest = true;

    RAB_LightSample lightSample;
    reservoir = RTXDI_SpatioTemporalResampling(pixelPosition, surface, reservoir,
            rng, stparams, params, temporalSamplePixelPos, lightSample);

    u_TemporalSamplePositions[GlobalIndex] = temporalSamplePixelPos;

#ifdef RTXDI_ENABLE_BOILING_FILTER
    if (g_Const.boilingFilterStrength > 0)
    {
        RTXDI_BoilingFilter(LocalIndex, g_Const.boilingFilterStrength, params, reservoir);
    }
#endif

    float3 diffuse = 0;
    float3 specular = 0;
    float lightDistance = 0;
    float2 currLuminance = 0;

    if (RTXDI_IsValidReservoir(reservoir))
    {
        // lightSample is produced by the RTXDI_SampleLightsForSurface and RTXDI_SpatioTemporalResampling calls above
        ShadeSurfaceWithLightSample(reservoir, surface, lightSample,
            /* previousFrameTLAS = */ false, /* enableVisibilityReuse = */ true, diffuse, specular, lightDistance);

        currLuminance = float2(calcLuminance(diffuse * surface.diffuseAlbedo), calcLuminance(specular));
        
        specular = DemodulateSpecular(surface.specularF0, specular);
    }

    // Store the sampled lighting luminance for the gradient pass.
    // Discard the pixels where the visibility was reused, as gradients need actual visibility.
    u_RestirLuminance[GlobalIndex] = currLuminance * (reservoir.age > 0 ? 0 : 1);

    RTXDI_StoreReservoir(reservoir, params, GlobalIndex, g_Const.shadeInputBufferIndex);

    StoreShadingOutput(GlobalIndex, pixelPosition, 
        surface.viewDepth, surface.roughness,  diffuse, specular, lightDistance, true, g_Const.enableDenoiserInputPacking);
}