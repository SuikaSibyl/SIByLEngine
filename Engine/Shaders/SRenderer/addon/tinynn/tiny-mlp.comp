#version 450
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_EXT_samplerless_texture_functions : require
layout(column_major) uniform;
layout(column_major) buffer;
#extension GL_GOOGLE_include_directive : enable
#include "half-matmul-include.glsli"

#line 81 0
layout(std430, binding = 1) buffer StructuredBuffer_float_t_0 {
    float _data[];
} _gradient_buffer_0;

#line 4 1
layout(std430, binding = 0) buffer StructuredBuffer_float_t_1 {
    float _data[];
} _primal_buffer_0;

#line 7 2
layout(binding = 5)
uniform sampler2D target_texture_0;




struct SLANG_ParameterGroup_PushConstants_0
{
    ivec2 target_resolution_0;
    float gradient_scale_0;
};


#line 13
layout(push_constant)
layout(std140) uniform _S1
{
    ivec2 target_resolution_0;
    float gradient_scale_0;
}PushConstants_0;

#line 5
layout(rgba32f)
layout(binding = 3)
uniform image2D debug_texture_0;


#line 6
layout(r32f)
layout(binding = 4)
uniform image2D error_texture_0;


#line 4
layout(rgba32f)
layout(binding = 2)
uniform image2D output_texture_0;


#line 7 1
struct ThreadInfo_0
{
    ivec2 thread_idx_0;
    ivec2 block_dim_0;
};


ThreadInfo_0 ThreadInfo_x24init_0(ivec2 thread_idx_1, ivec2 block_dim_1)
{

#line 14
    ThreadInfo_0 _S2;
    _S2.thread_idx_0 = thread_idx_1;
    _S2.block_dim_0 = block_dim_1;

#line 14
    return _S2;
}



struct TensorView_0
{
    uint offset_prim_0;
    uint offset_grad_0;
    uint stride_0;
    uint pitch_0;
};


#line 46
TensorView_0 TensorView_x24init_0(uint offset_prim_1, uint offset_grad_1, uint stride_1, uint pitch_1)
{

#line 46
    TensorView_0 _S3;
    _S3.offset_prim_0 = offset_prim_1;
    _S3.offset_grad_0 = offset_grad_1;
    _S3.stride_0 = stride_1;
    _S3.pitch_0 = pitch_1;

#line 46
    return _S3;
}


#line 8 3
struct LinearHalf_0
{
    ThreadInfo_0 threadInfo_0;
    TensorView_0 weights_view_0;
    TensorView_0 bias_view_0;
};


#line 139
struct LinearHalf32X32_0
{
    LinearHalf_0 base_0;
};


#line 140
LinearHalf32X32_0 LinearHalf32X32_x24init_0(inout uint offset_prim_2, inout uint offset_grad_2, ThreadInfo_0 threadInfo_1)
{

#line 140
    LinearHalf32X32_0 _S4;
    _S4.base_0.weights_view_0 = TensorView_x24init_0(offset_prim_2, offset_grad_2, 32U, 32U);
    offset_prim_2 = offset_prim_2 + 1024U;

#line 142
    uint _S5 = offset_grad_2 + 1024U;

#line 142
    offset_grad_2 = _S5;
    _S4.base_0.bias_view_0 = TensorView_x24init_0(offset_prim_2, _S5, 32U, 32U);
    offset_prim_2 = offset_prim_2 + 32U;

#line 144
    offset_grad_2 = offset_grad_2 + 32U;
    _S4.base_0.threadInfo_0 = threadInfo_1;

#line 140
    return _S4;
}


#line 33 4
struct MLPHalf32X32_0
{
    LinearHalf32X32_0  linears_0[3];
};


#line 36
MLPHalf32X32_0 MLPHalf32X32_x24init_0(inout uint offset_prim_3, inout uint offset_grad_3, ThreadInfo_0 threadInfo_2)
{

#line 36
    MLPHalf32X32_0 _S6;

    LinearHalf32X32_0 _S7 = LinearHalf32X32_x24init_0(offset_prim_3, offset_grad_3, threadInfo_2);

#line 38
    _S6.linears_0[0] = _S7;

#line 38
    LinearHalf32X32_0 _S8 = LinearHalf32X32_x24init_0(offset_prim_3, offset_grad_3, threadInfo_2);

#line 38
    _S6.linears_0[1] = _S8;

#line 38
    LinearHalf32X32_0 _S9 = LinearHalf32X32_x24init_0(offset_prim_3, offset_grad_3, threadInfo_2);

#line 38
    _S6.linears_0[2] = _S9;

#line 36
    return _S6;
}


#line 36
struct DiffPair_half_0
{
    float16_t primal_0;
    float16_t differential_0;
};


#line 1484 5
void _d_max_0(inout DiffPair_half_0 dpx_0, inout DiffPair_half_0 dpy_0, float16_t dOut_0)
{
    DiffPair_half_0 _S10 = dpx_0;

#line 1486
    float16_t _S11;

#line 1486
    if(dpx_0.primal_0 > dpy_0.primal_0)
    {

#line 1486
        _S11 = dOut_0;

#line 1486
    }
    else
    {

#line 1486
        _S11 = 0.0HF;

#line 1486
    }

#line 1486
    dpx_0.primal_0 = _S10.primal_0;

#line 1486
    dpx_0.differential_0 = _S11;
    DiffPair_half_0 _S12 = dpy_0;

#line 1487
    if(dpy_0.primal_0 > _S10.primal_0)
    {

#line 1487
        _S11 = dOut_0;

#line 1487
    }
    else
    {

#line 1487
        _S11 = 0.0HF;

#line 1487
    }

#line 1487
    dpy_0.primal_0 = _S12.primal_0;

#line 1487
    dpy_0.differential_0 = _S11;
    return;
}


#line 1488
float16_t s_primal_ctx_max_0(float16_t _S13, float16_t _S14)
{

#line 1488
    return max(_S13, _S14);
}


#line 1488
void s_bwd_prop_max_0(inout DiffPair_half_0 _S15, inout DiffPair_half_0 _S16, float16_t _S17)
{

#line 1488
    _d_max_0(_S15, _S16, _S17);

#line 1488
    return;
}


#line 12 6
float16_t ReLU_eval_0(float16_t x_0)
{

#line 12
    return max(0.0HF, x_0);
}


#line 6 7
struct FeatureGrid2DIndex_0
{
    uvec2 cellId_0;
    vec2 weights_0;
};


#line 9
FeatureGrid2DIndex_0 FeatureGrid2DIndex_x24init_0(uvec2 frameDim_0, ivec2 pixelId_0, ivec2 feature_grid_0)
{

#line 10
    vec2 cellSize_0 = vec2(float(frameDim_0.x) / float(feature_grid_0.x), float(frameDim_0.y) / float(feature_grid_0.y));

#line 9
    FeatureGrid2DIndex_0 _S18;

    vec2 _S19 = vec2(pixelId_0);

#line 11
    uvec2 _S20 = uvec2(floor(_S19 / cellSize_0));

#line 11
    _S18.cellId_0 = _S20;
    _S18.weights_0 = _S19 / cellSize_0 - vec2(_S20);

#line 9
    return _S18;
}


#line 55 1
struct s_diff_HalfFeature_0
{
    float16_t  vals_0[32];
};


#line 41 2
s_diff_HalfFeature_0 HalfFeature_x24_syn_dadd_0(s_diff_HalfFeature_0 SLANG_anonymous_0_0, s_diff_HalfFeature_0 SLANG_anonymous_1_0)
{

#line 41
    s_diff_HalfFeature_0 result_0;

#line 509 8
    float16_t _S21 = SLANG_anonymous_0_0.vals_0[1] + SLANG_anonymous_1_0.vals_0[1];

#line 509
    float16_t _S22 = SLANG_anonymous_0_0.vals_0[2] + SLANG_anonymous_1_0.vals_0[2];

#line 509
    float16_t _S23 = SLANG_anonymous_0_0.vals_0[3] + SLANG_anonymous_1_0.vals_0[3];

#line 509
    float16_t _S24 = SLANG_anonymous_0_0.vals_0[4] + SLANG_anonymous_1_0.vals_0[4];

#line 509
    float16_t _S25 = SLANG_anonymous_0_0.vals_0[5] + SLANG_anonymous_1_0.vals_0[5];

#line 509
    float16_t _S26 = SLANG_anonymous_0_0.vals_0[6] + SLANG_anonymous_1_0.vals_0[6];

#line 509
    float16_t _S27 = SLANG_anonymous_0_0.vals_0[7] + SLANG_anonymous_1_0.vals_0[7];

#line 509
    float16_t _S28 = SLANG_anonymous_0_0.vals_0[8] + SLANG_anonymous_1_0.vals_0[8];

#line 509
    float16_t _S29 = SLANG_anonymous_0_0.vals_0[9] + SLANG_anonymous_1_0.vals_0[9];

#line 509
    float16_t _S30 = SLANG_anonymous_0_0.vals_0[10] + SLANG_anonymous_1_0.vals_0[10];

#line 509
    float16_t _S31 = SLANG_anonymous_0_0.vals_0[11] + SLANG_anonymous_1_0.vals_0[11];

#line 509
    float16_t _S32 = SLANG_anonymous_0_0.vals_0[12] + SLANG_anonymous_1_0.vals_0[12];

#line 509
    float16_t _S33 = SLANG_anonymous_0_0.vals_0[13] + SLANG_anonymous_1_0.vals_0[13];

#line 509
    float16_t _S34 = SLANG_anonymous_0_0.vals_0[14] + SLANG_anonymous_1_0.vals_0[14];

#line 509
    float16_t _S35 = SLANG_anonymous_0_0.vals_0[15] + SLANG_anonymous_1_0.vals_0[15];

#line 509
    float16_t _S36 = SLANG_anonymous_0_0.vals_0[16] + SLANG_anonymous_1_0.vals_0[16];

#line 509
    float16_t _S37 = SLANG_anonymous_0_0.vals_0[17] + SLANG_anonymous_1_0.vals_0[17];

#line 509
    float16_t _S38 = SLANG_anonymous_0_0.vals_0[18] + SLANG_anonymous_1_0.vals_0[18];

#line 509
    float16_t _S39 = SLANG_anonymous_0_0.vals_0[19] + SLANG_anonymous_1_0.vals_0[19];

#line 509
    float16_t _S40 = SLANG_anonymous_0_0.vals_0[20] + SLANG_anonymous_1_0.vals_0[20];

#line 509
    float16_t _S41 = SLANG_anonymous_0_0.vals_0[21] + SLANG_anonymous_1_0.vals_0[21];

#line 509
    float16_t _S42 = SLANG_anonymous_0_0.vals_0[22] + SLANG_anonymous_1_0.vals_0[22];

#line 509
    float16_t _S43 = SLANG_anonymous_0_0.vals_0[23] + SLANG_anonymous_1_0.vals_0[23];

#line 509
    float16_t _S44 = SLANG_anonymous_0_0.vals_0[24] + SLANG_anonymous_1_0.vals_0[24];

#line 509
    float16_t _S45 = SLANG_anonymous_0_0.vals_0[25] + SLANG_anonymous_1_0.vals_0[25];

#line 509
    float16_t _S46 = SLANG_anonymous_0_0.vals_0[26] + SLANG_anonymous_1_0.vals_0[26];

#line 509
    float16_t _S47 = SLANG_anonymous_0_0.vals_0[27] + SLANG_anonymous_1_0.vals_0[27];

#line 509
    float16_t _S48 = SLANG_anonymous_0_0.vals_0[28] + SLANG_anonymous_1_0.vals_0[28];

#line 509
    float16_t _S49 = SLANG_anonymous_0_0.vals_0[29] + SLANG_anonymous_1_0.vals_0[29];

#line 509
    float16_t _S50 = SLANG_anonymous_0_0.vals_0[30] + SLANG_anonymous_1_0.vals_0[30];

#line 509
    float16_t _S51 = SLANG_anonymous_0_0.vals_0[31] + SLANG_anonymous_1_0.vals_0[31];

#line 509
    result_0.vals_0[0] = SLANG_anonymous_0_0.vals_0[0] + SLANG_anonymous_1_0.vals_0[0];

#line 509
    result_0.vals_0[1] = _S21;

#line 509
    result_0.vals_0[2] = _S22;

#line 509
    result_0.vals_0[3] = _S23;

#line 509
    result_0.vals_0[4] = _S24;

#line 509
    result_0.vals_0[5] = _S25;

#line 509
    result_0.vals_0[6] = _S26;

#line 509
    result_0.vals_0[7] = _S27;

#line 509
    result_0.vals_0[8] = _S28;

#line 509
    result_0.vals_0[9] = _S29;

#line 509
    result_0.vals_0[10] = _S30;

#line 509
    result_0.vals_0[11] = _S31;

#line 509
    result_0.vals_0[12] = _S32;

#line 509
    result_0.vals_0[13] = _S33;

#line 509
    result_0.vals_0[14] = _S34;

#line 509
    result_0.vals_0[15] = _S35;

#line 509
    result_0.vals_0[16] = _S36;

#line 509
    result_0.vals_0[17] = _S37;

#line 509
    result_0.vals_0[18] = _S38;

#line 509
    result_0.vals_0[19] = _S39;

#line 509
    result_0.vals_0[20] = _S40;

#line 509
    result_0.vals_0[21] = _S41;

#line 509
    result_0.vals_0[22] = _S42;

#line 509
    result_0.vals_0[23] = _S43;

#line 509
    result_0.vals_0[24] = _S44;

#line 509
    result_0.vals_0[25] = _S45;

#line 509
    result_0.vals_0[26] = _S46;

#line 509
    result_0.vals_0[27] = _S47;

#line 509
    result_0.vals_0[28] = _S48;

#line 509
    result_0.vals_0[29] = _S49;

#line 509
    result_0.vals_0[30] = _S50;

#line 509
    result_0.vals_0[31] = _S51;

#line 509
    return result_0;
}


#line 509
s_diff_HalfFeature_0 HalfFeature_x24_syn_dzero_0()
{

#line 509
    s_diff_HalfFeature_0 result_1;

#line 509
    result_1.vals_0[0] = 0.0HF;

#line 509
    result_1.vals_0[1] = 0.0HF;

#line 509
    result_1.vals_0[2] = 0.0HF;

#line 509
    result_1.vals_0[3] = 0.0HF;

#line 509
    result_1.vals_0[4] = 0.0HF;

#line 509
    result_1.vals_0[5] = 0.0HF;

#line 509
    result_1.vals_0[6] = 0.0HF;

#line 509
    result_1.vals_0[7] = 0.0HF;

#line 509
    result_1.vals_0[8] = 0.0HF;

#line 509
    result_1.vals_0[9] = 0.0HF;

#line 509
    result_1.vals_0[10] = 0.0HF;

#line 509
    result_1.vals_0[11] = 0.0HF;

#line 509
    result_1.vals_0[12] = 0.0HF;

#line 509
    result_1.vals_0[13] = 0.0HF;

#line 509
    result_1.vals_0[14] = 0.0HF;

#line 509
    result_1.vals_0[15] = 0.0HF;

#line 509
    result_1.vals_0[16] = 0.0HF;

#line 509
    result_1.vals_0[17] = 0.0HF;

#line 509
    result_1.vals_0[18] = 0.0HF;

#line 509
    result_1.vals_0[19] = 0.0HF;

#line 509
    result_1.vals_0[20] = 0.0HF;

#line 509
    result_1.vals_0[21] = 0.0HF;

#line 509
    result_1.vals_0[22] = 0.0HF;

#line 509
    result_1.vals_0[23] = 0.0HF;

#line 509
    result_1.vals_0[24] = 0.0HF;

#line 509
    result_1.vals_0[25] = 0.0HF;

#line 509
    result_1.vals_0[26] = 0.0HF;

#line 509
    result_1.vals_0[27] = 0.0HF;

#line 509
    result_1.vals_0[28] = 0.0HF;

#line 509
    result_1.vals_0[29] = 0.0HF;

#line 509
    result_1.vals_0[30] = 0.0HF;

#line 509
    result_1.vals_0[31] = 0.0HF;

#line 509
    return result_1;
}


#line 36 1
void RWByteAddressBuffer_InterlockedAddF32_0(uint _S52, float _S53)
{

#line 618 9
    float _S54 = (atomicAdd((_gradient_buffer_0._data[_S52 / 4U]), (_S53)));
    return;
}


#line 32 1
void TensorView_interlocked_add_grad_0(TensorView_0 this_0, int x_1, float val_0)
{

#line 32
    RWByteAddressBuffer_InterlockedAddF32_0(uint((int(this_0.offset_grad_0) + x_1) * 4), val_0);

#line 32
    return;
}


#line 34
void TensorView_interlocked_add_grad_1(TensorView_0 this_1, int x_2, int y_0, int z_0, float val_1)
{

#line 34
    TensorView_interlocked_add_grad_0(this_1, x_2 * int(this_1.stride_0) + y_0 * int(this_1.pitch_0) + z_0, val_1);

#line 34
    return;
}


void TensorView_load_prim_idx3_bwd_0(TensorView_0 this_2, int x_3, int y_1, int z_1, float val_2)
{

#line 38
    TensorView_interlocked_add_grad_1(this_2, x_3, y_1, z_1, val_2);

#line 38
    return;
}


#line 26
float TensorView_load_prim_0(TensorView_0 this_3, int x_4)
{

#line 26
    return _primal_buffer_0._data[uint(int(this_3.offset_prim_0) + x_4)];
}


float TensorView_load_prim_1(TensorView_0 this_4, int x_5, int y_2, int z_2)
{

#line 30
    return TensorView_load_prim_0(this_4, x_5 * int(this_4.stride_0) + y_2 * int(this_4.pitch_0) + z_2);
}


#line 30
float16_t s_primal_ctx_cos_0(float16_t _S55)
{

#line 30
    return cos(_S55);
}


#line 30
float16_t s_primal_ctx_sin_0(float16_t _S56)
{

#line 30
    return sin(_S56);
}


#line 55
struct HalfFeature_0
{
    float16_t  vals_1[32];
};


#line 17 7
HalfFeature_0 computeInterpolatedFeature_0(TensorView_0 featureGrid_0, FeatureGrid2DIndex_0 index_0)
{

#line 26
    uint _S57 = index_0.cellId_0.x;

#line 26
    int _S58 = int(_S57);

#line 26
    uint _S59 = index_0.cellId_0.y;

#line 26
    int _S60 = int(_S59);

#line 26
    float _S61 = index_0.weights_0.x;

#line 26
    float _S62 = 1.0 - _S61;

#line 26
    float _S63 = index_0.weights_0.y;

#line 26
    float _S64 = 1.0 - _S63;
    int _S65 = int(_S57 + 1U);
    int _S66 = int(_S59 + 1U);

#line 23
    HalfFeature_0 feature_0;

#line 32
    float16_t _S67 = float16_t(_S63);
    float16_t _S68 = float16_t(_S61);
    float16_t _S69 = _S68 * 3.140625HF;

#line 34
    float16_t _S70 = sin(_S69);
    float16_t _S71 = cos(_S69);
    float16_t _S72 = _S67 * 3.140625HF;

#line 36
    float16_t _S73 = sin(_S72);
    float16_t _S74 = cos(_S72);

    float16_t _S75 = _S68 * 6.28125HF;

#line 39
    float16_t _S76 = sin(_S75);
    float16_t _S77 = cos(_S75);
    float16_t _S78 = _S67 * 6.28125HF;

#line 41
    float16_t _S79 = sin(_S78);
    float16_t _S80 = cos(_S78);

    float16_t _S81 = _S68 * 12.5625HF;

#line 44
    float16_t _S82 = sin(_S81);
    float16_t _S83 = cos(_S81);
    float16_t _S84 = _S67 * 12.5625HF;

#line 46
    float16_t _S85 = sin(_S84);
    float16_t _S86 = cos(_S84);

    float16_t _S87 = _S68 * 25.125HF;

#line 49
    float16_t _S88 = sin(_S87);
    float16_t _S89 = cos(_S87);
    float16_t _S90 = _S67 * 25.125HF;

#line 51
    float16_t _S91 = sin(_S90);
    float16_t _S92 = cos(_S90);

#line 30
    feature_0.vals_1[0] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 0) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 0) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 0) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 0) * _S61 * _S63);

#line 30
    feature_0.vals_1[1] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 1) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 1) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 1) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 1) * _S61 * _S63);

#line 30
    feature_0.vals_1[2] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 2) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 2) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 2) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 2) * _S61 * _S63);

#line 30
    feature_0.vals_1[3] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 3) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 3) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 3) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 3) * _S61 * _S63);

#line 30
    feature_0.vals_1[4] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 4) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 4) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 4) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 4) * _S61 * _S63);

#line 30
    feature_0.vals_1[5] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 5) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 5) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 5) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 5) * _S61 * _S63);

#line 30
    feature_0.vals_1[6] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 6) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 6) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 6) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 6) * _S61 * _S63);

#line 30
    feature_0.vals_1[7] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 7) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 7) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 7) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 7) * _S61 * _S63);

#line 30
    feature_0.vals_1[8] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 8) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 8) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 8) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 8) * _S61 * _S63);

#line 30
    feature_0.vals_1[9] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 9) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 9) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 9) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 9) * _S61 * _S63);

#line 30
    feature_0.vals_1[10] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 10) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 10) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 10) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 10) * _S61 * _S63);

#line 30
    feature_0.vals_1[11] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 11) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 11) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 11) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 11) * _S61 * _S63);

#line 30
    feature_0.vals_1[12] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 12) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 12) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 12) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 12) * _S61 * _S63);

#line 30
    feature_0.vals_1[13] = float16_t(TensorView_load_prim_1(featureGrid_0, _S58, _S60, 13) * _S62 * _S64 + TensorView_load_prim_1(featureGrid_0, _S65, _S60, 13) * _S61 * _S64 + TensorView_load_prim_1(featureGrid_0, _S58, _S66, 13) * _S62 * _S63 + TensorView_load_prim_1(featureGrid_0, _S65, _S66, 13) * _S61 * _S63);

    feature_0.vals_1[14] = _S67;
    feature_0.vals_1[15] = _S68;
    feature_0.vals_1[16] = _S70;
    feature_0.vals_1[17] = _S71;
    feature_0.vals_1[18] = _S73;
    feature_0.vals_1[19] = _S74;

    feature_0.vals_1[20] = _S76;
    feature_0.vals_1[21] = _S77;
    feature_0.vals_1[22] = _S79;
    feature_0.vals_1[23] = _S80;

    feature_0.vals_1[24] = _S82;
    feature_0.vals_1[25] = _S83;
    feature_0.vals_1[26] = _S85;
    feature_0.vals_1[27] = _S86;

    feature_0.vals_1[28] = _S88;
    feature_0.vals_1[29] = _S89;
    feature_0.vals_1[30] = _S91;
    feature_0.vals_1[31] = _S92;

    return feature_0;
}


#line 31 3
void LinearHalf_storeArray_0(LinearHalf_0 this_5, uint memptr_0, float16_t  input_0[32])
{

#line 37
    int _S93 = int(memptr_0);

#line 37
    int _S94 = int(uint(this_5.threadInfo_0.thread_idx_0.x % 32));

#line 37
    int _S95 = _S93 + (32 + _S94);

#line 37
    int _S96 = _S93 + (64 + _S94);

#line 37
    int _S97 = _S93 + (96 + _S94);

#line 37
    int _S98 = _S93 + (128 + _S94);

#line 37
    int _S99 = _S93 + (160 + _S94);

#line 37
    int _S100 = _S93 + (192 + _S94);

#line 37
    int _S101 = _S93 + (224 + _S94);

#line 37
    int _S102 = _S93 + (256 + _S94);

#line 37
    int _S103 = _S93 + (288 + _S94);

#line 37
    int _S104 = _S93 + (320 + _S94);

#line 37
    int _S105 = _S93 + (352 + _S94);

#line 37
    int _S106 = _S93 + (384 + _S94);

#line 37
    int _S107 = _S93 + (416 + _S94);

#line 37
    int _S108 = _S93 + (448 + _S94);

#line 37
    int _S109 = _S93 + (480 + _S94);

#line 37
    int _S110 = _S93 + (512 + _S94);

#line 37
    int _S111 = _S93 + (544 + _S94);

#line 37
    int _S112 = _S93 + (576 + _S94);

#line 37
    int _S113 = _S93 + (608 + _S94);

#line 37
    int _S114 = _S93 + (640 + _S94);

#line 37
    int _S115 = _S93 + (672 + _S94);

#line 37
    int _S116 = _S93 + (704 + _S94);

#line 37
    int _S117 = _S93 + (736 + _S94);

#line 37
    int _S118 = _S93 + (768 + _S94);

#line 37
    int _S119 = _S93 + (800 + _S94);

#line 37
    int _S120 = _S93 + (832 + _S94);

#line 37
    int _S121 = _S93 + (864 + _S94);

#line 37
    int _S122 = _S93 + (896 + _S94);

#line 37
    int _S123 = _S93 + (928 + _S94);

#line 37
    int _S124 = _S93 + (960 + _S94);

#line 37
    int _S125 = _S93 + (992 + _S94);

#line 37
    glsl_set_half_shared_buffer((_S93 + _S94), (input_0[0]));

#line 37
    glsl_set_half_shared_buffer((_S95), (input_0[1]));

#line 37
    glsl_set_half_shared_buffer((_S96), (input_0[2]));

#line 37
    glsl_set_half_shared_buffer((_S97), (input_0[3]));

#line 37
    glsl_set_half_shared_buffer((_S98), (input_0[4]));

#line 37
    glsl_set_half_shared_buffer((_S99), (input_0[5]));

#line 37
    glsl_set_half_shared_buffer((_S100), (input_0[6]));

#line 37
    glsl_set_half_shared_buffer((_S101), (input_0[7]));

#line 37
    glsl_set_half_shared_buffer((_S102), (input_0[8]));

#line 37
    glsl_set_half_shared_buffer((_S103), (input_0[9]));

#line 37
    glsl_set_half_shared_buffer((_S104), (input_0[10]));

#line 37
    glsl_set_half_shared_buffer((_S105), (input_0[11]));

#line 37
    glsl_set_half_shared_buffer((_S106), (input_0[12]));

#line 37
    glsl_set_half_shared_buffer((_S107), (input_0[13]));

#line 37
    glsl_set_half_shared_buffer((_S108), (input_0[14]));

#line 37
    glsl_set_half_shared_buffer((_S109), (input_0[15]));

#line 37
    glsl_set_half_shared_buffer((_S110), (input_0[16]));

#line 37
    glsl_set_half_shared_buffer((_S111), (input_0[17]));

#line 37
    glsl_set_half_shared_buffer((_S112), (input_0[18]));

#line 37
    glsl_set_half_shared_buffer((_S113), (input_0[19]));

#line 37
    glsl_set_half_shared_buffer((_S114), (input_0[20]));

#line 37
    glsl_set_half_shared_buffer((_S115), (input_0[21]));

#line 37
    glsl_set_half_shared_buffer((_S116), (input_0[22]));

#line 37
    glsl_set_half_shared_buffer((_S117), (input_0[23]));

#line 37
    glsl_set_half_shared_buffer((_S118), (input_0[24]));

#line 37
    glsl_set_half_shared_buffer((_S119), (input_0[25]));

#line 37
    glsl_set_half_shared_buffer((_S120), (input_0[26]));

#line 37
    glsl_set_half_shared_buffer((_S121), (input_0[27]));

#line 37
    glsl_set_half_shared_buffer((_S122), (input_0[28]));

#line 37
    glsl_set_half_shared_buffer((_S123), (input_0[29]));

#line 37
    glsl_set_half_shared_buffer((_S124), (input_0[30]));

#line 37
    glsl_set_half_shared_buffer((_S125), (input_0[31]));

#line 37
    return;
}


#line 31
void LinearHalf_storeArray_1(LinearHalf_0 this_6, uint memptr_1, float16_t  input_1[32])
{


    int _S126 = int(memptr_1);

#line 35
    int _S127 = int(uint(this_6.threadInfo_0.thread_idx_0.x % 32)) * 32;

#line 35
    int _S128 = _S126 + (_S127 + 1);

#line 35
    int _S129 = _S126 + (_S127 + 2);

#line 35
    int _S130 = _S126 + (_S127 + 3);

#line 35
    int _S131 = _S126 + (_S127 + 4);

#line 35
    int _S132 = _S126 + (_S127 + 5);

#line 35
    int _S133 = _S126 + (_S127 + 6);

#line 35
    int _S134 = _S126 + (_S127 + 7);

#line 35
    int _S135 = _S126 + (_S127 + 8);

#line 35
    int _S136 = _S126 + (_S127 + 9);

#line 35
    int _S137 = _S126 + (_S127 + 10);

#line 35
    int _S138 = _S126 + (_S127 + 11);

#line 35
    int _S139 = _S126 + (_S127 + 12);

#line 35
    int _S140 = _S126 + (_S127 + 13);

#line 35
    int _S141 = _S126 + (_S127 + 14);

#line 35
    int _S142 = _S126 + (_S127 + 15);

#line 35
    int _S143 = _S126 + (_S127 + 16);

#line 35
    int _S144 = _S126 + (_S127 + 17);

#line 35
    int _S145 = _S126 + (_S127 + 18);

#line 35
    int _S146 = _S126 + (_S127 + 19);

#line 35
    int _S147 = _S126 + (_S127 + 20);

#line 35
    int _S148 = _S126 + (_S127 + 21);

#line 35
    int _S149 = _S126 + (_S127 + 22);

#line 35
    int _S150 = _S126 + (_S127 + 23);

#line 35
    int _S151 = _S126 + (_S127 + 24);

#line 35
    int _S152 = _S126 + (_S127 + 25);

#line 35
    int _S153 = _S126 + (_S127 + 26);

#line 35
    int _S154 = _S126 + (_S127 + 27);

#line 35
    int _S155 = _S126 + (_S127 + 28);

#line 35
    int _S156 = _S126 + (_S127 + 29);

#line 35
    int _S157 = _S126 + (_S127 + 30);

#line 35
    int _S158 = _S126 + (_S127 + 31);

#line 35
    glsl_set_half_shared_buffer((_S126 + _S127), (input_1[0]));

#line 35
    glsl_set_half_shared_buffer((_S128), (input_1[1]));

#line 35
    glsl_set_half_shared_buffer((_S129), (input_1[2]));

#line 35
    glsl_set_half_shared_buffer((_S130), (input_1[3]));

#line 35
    glsl_set_half_shared_buffer((_S131), (input_1[4]));

#line 35
    glsl_set_half_shared_buffer((_S132), (input_1[5]));

#line 35
    glsl_set_half_shared_buffer((_S133), (input_1[6]));

#line 35
    glsl_set_half_shared_buffer((_S134), (input_1[7]));

#line 35
    glsl_set_half_shared_buffer((_S135), (input_1[8]));

#line 35
    glsl_set_half_shared_buffer((_S136), (input_1[9]));

#line 35
    glsl_set_half_shared_buffer((_S137), (input_1[10]));

#line 35
    glsl_set_half_shared_buffer((_S138), (input_1[11]));

#line 35
    glsl_set_half_shared_buffer((_S139), (input_1[12]));

#line 35
    glsl_set_half_shared_buffer((_S140), (input_1[13]));

#line 35
    glsl_set_half_shared_buffer((_S141), (input_1[14]));

#line 35
    glsl_set_half_shared_buffer((_S142), (input_1[15]));

#line 35
    glsl_set_half_shared_buffer((_S143), (input_1[16]));

#line 35
    glsl_set_half_shared_buffer((_S144), (input_1[17]));

#line 35
    glsl_set_half_shared_buffer((_S145), (input_1[18]));

#line 35
    glsl_set_half_shared_buffer((_S146), (input_1[19]));

#line 35
    glsl_set_half_shared_buffer((_S147), (input_1[20]));

#line 35
    glsl_set_half_shared_buffer((_S148), (input_1[21]));

#line 35
    glsl_set_half_shared_buffer((_S149), (input_1[22]));

#line 35
    glsl_set_half_shared_buffer((_S150), (input_1[23]));

#line 35
    glsl_set_half_shared_buffer((_S151), (input_1[24]));

#line 35
    glsl_set_half_shared_buffer((_S152), (input_1[25]));

#line 35
    glsl_set_half_shared_buffer((_S153), (input_1[26]));

#line 35
    glsl_set_half_shared_buffer((_S154), (input_1[27]));

#line 35
    glsl_set_half_shared_buffer((_S155), (input_1[28]));

#line 35
    glsl_set_half_shared_buffer((_S156), (input_1[29]));

#line 35
    glsl_set_half_shared_buffer((_S157), (input_1[30]));

#line 35
    glsl_set_half_shared_buffer((_S158), (input_1[31]));

    return;
}


#line 17
uint LinearHalf_calcOffset_0(LinearHalf_0 this_7)
{

#line 18
    return uint((float(this_7.threadInfo_0.thread_idx_0.x / 32) + float(this_7.threadInfo_0.thread_idx_0.y) * (float(this_7.threadInfo_0.block_dim_0.x) / 32.0)) * 1024.0);
}


#line 40
void LinearHalf_moveInputsToSharedMem_0(LinearHalf_0 this_8, float16_t  input_2[32])
{

    LinearHalf_storeArray_1(this_8, LinearHalf_calcOffset_0(this_8), input_2);
    return;
}


#line 33 1
void TensorView_interlocked_add_grad_2(TensorView_0 this_9, int x_6, int y_3, float val_3)
{

#line 33
    TensorView_interlocked_add_grad_0(this_9, x_6 * int(this_9.stride_0) + y_3, val_3);

#line 33
    return;
}


#line 28
float TensorView_load_prim_2(TensorView_0 this_10, int x_7, int y_4)
{

#line 28
    return TensorView_load_prim_0(this_10, x_7 * int(this_10.stride_0) + y_4);
}


#line 149 3
void LinearHalf32X32_moveWeightsToSharedMem_0(LinearHalf32X32_0 this_11)
{
    int _S159 = this_11.base_0.threadInfo_0.thread_idx_0.x;

#line 156
    int _S160 = int(4096U + LinearHalf_calcOffset_0(this_11.base_0)) + _S159 * 32;

#line 156
    int _S161 = _S160 + 1;

#line 156
    int _S162 = _S160 + 2;

#line 156
    int _S163 = _S160 + 3;

#line 156
    int _S164 = _S160 + 4;

#line 156
    int _S165 = _S160 + 5;

#line 156
    int _S166 = _S160 + 6;

#line 156
    int _S167 = _S160 + 7;

#line 156
    int _S168 = _S160 + 8;

#line 156
    int _S169 = _S160 + 9;

#line 156
    int _S170 = _S160 + 10;

#line 156
    int _S171 = _S160 + 11;

#line 156
    int _S172 = _S160 + 12;

#line 156
    int _S173 = _S160 + 13;

#line 156
    int _S174 = _S160 + 14;

#line 156
    int _S175 = _S160 + 15;

#line 156
    int _S176 = _S160 + 16;

#line 156
    int _S177 = _S160 + 17;

#line 156
    int _S178 = _S160 + 18;

#line 156
    int _S179 = _S160 + 19;

#line 156
    int _S180 = _S160 + 20;

#line 156
    int _S181 = _S160 + 21;

#line 156
    int _S182 = _S160 + 22;

#line 156
    int _S183 = _S160 + 23;

#line 156
    int _S184 = _S160 + 24;

#line 156
    int _S185 = _S160 + 25;

#line 156
    int _S186 = _S160 + 26;

#line 156
    int _S187 = _S160 + 27;

#line 156
    int _S188 = _S160 + 28;

#line 156
    int _S189 = _S160 + 29;

#line 156
    int _S190 = _S160 + 30;

#line 156
    int _S191 = _S160 + 31;

#line 156
    glsl_set_half_shared_buffer((_S160), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 0))));

#line 156
    glsl_set_half_shared_buffer((_S161), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 1))));

#line 156
    glsl_set_half_shared_buffer((_S162), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 2))));

#line 156
    glsl_set_half_shared_buffer((_S163), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 3))));

#line 156
    glsl_set_half_shared_buffer((_S164), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 4))));

#line 156
    glsl_set_half_shared_buffer((_S165), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 5))));

#line 156
    glsl_set_half_shared_buffer((_S166), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 6))));

#line 156
    glsl_set_half_shared_buffer((_S167), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 7))));

#line 156
    glsl_set_half_shared_buffer((_S168), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 8))));

#line 156
    glsl_set_half_shared_buffer((_S169), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 9))));

#line 156
    glsl_set_half_shared_buffer((_S170), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 10))));

#line 156
    glsl_set_half_shared_buffer((_S171), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 11))));

#line 156
    glsl_set_half_shared_buffer((_S172), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 12))));

#line 156
    glsl_set_half_shared_buffer((_S173), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 13))));

#line 156
    glsl_set_half_shared_buffer((_S174), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 14))));

#line 156
    glsl_set_half_shared_buffer((_S175), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 15))));

#line 156
    glsl_set_half_shared_buffer((_S176), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 16))));

#line 156
    glsl_set_half_shared_buffer((_S177), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 17))));

#line 156
    glsl_set_half_shared_buffer((_S178), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 18))));

#line 156
    glsl_set_half_shared_buffer((_S179), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 19))));

#line 156
    glsl_set_half_shared_buffer((_S180), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 20))));

#line 156
    glsl_set_half_shared_buffer((_S181), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 21))));

#line 156
    glsl_set_half_shared_buffer((_S182), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 22))));

#line 156
    glsl_set_half_shared_buffer((_S183), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 23))));

#line 156
    glsl_set_half_shared_buffer((_S184), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 24))));

#line 156
    glsl_set_half_shared_buffer((_S185), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 25))));

#line 156
    glsl_set_half_shared_buffer((_S186), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 26))));

#line 156
    glsl_set_half_shared_buffer((_S187), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 27))));

#line 156
    glsl_set_half_shared_buffer((_S188), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 28))));

#line 156
    glsl_set_half_shared_buffer((_S189), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 29))));

#line 156
    glsl_set_half_shared_buffer((_S190), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 30))));

#line 156
    glsl_set_half_shared_buffer((_S191), (float16_t(TensorView_load_prim_2(this_11.base_0.weights_view_0, _S159, 31))));


    return;
}


#line 149
void LinearHalf32X32_moveWeightsToSharedMem_1(LinearHalf32X32_0 this_12)
{

#line 150
    uint _S192 = 4096U + LinearHalf_calcOffset_0(this_12.base_0);
    int _S193 = this_12.base_0.threadInfo_0.thread_idx_0.x;

#line 157
    int _S194 = int(_S192 + 32U) + _S193;

#line 157
    int _S195 = int(_S192 + 64U) + _S193;

#line 157
    int _S196 = int(_S192 + 96U) + _S193;

#line 157
    int _S197 = int(_S192 + 128U) + _S193;

#line 157
    int _S198 = int(_S192 + 160U) + _S193;

#line 157
    int _S199 = int(_S192 + 192U) + _S193;

#line 157
    int _S200 = int(_S192 + 224U) + _S193;

#line 157
    int _S201 = int(_S192 + 256U) + _S193;

#line 157
    int _S202 = int(_S192 + 288U) + _S193;

#line 157
    int _S203 = int(_S192 + 320U) + _S193;

#line 157
    int _S204 = int(_S192 + 352U) + _S193;

#line 157
    int _S205 = int(_S192 + 384U) + _S193;

#line 157
    int _S206 = int(_S192 + 416U) + _S193;

#line 157
    int _S207 = int(_S192 + 448U) + _S193;

#line 157
    int _S208 = int(_S192 + 480U) + _S193;

#line 157
    int _S209 = int(_S192 + 512U) + _S193;

#line 157
    int _S210 = int(_S192 + 544U) + _S193;

#line 157
    int _S211 = int(_S192 + 576U) + _S193;

#line 157
    int _S212 = int(_S192 + 608U) + _S193;

#line 157
    int _S213 = int(_S192 + 640U) + _S193;

#line 157
    int _S214 = int(_S192 + 672U) + _S193;

#line 157
    int _S215 = int(_S192 + 704U) + _S193;

#line 157
    int _S216 = int(_S192 + 736U) + _S193;

#line 157
    int _S217 = int(_S192 + 768U) + _S193;

#line 157
    int _S218 = int(_S192 + 800U) + _S193;

#line 157
    int _S219 = int(_S192 + 832U) + _S193;

#line 157
    int _S220 = int(_S192 + 864U) + _S193;

#line 157
    int _S221 = int(_S192 + 896U) + _S193;

#line 157
    int _S222 = int(_S192 + 928U) + _S193;

#line 157
    int _S223 = int(_S192 + 960U) + _S193;

#line 157
    int _S224 = int(_S192 + 992U) + _S193;

#line 157
    glsl_set_half_shared_buffer((int(_S192) + _S193), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 0))));

#line 157
    glsl_set_half_shared_buffer((_S194), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 1))));

#line 157
    glsl_set_half_shared_buffer((_S195), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 2))));

#line 157
    glsl_set_half_shared_buffer((_S196), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 3))));

#line 157
    glsl_set_half_shared_buffer((_S197), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 4))));

#line 157
    glsl_set_half_shared_buffer((_S198), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 5))));

#line 157
    glsl_set_half_shared_buffer((_S199), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 6))));

#line 157
    glsl_set_half_shared_buffer((_S200), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 7))));

#line 157
    glsl_set_half_shared_buffer((_S201), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 8))));

#line 157
    glsl_set_half_shared_buffer((_S202), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 9))));

#line 157
    glsl_set_half_shared_buffer((_S203), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 10))));

#line 157
    glsl_set_half_shared_buffer((_S204), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 11))));

#line 157
    glsl_set_half_shared_buffer((_S205), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 12))));

#line 157
    glsl_set_half_shared_buffer((_S206), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 13))));

#line 157
    glsl_set_half_shared_buffer((_S207), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 14))));

#line 157
    glsl_set_half_shared_buffer((_S208), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 15))));

#line 157
    glsl_set_half_shared_buffer((_S209), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 16))));

#line 157
    glsl_set_half_shared_buffer((_S210), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 17))));

#line 157
    glsl_set_half_shared_buffer((_S211), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 18))));

#line 157
    glsl_set_half_shared_buffer((_S212), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 19))));

#line 157
    glsl_set_half_shared_buffer((_S213), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 20))));

#line 157
    glsl_set_half_shared_buffer((_S214), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 21))));

#line 157
    glsl_set_half_shared_buffer((_S215), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 22))));

#line 157
    glsl_set_half_shared_buffer((_S216), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 23))));

#line 157
    glsl_set_half_shared_buffer((_S217), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 24))));

#line 157
    glsl_set_half_shared_buffer((_S218), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 25))));

#line 157
    glsl_set_half_shared_buffer((_S219), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 26))));

#line 157
    glsl_set_half_shared_buffer((_S220), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 27))));

#line 157
    glsl_set_half_shared_buffer((_S221), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 28))));

#line 157
    glsl_set_half_shared_buffer((_S222), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 29))));

#line 157
    glsl_set_half_shared_buffer((_S223), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 30))));

#line 157
    glsl_set_half_shared_buffer((_S224), (float16_t(TensorView_load_prim_2(this_12.base_0.weights_view_0, _S193, 31))));

    return;
}


#line 22
void LinearHalf_loadArray_0(LinearHalf_0 this_13, uint memptr_2, out float16_t  input_3[32])
{


    int _S225 = int(memptr_2) + int(uint(this_13.threadInfo_0.thread_idx_0.x % 32)) * 32;

#line 26
    int _S226 = _S225 + 1;

#line 26
    int _S227 = _S225 + 2;

#line 26
    int _S228 = _S225 + 3;

#line 26
    int _S229 = _S225 + 4;

#line 26
    int _S230 = _S225 + 5;

#line 26
    int _S231 = _S225 + 6;

#line 26
    int _S232 = _S225 + 7;

#line 26
    int _S233 = _S225 + 8;

#line 26
    int _S234 = _S225 + 9;

#line 26
    int _S235 = _S225 + 10;

#line 26
    int _S236 = _S225 + 11;

#line 26
    int _S237 = _S225 + 12;

#line 26
    int _S238 = _S225 + 13;

#line 26
    int _S239 = _S225 + 14;

#line 26
    int _S240 = _S225 + 15;

#line 26
    int _S241 = _S225 + 16;

#line 26
    int _S242 = _S225 + 17;

#line 26
    int _S243 = _S225 + 18;

#line 26
    int _S244 = _S225 + 19;

#line 26
    int _S245 = _S225 + 20;

#line 26
    int _S246 = _S225 + 21;

#line 26
    int _S247 = _S225 + 22;

#line 26
    int _S248 = _S225 + 23;

#line 26
    int _S249 = _S225 + 24;

#line 26
    int _S250 = _S225 + 25;

#line 26
    int _S251 = _S225 + 26;

#line 26
    int _S252 = _S225 + 27;

#line 26
    int _S253 = _S225 + 28;

#line 26
    int _S254 = _S225 + 29;

#line 26
    int _S255 = _S225 + 30;

#line 26
    int _S256 = _S225 + 31;

#line 26
    float16_t _S257 = (glsl_get_half_shared_buffer((_S225)));

#line 26
    input_3[0] = _S257;

#line 26
    float16_t _S258 = (glsl_get_half_shared_buffer((_S226)));

#line 26
    input_3[1] = _S258;

#line 26
    float16_t _S259 = (glsl_get_half_shared_buffer((_S227)));

#line 26
    input_3[2] = _S259;

#line 26
    float16_t _S260 = (glsl_get_half_shared_buffer((_S228)));

#line 26
    input_3[3] = _S260;

#line 26
    float16_t _S261 = (glsl_get_half_shared_buffer((_S229)));

#line 26
    input_3[4] = _S261;

#line 26
    float16_t _S262 = (glsl_get_half_shared_buffer((_S230)));

#line 26
    input_3[5] = _S262;

#line 26
    float16_t _S263 = (glsl_get_half_shared_buffer((_S231)));

#line 26
    input_3[6] = _S263;

#line 26
    float16_t _S264 = (glsl_get_half_shared_buffer((_S232)));

#line 26
    input_3[7] = _S264;

#line 26
    float16_t _S265 = (glsl_get_half_shared_buffer((_S233)));

#line 26
    input_3[8] = _S265;

#line 26
    float16_t _S266 = (glsl_get_half_shared_buffer((_S234)));

#line 26
    input_3[9] = _S266;

#line 26
    float16_t _S267 = (glsl_get_half_shared_buffer((_S235)));

#line 26
    input_3[10] = _S267;

#line 26
    float16_t _S268 = (glsl_get_half_shared_buffer((_S236)));

#line 26
    input_3[11] = _S268;

#line 26
    float16_t _S269 = (glsl_get_half_shared_buffer((_S237)));

#line 26
    input_3[12] = _S269;

#line 26
    float16_t _S270 = (glsl_get_half_shared_buffer((_S238)));

#line 26
    input_3[13] = _S270;

#line 26
    float16_t _S271 = (glsl_get_half_shared_buffer((_S239)));

#line 26
    input_3[14] = _S271;

#line 26
    float16_t _S272 = (glsl_get_half_shared_buffer((_S240)));

#line 26
    input_3[15] = _S272;

#line 26
    float16_t _S273 = (glsl_get_half_shared_buffer((_S241)));

#line 26
    input_3[16] = _S273;

#line 26
    float16_t _S274 = (glsl_get_half_shared_buffer((_S242)));

#line 26
    input_3[17] = _S274;

#line 26
    float16_t _S275 = (glsl_get_half_shared_buffer((_S243)));

#line 26
    input_3[18] = _S275;

#line 26
    float16_t _S276 = (glsl_get_half_shared_buffer((_S244)));

#line 26
    input_3[19] = _S276;

#line 26
    float16_t _S277 = (glsl_get_half_shared_buffer((_S245)));

#line 26
    input_3[20] = _S277;

#line 26
    float16_t _S278 = (glsl_get_half_shared_buffer((_S246)));

#line 26
    input_3[21] = _S278;

#line 26
    float16_t _S279 = (glsl_get_half_shared_buffer((_S247)));

#line 26
    input_3[22] = _S279;

#line 26
    float16_t _S280 = (glsl_get_half_shared_buffer((_S248)));

#line 26
    input_3[23] = _S280;

#line 26
    float16_t _S281 = (glsl_get_half_shared_buffer((_S249)));

#line 26
    input_3[24] = _S281;

#line 26
    float16_t _S282 = (glsl_get_half_shared_buffer((_S250)));

#line 26
    input_3[25] = _S282;

#line 26
    float16_t _S283 = (glsl_get_half_shared_buffer((_S251)));

#line 26
    input_3[26] = _S283;

#line 26
    float16_t _S284 = (glsl_get_half_shared_buffer((_S252)));

#line 26
    input_3[27] = _S284;

#line 26
    float16_t _S285 = (glsl_get_half_shared_buffer((_S253)));

#line 26
    input_3[28] = _S285;

#line 26
    float16_t _S286 = (glsl_get_half_shared_buffer((_S254)));

#line 26
    input_3[29] = _S286;

#line 26
    float16_t _S287 = (glsl_get_half_shared_buffer((_S255)));

#line 26
    input_3[30] = _S287;

#line 26
    float16_t _S288 = (glsl_get_half_shared_buffer((_S256)));

#line 26
    input_3[31] = _S288;

    return;
}


#line 6761 9
struct DiffPair_HalfFeature_0
{
    HalfFeature_0 primal_0;
    s_diff_HalfFeature_0 differential_0;
};


#line 178 3
void LinearHalf32X32_eval_bwd_0(LinearHalf32X32_0 this_14, inout DiffPair_HalfFeature_0 in_feature_pair_0, s_diff_HalfFeature_0 d_output_0)
{

    barrier();
    LinearHalf_moveInputsToSharedMem_0(this_14.base_0, d_output_0.vals_0);
    LinearHalf32X32_moveWeightsToSharedMem_0(this_14);
    barrier();

    glsl_wmma_128_32_32();

    uint _S289 = LinearHalf_calcOffset_0(this_14.base_0);

#line 187
    s_diff_HalfFeature_0 d_input_feature_0;
    LinearHalf_loadArray_0(this_14.base_0, _S289, d_input_feature_0.vals_0);
    DiffPair_HalfFeature_0 _S290 = in_feature_pair_0;

#line 189
    in_feature_pair_0.primal_0 = in_feature_pair_0.primal_0;

#line 189
    in_feature_pair_0.differential_0 = d_input_feature_0;

#line 194
    barrier();

    LinearHalf_storeArray_0(this_14.base_0, _S289, d_output_0.vals_0);



    int _S291 = int(4096U + _S289);

#line 200
    int _S292 = this_14.base_0.threadInfo_0.thread_idx_0.x;

#line 207
    int threadIdInWarp_0 = _S292 % 32;

#line 200
    int _S293 = _S291 + 32 + _S292;

#line 200
    int _S294 = _S291 + 64 + _S292;

#line 200
    int _S295 = _S291 + 96 + _S292;

#line 200
    int _S296 = _S291 + 128 + _S292;

#line 200
    int _S297 = _S291 + 160 + _S292;

#line 200
    int _S298 = _S291 + 192 + _S292;

#line 200
    int _S299 = _S291 + 224 + _S292;

#line 200
    int _S300 = _S291 + 256 + _S292;

#line 200
    int _S301 = _S291 + 288 + _S292;

#line 200
    int _S302 = _S291 + 320 + _S292;

#line 200
    int _S303 = _S291 + 352 + _S292;

#line 200
    int _S304 = _S291 + 384 + _S292;

#line 200
    int _S305 = _S291 + 416 + _S292;

#line 200
    int _S306 = _S291 + 448 + _S292;

#line 200
    int _S307 = _S291 + 480 + _S292;

#line 200
    int _S308 = _S291 + 512 + _S292;

#line 200
    int _S309 = _S291 + 544 + _S292;

#line 200
    int _S310 = _S291 + 576 + _S292;

#line 200
    int _S311 = _S291 + 608 + _S292;

#line 200
    int _S312 = _S291 + 640 + _S292;

#line 200
    int _S313 = _S291 + 672 + _S292;

#line 200
    int _S314 = _S291 + 704 + _S292;

#line 200
    int _S315 = _S291 + 736 + _S292;

#line 200
    int _S316 = _S291 + 768 + _S292;

#line 200
    int _S317 = _S291 + 800 + _S292;

#line 200
    int _S318 = _S291 + 832 + _S292;

#line 200
    int _S319 = _S291 + 864 + _S292;

#line 200
    int _S320 = _S291 + 896 + _S292;

#line 200
    int _S321 = _S291 + 928 + _S292;

#line 200
    int _S322 = _S291 + 960 + _S292;

#line 200
    int _S323 = _S291 + 992 + _S292;

#line 208
    int _S324 = int(_S289) + threadIdInWarp_0 * 32;

#line 208
    int _S325 = _S324 + 1;

#line 208
    int _S326 = _S324 + 2;

#line 208
    int _S327 = _S324 + 3;

#line 208
    int _S328 = _S324 + 4;

#line 208
    int _S329 = _S324 + 5;

#line 208
    int _S330 = _S324 + 6;

#line 208
    int _S331 = _S324 + 7;

#line 208
    int _S332 = _S324 + 8;

#line 208
    int _S333 = _S324 + 9;

#line 208
    int _S334 = _S324 + 10;

#line 208
    int _S335 = _S324 + 11;

#line 208
    int _S336 = _S324 + 12;

#line 208
    int _S337 = _S324 + 13;

#line 208
    int _S338 = _S324 + 14;

#line 208
    int _S339 = _S324 + 15;

#line 208
    int _S340 = _S324 + 16;

#line 208
    int _S341 = _S324 + 17;

#line 208
    int _S342 = _S324 + 18;

#line 208
    int _S343 = _S324 + 19;

#line 208
    int _S344 = _S324 + 20;

#line 208
    int _S345 = _S324 + 21;

#line 208
    int _S346 = _S324 + 22;

#line 208
    int _S347 = _S324 + 23;

#line 208
    int _S348 = _S324 + 24;

#line 208
    int _S349 = _S324 + 25;

#line 208
    int _S350 = _S324 + 26;

#line 208
    int _S351 = _S324 + 27;

#line 208
    int _S352 = _S324 + 28;

#line 208
    int _S353 = _S324 + 29;

#line 208
    int _S354 = _S324 + 30;

#line 208
    int _S355 = _S324 + 31;

#line 199
    glsl_set_half_shared_buffer((_S291 + _S292), (_S290.primal_0.vals_1[0]));

#line 199
    glsl_set_half_shared_buffer((_S293), (_S290.primal_0.vals_1[1]));

#line 199
    glsl_set_half_shared_buffer((_S294), (_S290.primal_0.vals_1[2]));

#line 199
    glsl_set_half_shared_buffer((_S295), (_S290.primal_0.vals_1[3]));

#line 199
    glsl_set_half_shared_buffer((_S296), (_S290.primal_0.vals_1[4]));

#line 199
    glsl_set_half_shared_buffer((_S297), (_S290.primal_0.vals_1[5]));

#line 199
    glsl_set_half_shared_buffer((_S298), (_S290.primal_0.vals_1[6]));

#line 199
    glsl_set_half_shared_buffer((_S299), (_S290.primal_0.vals_1[7]));

#line 199
    glsl_set_half_shared_buffer((_S300), (_S290.primal_0.vals_1[8]));

#line 199
    glsl_set_half_shared_buffer((_S301), (_S290.primal_0.vals_1[9]));

#line 199
    glsl_set_half_shared_buffer((_S302), (_S290.primal_0.vals_1[10]));

#line 199
    glsl_set_half_shared_buffer((_S303), (_S290.primal_0.vals_1[11]));

#line 199
    glsl_set_half_shared_buffer((_S304), (_S290.primal_0.vals_1[12]));

#line 199
    glsl_set_half_shared_buffer((_S305), (_S290.primal_0.vals_1[13]));

#line 199
    glsl_set_half_shared_buffer((_S306), (_S290.primal_0.vals_1[14]));

#line 199
    glsl_set_half_shared_buffer((_S307), (_S290.primal_0.vals_1[15]));

#line 199
    glsl_set_half_shared_buffer((_S308), (_S290.primal_0.vals_1[16]));

#line 199
    glsl_set_half_shared_buffer((_S309), (_S290.primal_0.vals_1[17]));

#line 199
    glsl_set_half_shared_buffer((_S310), (_S290.primal_0.vals_1[18]));

#line 199
    glsl_set_half_shared_buffer((_S311), (_S290.primal_0.vals_1[19]));

#line 199
    glsl_set_half_shared_buffer((_S312), (_S290.primal_0.vals_1[20]));

#line 199
    glsl_set_half_shared_buffer((_S313), (_S290.primal_0.vals_1[21]));

#line 199
    glsl_set_half_shared_buffer((_S314), (_S290.primal_0.vals_1[22]));

#line 199
    glsl_set_half_shared_buffer((_S315), (_S290.primal_0.vals_1[23]));

#line 199
    glsl_set_half_shared_buffer((_S316), (_S290.primal_0.vals_1[24]));

#line 199
    glsl_set_half_shared_buffer((_S317), (_S290.primal_0.vals_1[25]));

#line 199
    glsl_set_half_shared_buffer((_S318), (_S290.primal_0.vals_1[26]));

#line 199
    glsl_set_half_shared_buffer((_S319), (_S290.primal_0.vals_1[27]));

#line 199
    glsl_set_half_shared_buffer((_S320), (_S290.primal_0.vals_1[28]));

#line 199
    glsl_set_half_shared_buffer((_S321), (_S290.primal_0.vals_1[29]));

#line 199
    glsl_set_half_shared_buffer((_S322), (_S290.primal_0.vals_1[30]));

#line 199
    glsl_set_half_shared_buffer((_S323), (_S290.primal_0.vals_1[31]));


    barrier();
    glsl_wmma_32_128_32();
    barrier();



    float16_t _S356 = (glsl_get_half_shared_buffer((_S324)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 0, threadIdInWarp_0, float(_S356));

#line 208
    float16_t _S357 = (glsl_get_half_shared_buffer((_S325)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 1, threadIdInWarp_0, float(_S357));

#line 208
    float16_t _S358 = (glsl_get_half_shared_buffer((_S326)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 2, threadIdInWarp_0, float(_S358));

#line 208
    float16_t _S359 = (glsl_get_half_shared_buffer((_S327)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 3, threadIdInWarp_0, float(_S359));

#line 208
    float16_t _S360 = (glsl_get_half_shared_buffer((_S328)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 4, threadIdInWarp_0, float(_S360));

#line 208
    float16_t _S361 = (glsl_get_half_shared_buffer((_S329)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 5, threadIdInWarp_0, float(_S361));

#line 208
    float16_t _S362 = (glsl_get_half_shared_buffer((_S330)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 6, threadIdInWarp_0, float(_S362));

#line 208
    float16_t _S363 = (glsl_get_half_shared_buffer((_S331)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 7, threadIdInWarp_0, float(_S363));

#line 208
    float16_t _S364 = (glsl_get_half_shared_buffer((_S332)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 8, threadIdInWarp_0, float(_S364));

#line 208
    float16_t _S365 = (glsl_get_half_shared_buffer((_S333)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 9, threadIdInWarp_0, float(_S365));

#line 208
    float16_t _S366 = (glsl_get_half_shared_buffer((_S334)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 10, threadIdInWarp_0, float(_S366));

#line 208
    float16_t _S367 = (glsl_get_half_shared_buffer((_S335)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 11, threadIdInWarp_0, float(_S367));

#line 208
    float16_t _S368 = (glsl_get_half_shared_buffer((_S336)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 12, threadIdInWarp_0, float(_S368));

#line 208
    float16_t _S369 = (glsl_get_half_shared_buffer((_S337)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 13, threadIdInWarp_0, float(_S369));

#line 208
    float16_t _S370 = (glsl_get_half_shared_buffer((_S338)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 14, threadIdInWarp_0, float(_S370));

#line 208
    float16_t _S371 = (glsl_get_half_shared_buffer((_S339)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 15, threadIdInWarp_0, float(_S371));

#line 208
    float16_t _S372 = (glsl_get_half_shared_buffer((_S340)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 16, threadIdInWarp_0, float(_S372));

#line 208
    float16_t _S373 = (glsl_get_half_shared_buffer((_S341)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 17, threadIdInWarp_0, float(_S373));

#line 208
    float16_t _S374 = (glsl_get_half_shared_buffer((_S342)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 18, threadIdInWarp_0, float(_S374));

#line 208
    float16_t _S375 = (glsl_get_half_shared_buffer((_S343)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 19, threadIdInWarp_0, float(_S375));

#line 208
    float16_t _S376 = (glsl_get_half_shared_buffer((_S344)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 20, threadIdInWarp_0, float(_S376));

#line 208
    float16_t _S377 = (glsl_get_half_shared_buffer((_S345)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 21, threadIdInWarp_0, float(_S377));

#line 208
    float16_t _S378 = (glsl_get_half_shared_buffer((_S346)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 22, threadIdInWarp_0, float(_S378));

#line 208
    float16_t _S379 = (glsl_get_half_shared_buffer((_S347)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 23, threadIdInWarp_0, float(_S379));

#line 208
    float16_t _S380 = (glsl_get_half_shared_buffer((_S348)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 24, threadIdInWarp_0, float(_S380));

#line 208
    float16_t _S381 = (glsl_get_half_shared_buffer((_S349)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 25, threadIdInWarp_0, float(_S381));

#line 208
    float16_t _S382 = (glsl_get_half_shared_buffer((_S350)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 26, threadIdInWarp_0, float(_S382));

#line 208
    float16_t _S383 = (glsl_get_half_shared_buffer((_S351)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 27, threadIdInWarp_0, float(_S383));

#line 208
    float16_t _S384 = (glsl_get_half_shared_buffer((_S352)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 28, threadIdInWarp_0, float(_S384));

#line 208
    float16_t _S385 = (glsl_get_half_shared_buffer((_S353)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 29, threadIdInWarp_0, float(_S385));

#line 208
    float16_t _S386 = (glsl_get_half_shared_buffer((_S354)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 30, threadIdInWarp_0, float(_S386));

#line 208
    float16_t _S387 = (glsl_get_half_shared_buffer((_S355)));
    TensorView_interlocked_add_grad_2(this_14.base_0.weights_view_0, 31, threadIdInWarp_0, float(_S387));



    float16_t _S388 = (subgroupAdd((d_output_0.vals_0[0])));

#line 213
    float total_d_bias_0 = float(_S388);
    bool _S389 = (subgroupElect());

#line 214
    if(_S389)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 0, total_d_bias_0);

#line 214
    }

#line 213
    float16_t _S390 = (subgroupAdd((d_output_0.vals_0[1])));

#line 213
    float total_d_bias_1 = float(_S390);
    bool _S391 = (subgroupElect());

#line 214
    if(_S391)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 1, total_d_bias_1);

#line 214
    }

#line 213
    float16_t _S392 = (subgroupAdd((d_output_0.vals_0[2])));

#line 213
    float total_d_bias_2 = float(_S392);
    bool _S393 = (subgroupElect());

#line 214
    if(_S393)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 2, total_d_bias_2);

#line 214
    }

#line 213
    float16_t _S394 = (subgroupAdd((d_output_0.vals_0[3])));

#line 213
    float total_d_bias_3 = float(_S394);
    bool _S395 = (subgroupElect());

#line 214
    if(_S395)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 3, total_d_bias_3);

#line 214
    }

#line 213
    float16_t _S396 = (subgroupAdd((d_output_0.vals_0[4])));

#line 213
    float total_d_bias_4 = float(_S396);
    bool _S397 = (subgroupElect());

#line 214
    if(_S397)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 4, total_d_bias_4);

#line 214
    }

#line 213
    float16_t _S398 = (subgroupAdd((d_output_0.vals_0[5])));

#line 213
    float total_d_bias_5 = float(_S398);
    bool _S399 = (subgroupElect());

#line 214
    if(_S399)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 5, total_d_bias_5);

#line 214
    }

#line 213
    float16_t _S400 = (subgroupAdd((d_output_0.vals_0[6])));

#line 213
    float total_d_bias_6 = float(_S400);
    bool _S401 = (subgroupElect());

#line 214
    if(_S401)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 6, total_d_bias_6);

#line 214
    }

#line 213
    float16_t _S402 = (subgroupAdd((d_output_0.vals_0[7])));

#line 213
    float total_d_bias_7 = float(_S402);
    bool _S403 = (subgroupElect());

#line 214
    if(_S403)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 7, total_d_bias_7);

#line 214
    }

#line 213
    float16_t _S404 = (subgroupAdd((d_output_0.vals_0[8])));

#line 213
    float total_d_bias_8 = float(_S404);
    bool _S405 = (subgroupElect());

#line 214
    if(_S405)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 8, total_d_bias_8);

#line 214
    }

#line 213
    float16_t _S406 = (subgroupAdd((d_output_0.vals_0[9])));

#line 213
    float total_d_bias_9 = float(_S406);
    bool _S407 = (subgroupElect());

#line 214
    if(_S407)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 9, total_d_bias_9);

#line 214
    }

#line 213
    float16_t _S408 = (subgroupAdd((d_output_0.vals_0[10])));

#line 213
    float total_d_bias_10 = float(_S408);
    bool _S409 = (subgroupElect());

#line 214
    if(_S409)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 10, total_d_bias_10);

#line 214
    }

#line 213
    float16_t _S410 = (subgroupAdd((d_output_0.vals_0[11])));

#line 213
    float total_d_bias_11 = float(_S410);
    bool _S411 = (subgroupElect());

#line 214
    if(_S411)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 11, total_d_bias_11);

#line 214
    }

#line 213
    float16_t _S412 = (subgroupAdd((d_output_0.vals_0[12])));

#line 213
    float total_d_bias_12 = float(_S412);
    bool _S413 = (subgroupElect());

#line 214
    if(_S413)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 12, total_d_bias_12);

#line 214
    }

#line 213
    float16_t _S414 = (subgroupAdd((d_output_0.vals_0[13])));

#line 213
    float total_d_bias_13 = float(_S414);
    bool _S415 = (subgroupElect());

#line 214
    if(_S415)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 13, total_d_bias_13);

#line 214
    }

#line 213
    float16_t _S416 = (subgroupAdd((d_output_0.vals_0[14])));

#line 213
    float total_d_bias_14 = float(_S416);
    bool _S417 = (subgroupElect());

#line 214
    if(_S417)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 14, total_d_bias_14);

#line 214
    }

#line 213
    float16_t _S418 = (subgroupAdd((d_output_0.vals_0[15])));

#line 213
    float total_d_bias_15 = float(_S418);
    bool _S419 = (subgroupElect());

#line 214
    if(_S419)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 15, total_d_bias_15);

#line 214
    }

#line 213
    float16_t _S420 = (subgroupAdd((d_output_0.vals_0[16])));

#line 213
    float total_d_bias_16 = float(_S420);
    bool _S421 = (subgroupElect());

#line 214
    if(_S421)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 16, total_d_bias_16);

#line 214
    }

#line 213
    float16_t _S422 = (subgroupAdd((d_output_0.vals_0[17])));

#line 213
    float total_d_bias_17 = float(_S422);
    bool _S423 = (subgroupElect());

#line 214
    if(_S423)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 17, total_d_bias_17);

#line 214
    }

#line 213
    float16_t _S424 = (subgroupAdd((d_output_0.vals_0[18])));

#line 213
    float total_d_bias_18 = float(_S424);
    bool _S425 = (subgroupElect());

#line 214
    if(_S425)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 18, total_d_bias_18);

#line 214
    }

#line 213
    float16_t _S426 = (subgroupAdd((d_output_0.vals_0[19])));

#line 213
    float total_d_bias_19 = float(_S426);
    bool _S427 = (subgroupElect());

#line 214
    if(_S427)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 19, total_d_bias_19);

#line 214
    }

#line 213
    float16_t _S428 = (subgroupAdd((d_output_0.vals_0[20])));

#line 213
    float total_d_bias_20 = float(_S428);
    bool _S429 = (subgroupElect());

#line 214
    if(_S429)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 20, total_d_bias_20);

#line 214
    }

#line 213
    float16_t _S430 = (subgroupAdd((d_output_0.vals_0[21])));

#line 213
    float total_d_bias_21 = float(_S430);
    bool _S431 = (subgroupElect());

#line 214
    if(_S431)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 21, total_d_bias_21);

#line 214
    }

#line 213
    float16_t _S432 = (subgroupAdd((d_output_0.vals_0[22])));

#line 213
    float total_d_bias_22 = float(_S432);
    bool _S433 = (subgroupElect());

#line 214
    if(_S433)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 22, total_d_bias_22);

#line 214
    }

#line 213
    float16_t _S434 = (subgroupAdd((d_output_0.vals_0[23])));

#line 213
    float total_d_bias_23 = float(_S434);
    bool _S435 = (subgroupElect());

#line 214
    if(_S435)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 23, total_d_bias_23);

#line 214
    }

#line 213
    float16_t _S436 = (subgroupAdd((d_output_0.vals_0[24])));

#line 213
    float total_d_bias_24 = float(_S436);
    bool _S437 = (subgroupElect());

#line 214
    if(_S437)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 24, total_d_bias_24);

#line 214
    }

#line 213
    float16_t _S438 = (subgroupAdd((d_output_0.vals_0[25])));

#line 213
    float total_d_bias_25 = float(_S438);
    bool _S439 = (subgroupElect());

#line 214
    if(_S439)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 25, total_d_bias_25);

#line 214
    }

#line 213
    float16_t _S440 = (subgroupAdd((d_output_0.vals_0[26])));

#line 213
    float total_d_bias_26 = float(_S440);
    bool _S441 = (subgroupElect());

#line 214
    if(_S441)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 26, total_d_bias_26);

#line 214
    }

#line 213
    float16_t _S442 = (subgroupAdd((d_output_0.vals_0[27])));

#line 213
    float total_d_bias_27 = float(_S442);
    bool _S443 = (subgroupElect());

#line 214
    if(_S443)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 27, total_d_bias_27);

#line 214
    }

#line 213
    float16_t _S444 = (subgroupAdd((d_output_0.vals_0[28])));

#line 213
    float total_d_bias_28 = float(_S444);
    bool _S445 = (subgroupElect());

#line 214
    if(_S445)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 28, total_d_bias_28);

#line 214
    }

#line 213
    float16_t _S446 = (subgroupAdd((d_output_0.vals_0[29])));

#line 213
    float total_d_bias_29 = float(_S446);
    bool _S447 = (subgroupElect());

#line 214
    if(_S447)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 29, total_d_bias_29);

#line 214
    }

#line 213
    float16_t _S448 = (subgroupAdd((d_output_0.vals_0[30])));

#line 213
    float total_d_bias_30 = float(_S448);
    bool _S449 = (subgroupElect());

#line 214
    if(_S449)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 30, total_d_bias_30);

#line 214
    }

#line 213
    float16_t _S450 = (subgroupAdd((d_output_0.vals_0[31])));

#line 213
    float total_d_bias_31 = float(_S450);
    bool _S451 = (subgroupElect());

#line 214
    if(_S451)
    {

#line 214
        TensorView_interlocked_add_grad_0(this_14.base_0.bias_view_0, 31, total_d_bias_31);

#line 214
    }


    return;
}



void LinearHalf32X32_eval_bwd_1(LinearHalf32X32_0 layer_0, inout DiffPair_HalfFeature_0 in_feature_pair_1, s_diff_HalfFeature_0 d_output_1)
{

    LinearHalf32X32_eval_bwd_0(layer_0, in_feature_pair_1, d_output_1);

#line 225
    return;
}


#line 47
void LinearHalf_moveOutputsToLocalArray_0(LinearHalf_0 this_15, uint outPtr_0, out float16_t  outputs_0[32])
{

#line 48
    LinearHalf_loadArray_0(this_15, outPtr_0, outputs_0);

    outputs_0[0] = outputs_0[0] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 0));

#line 50
    outputs_0[1] = outputs_0[1] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 1));

#line 50
    outputs_0[2] = outputs_0[2] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 2));

#line 50
    outputs_0[3] = outputs_0[3] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 3));

#line 50
    outputs_0[4] = outputs_0[4] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 4));

#line 50
    outputs_0[5] = outputs_0[5] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 5));

#line 50
    outputs_0[6] = outputs_0[6] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 6));

#line 50
    outputs_0[7] = outputs_0[7] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 7));

#line 50
    outputs_0[8] = outputs_0[8] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 8));

#line 50
    outputs_0[9] = outputs_0[9] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 9));

#line 50
    outputs_0[10] = outputs_0[10] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 10));

#line 50
    outputs_0[11] = outputs_0[11] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 11));

#line 50
    outputs_0[12] = outputs_0[12] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 12));

#line 50
    outputs_0[13] = outputs_0[13] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 13));

#line 50
    outputs_0[14] = outputs_0[14] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 14));

#line 50
    outputs_0[15] = outputs_0[15] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 15));

#line 50
    outputs_0[16] = outputs_0[16] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 16));

#line 50
    outputs_0[17] = outputs_0[17] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 17));

#line 50
    outputs_0[18] = outputs_0[18] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 18));

#line 50
    outputs_0[19] = outputs_0[19] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 19));

#line 50
    outputs_0[20] = outputs_0[20] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 20));

#line 50
    outputs_0[21] = outputs_0[21] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 21));

#line 50
    outputs_0[22] = outputs_0[22] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 22));

#line 50
    outputs_0[23] = outputs_0[23] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 23));

#line 50
    outputs_0[24] = outputs_0[24] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 24));

#line 50
    outputs_0[25] = outputs_0[25] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 25));

#line 50
    outputs_0[26] = outputs_0[26] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 26));

#line 50
    outputs_0[27] = outputs_0[27] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 27));

#line 50
    outputs_0[28] = outputs_0[28] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 28));

#line 50
    outputs_0[29] = outputs_0[29] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 29));

#line 50
    outputs_0[30] = outputs_0[30] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 30));

#line 50
    outputs_0[31] = outputs_0[31] + float16_t(TensorView_load_prim_0(this_15.bias_view_0, 31));
    return;
}


#line 161
HalfFeature_0 LinearHalf32X32_eval_0(LinearHalf32X32_0 this_16, HalfFeature_0 in_feature_0)
{

#line 162
    barrier();

    LinearHalf_moveInputsToSharedMem_0(this_16.base_0, in_feature_0.vals_1);
    LinearHalf32X32_moveWeightsToSharedMem_1(this_16);
    barrier();

    glsl_wmma_128_32_32();
    barrier();

    HalfFeature_0 out_feature_0;

    LinearHalf_moveOutputsToLocalArray_0(this_16.base_0, LinearHalf_calcOffset_0(this_16.base_0), out_feature_0.vals_1);

    return out_feature_0;
}


#line 220
HalfFeature_0 LinearHalf32X32_eval_1(LinearHalf32X32_0 layer_1, HalfFeature_0 in_feature_1)
{

#line 221
    HalfFeature_0 _S452 = LinearHalf32X32_eval_0(layer_1, in_feature_1);

#line 221
    return _S452;
}


#line 41 4
HalfFeature_0 MLPHalf32X32_foward_0(MLPHalf32X32_0 this_17, HalfFeature_0 input_4)
{

#line 42
    HalfFeature_0 out_feature_1;

    HalfFeature_0 _S453 = LinearHalf32X32_eval_1(this_17.linears_0[0], input_4);

#line 44
    out_feature_1 = _S453;

    out_feature_1.vals_1[0] = ReLU_eval_0(out_feature_1.vals_1[0]);

#line 46
    out_feature_1.vals_1[1] = ReLU_eval_0(out_feature_1.vals_1[1]);

#line 46
    out_feature_1.vals_1[2] = ReLU_eval_0(out_feature_1.vals_1[2]);

#line 46
    out_feature_1.vals_1[3] = ReLU_eval_0(out_feature_1.vals_1[3]);

#line 46
    out_feature_1.vals_1[4] = ReLU_eval_0(out_feature_1.vals_1[4]);

#line 46
    out_feature_1.vals_1[5] = ReLU_eval_0(out_feature_1.vals_1[5]);

#line 46
    out_feature_1.vals_1[6] = ReLU_eval_0(out_feature_1.vals_1[6]);

#line 46
    out_feature_1.vals_1[7] = ReLU_eval_0(out_feature_1.vals_1[7]);

#line 46
    out_feature_1.vals_1[8] = ReLU_eval_0(out_feature_1.vals_1[8]);

#line 46
    out_feature_1.vals_1[9] = ReLU_eval_0(out_feature_1.vals_1[9]);

#line 46
    out_feature_1.vals_1[10] = ReLU_eval_0(out_feature_1.vals_1[10]);

#line 46
    out_feature_1.vals_1[11] = ReLU_eval_0(out_feature_1.vals_1[11]);

#line 46
    out_feature_1.vals_1[12] = ReLU_eval_0(out_feature_1.vals_1[12]);

#line 46
    out_feature_1.vals_1[13] = ReLU_eval_0(out_feature_1.vals_1[13]);

#line 46
    out_feature_1.vals_1[14] = ReLU_eval_0(out_feature_1.vals_1[14]);

#line 46
    out_feature_1.vals_1[15] = ReLU_eval_0(out_feature_1.vals_1[15]);

#line 46
    out_feature_1.vals_1[16] = ReLU_eval_0(out_feature_1.vals_1[16]);

#line 46
    out_feature_1.vals_1[17] = ReLU_eval_0(out_feature_1.vals_1[17]);

#line 46
    out_feature_1.vals_1[18] = ReLU_eval_0(out_feature_1.vals_1[18]);

#line 46
    out_feature_1.vals_1[19] = ReLU_eval_0(out_feature_1.vals_1[19]);

#line 46
    out_feature_1.vals_1[20] = ReLU_eval_0(out_feature_1.vals_1[20]);

#line 46
    out_feature_1.vals_1[21] = ReLU_eval_0(out_feature_1.vals_1[21]);

#line 46
    out_feature_1.vals_1[22] = ReLU_eval_0(out_feature_1.vals_1[22]);

#line 46
    out_feature_1.vals_1[23] = ReLU_eval_0(out_feature_1.vals_1[23]);

#line 46
    out_feature_1.vals_1[24] = ReLU_eval_0(out_feature_1.vals_1[24]);

#line 46
    out_feature_1.vals_1[25] = ReLU_eval_0(out_feature_1.vals_1[25]);

#line 46
    out_feature_1.vals_1[26] = ReLU_eval_0(out_feature_1.vals_1[26]);

#line 46
    out_feature_1.vals_1[27] = ReLU_eval_0(out_feature_1.vals_1[27]);

#line 46
    out_feature_1.vals_1[28] = ReLU_eval_0(out_feature_1.vals_1[28]);

#line 46
    out_feature_1.vals_1[29] = ReLU_eval_0(out_feature_1.vals_1[29]);

#line 46
    out_feature_1.vals_1[30] = ReLU_eval_0(out_feature_1.vals_1[30]);

#line 46
    out_feature_1.vals_1[31] = ReLU_eval_0(out_feature_1.vals_1[31]);

#line 44
    HalfFeature_0 _S454 = LinearHalf32X32_eval_1(this_17.linears_0[1], out_feature_1);

#line 44
    out_feature_1 = _S454;

    out_feature_1.vals_1[0] = ReLU_eval_0(out_feature_1.vals_1[0]);

#line 46
    out_feature_1.vals_1[1] = ReLU_eval_0(out_feature_1.vals_1[1]);

#line 46
    out_feature_1.vals_1[2] = ReLU_eval_0(out_feature_1.vals_1[2]);

#line 46
    out_feature_1.vals_1[3] = ReLU_eval_0(out_feature_1.vals_1[3]);

#line 46
    out_feature_1.vals_1[4] = ReLU_eval_0(out_feature_1.vals_1[4]);

#line 46
    out_feature_1.vals_1[5] = ReLU_eval_0(out_feature_1.vals_1[5]);

#line 46
    out_feature_1.vals_1[6] = ReLU_eval_0(out_feature_1.vals_1[6]);

#line 46
    out_feature_1.vals_1[7] = ReLU_eval_0(out_feature_1.vals_1[7]);

#line 46
    out_feature_1.vals_1[8] = ReLU_eval_0(out_feature_1.vals_1[8]);

#line 46
    out_feature_1.vals_1[9] = ReLU_eval_0(out_feature_1.vals_1[9]);

#line 46
    out_feature_1.vals_1[10] = ReLU_eval_0(out_feature_1.vals_1[10]);

#line 46
    out_feature_1.vals_1[11] = ReLU_eval_0(out_feature_1.vals_1[11]);

#line 46
    out_feature_1.vals_1[12] = ReLU_eval_0(out_feature_1.vals_1[12]);

#line 46
    out_feature_1.vals_1[13] = ReLU_eval_0(out_feature_1.vals_1[13]);

#line 46
    out_feature_1.vals_1[14] = ReLU_eval_0(out_feature_1.vals_1[14]);

#line 46
    out_feature_1.vals_1[15] = ReLU_eval_0(out_feature_1.vals_1[15]);

#line 46
    out_feature_1.vals_1[16] = ReLU_eval_0(out_feature_1.vals_1[16]);

#line 46
    out_feature_1.vals_1[17] = ReLU_eval_0(out_feature_1.vals_1[17]);

#line 46
    out_feature_1.vals_1[18] = ReLU_eval_0(out_feature_1.vals_1[18]);

#line 46
    out_feature_1.vals_1[19] = ReLU_eval_0(out_feature_1.vals_1[19]);

#line 46
    out_feature_1.vals_1[20] = ReLU_eval_0(out_feature_1.vals_1[20]);

#line 46
    out_feature_1.vals_1[21] = ReLU_eval_0(out_feature_1.vals_1[21]);

#line 46
    out_feature_1.vals_1[22] = ReLU_eval_0(out_feature_1.vals_1[22]);

#line 46
    out_feature_1.vals_1[23] = ReLU_eval_0(out_feature_1.vals_1[23]);

#line 46
    out_feature_1.vals_1[24] = ReLU_eval_0(out_feature_1.vals_1[24]);

#line 46
    out_feature_1.vals_1[25] = ReLU_eval_0(out_feature_1.vals_1[25]);

#line 46
    out_feature_1.vals_1[26] = ReLU_eval_0(out_feature_1.vals_1[26]);

#line 46
    out_feature_1.vals_1[27] = ReLU_eval_0(out_feature_1.vals_1[27]);

#line 46
    out_feature_1.vals_1[28] = ReLU_eval_0(out_feature_1.vals_1[28]);

#line 46
    out_feature_1.vals_1[29] = ReLU_eval_0(out_feature_1.vals_1[29]);

#line 46
    out_feature_1.vals_1[30] = ReLU_eval_0(out_feature_1.vals_1[30]);

#line 46
    out_feature_1.vals_1[31] = ReLU_eval_0(out_feature_1.vals_1[31]);

#line 44
    HalfFeature_0 _S455 = LinearHalf32X32_eval_1(this_17.linears_0[2], out_feature_1);

#line 44
    out_feature_1 = _S455;

    out_feature_1.vals_1[0] = ReLU_eval_0(out_feature_1.vals_1[0]);

#line 46
    out_feature_1.vals_1[1] = ReLU_eval_0(out_feature_1.vals_1[1]);

#line 46
    out_feature_1.vals_1[2] = ReLU_eval_0(out_feature_1.vals_1[2]);

#line 46
    out_feature_1.vals_1[3] = ReLU_eval_0(out_feature_1.vals_1[3]);

#line 46
    out_feature_1.vals_1[4] = ReLU_eval_0(out_feature_1.vals_1[4]);

#line 46
    out_feature_1.vals_1[5] = ReLU_eval_0(out_feature_1.vals_1[5]);

#line 46
    out_feature_1.vals_1[6] = ReLU_eval_0(out_feature_1.vals_1[6]);

#line 46
    out_feature_1.vals_1[7] = ReLU_eval_0(out_feature_1.vals_1[7]);

#line 46
    out_feature_1.vals_1[8] = ReLU_eval_0(out_feature_1.vals_1[8]);

#line 46
    out_feature_1.vals_1[9] = ReLU_eval_0(out_feature_1.vals_1[9]);

#line 46
    out_feature_1.vals_1[10] = ReLU_eval_0(out_feature_1.vals_1[10]);

#line 46
    out_feature_1.vals_1[11] = ReLU_eval_0(out_feature_1.vals_1[11]);

#line 46
    out_feature_1.vals_1[12] = ReLU_eval_0(out_feature_1.vals_1[12]);

#line 46
    out_feature_1.vals_1[13] = ReLU_eval_0(out_feature_1.vals_1[13]);

#line 46
    out_feature_1.vals_1[14] = ReLU_eval_0(out_feature_1.vals_1[14]);

#line 46
    out_feature_1.vals_1[15] = ReLU_eval_0(out_feature_1.vals_1[15]);

#line 46
    out_feature_1.vals_1[16] = ReLU_eval_0(out_feature_1.vals_1[16]);

#line 46
    out_feature_1.vals_1[17] = ReLU_eval_0(out_feature_1.vals_1[17]);

#line 46
    out_feature_1.vals_1[18] = ReLU_eval_0(out_feature_1.vals_1[18]);

#line 46
    out_feature_1.vals_1[19] = ReLU_eval_0(out_feature_1.vals_1[19]);

#line 46
    out_feature_1.vals_1[20] = ReLU_eval_0(out_feature_1.vals_1[20]);

#line 46
    out_feature_1.vals_1[21] = ReLU_eval_0(out_feature_1.vals_1[21]);

#line 46
    out_feature_1.vals_1[22] = ReLU_eval_0(out_feature_1.vals_1[22]);

#line 46
    out_feature_1.vals_1[23] = ReLU_eval_0(out_feature_1.vals_1[23]);

#line 46
    out_feature_1.vals_1[24] = ReLU_eval_0(out_feature_1.vals_1[24]);

#line 46
    out_feature_1.vals_1[25] = ReLU_eval_0(out_feature_1.vals_1[25]);

#line 46
    out_feature_1.vals_1[26] = ReLU_eval_0(out_feature_1.vals_1[26]);

#line 46
    out_feature_1.vals_1[27] = ReLU_eval_0(out_feature_1.vals_1[27]);

#line 46
    out_feature_1.vals_1[28] = ReLU_eval_0(out_feature_1.vals_1[28]);

#line 46
    out_feature_1.vals_1[29] = ReLU_eval_0(out_feature_1.vals_1[29]);

#line 46
    out_feature_1.vals_1[30] = ReLU_eval_0(out_feature_1.vals_1[30]);

#line 46
    out_feature_1.vals_1[31] = ReLU_eval_0(out_feature_1.vals_1[31]);
    return out_feature_1;
}

HalfFeature_0 MLPHalf32X32_forward_0(MLPHalf32X32_0 mlp_0, HalfFeature_0 input_5)
{

#line 51
    HalfFeature_0 _S456 = MLPHalf32X32_foward_0(mlp_0, input_5);

#line 51
    return _S456;
}


#line 974 5
struct DiffPair_float3_0
{
    vec3 primal_0;
    vec3 differential_0;
};


#line 992
void _d_dot_0(inout DiffPair_float3_0 dpx_1, inout DiffPair_float3_0 dpy_1, float dOut_1)
{
    vec3 x_d_result_0;

#line 994
    vec3 y_d_result_0;



    x_d_result_0[0] = dpy_1.primal_0[0] * dOut_1;
    y_d_result_0[0] = dpx_1.primal_0[0] * dOut_1;

#line 998
    x_d_result_0[1] = dpy_1.primal_0[1] * dOut_1;
    y_d_result_0[1] = dpx_1.primal_0[1] * dOut_1;

#line 998
    x_d_result_0[2] = dpy_1.primal_0[2] * dOut_1;
    y_d_result_0[2] = dpx_1.primal_0[2] * dOut_1;

#line 999
    dpx_1.primal_0 = dpx_1.primal_0;

#line 999
    dpx_1.differential_0 = x_d_result_0;

#line 999
    dpy_1.primal_0 = dpy_1.primal_0;

#line 999
    dpy_1.differential_0 = y_d_result_0;



    return;
}


#line 22 2
float L2Loss_0(vec3 x_8, vec3 y_5)
{

#line 23
    vec3 _S457 = x_8 - y_5;

#line 23
    return dot(_S457, _S457);
}


#line 58
void s_bwd_prop_dot_0(inout DiffPair_float3_0 _S458, inout DiffPair_float3_0 _S459, float _S460)
{

#line 58
    _d_dot_0(_S458, _S459, _S460);

#line 58
    return;
}


#line 58
void s_bwd_prop_L2Loss_0(inout DiffPair_float3_0 dpx_2, vec3 y_6, float _s_dOut_0)
{

#line 22
    vec3 _S461 = dpx_2.primal_0 - y_6;

#line 1226 8
    vec3 _S462 = vec3(0.0);

#line 1226
    DiffPair_float3_0 _S463;

#line 1226
    _S463.primal_0 = _S461;

#line 1226
    _S463.differential_0 = _S462;

#line 1226
    DiffPair_float3_0 _S464;

#line 1226
    _S464.primal_0 = _S461;

#line 1226
    _S464.differential_0 = _S462;

#line 1226
    s_bwd_prop_dot_0(_S463, _S464, _s_dOut_0);

#line 1233
    vec3 _S465 = _S464.differential_0 + _S463.differential_0;

#line 1233
    dpx_2.primal_0 = dpx_2.primal_0;

#line 1233
    dpx_2.differential_0 = _S465;

#line 1233
    return;
}


#line 1233
void s_bwd_L2Loss_0(inout DiffPair_float3_0 _S466, vec3 _S467, float _S468)
{

#line 1233
    s_bwd_prop_L2Loss_0(_S466, _S467, _S468);

#line 1233
    return;
}


#line 81 2
struct s_bwd_prop_MLPHalf32X32_foward_Intermediates_0
{
    HalfFeature_0 _S469;
    float16_t _S470;
    float16_t _S471;
    float16_t _S472;
    float16_t _S473;
    float16_t _S474;
    float16_t _S475;
    float16_t _S476;
    float16_t _S477;
    float16_t _S478;
    float16_t _S479;
    float16_t _S480;
    float16_t _S481;
    float16_t _S482;
    float16_t _S483;
    float16_t _S484;
    float16_t _S485;
    float16_t _S486;
    float16_t _S487;
    float16_t _S488;
    float16_t _S489;
    float16_t _S490;
    float16_t _S491;
    float16_t _S492;
    float16_t _S493;
    float16_t _S494;
    float16_t _S495;
    float16_t _S496;
    float16_t _S497;
    float16_t _S498;
    float16_t _S499;
    float16_t _S500;
    float16_t _S501;
    HalfFeature_0 _S502;
    float16_t _S503;
    float16_t _S504;
    float16_t _S505;
    float16_t _S506;
    float16_t _S507;
    float16_t _S508;
    float16_t _S509;
    float16_t _S510;
    float16_t _S511;
    float16_t _S512;
    float16_t _S513;
    float16_t _S514;
    float16_t _S515;
    float16_t _S516;
    float16_t _S517;
    float16_t _S518;
    float16_t _S519;
    float16_t _S520;
    float16_t _S521;
    float16_t _S522;
    float16_t _S523;
    float16_t _S524;
    float16_t _S525;
    float16_t _S526;
    float16_t _S527;
    float16_t _S528;
    float16_t _S529;
    float16_t _S530;
    float16_t _S531;
    float16_t _S532;
    float16_t _S533;
    float16_t _S534;
    HalfFeature_0 _S535;
};


#line 81
struct s_bwd_prop_MLPHalf32X32_forward_Intermediates_0
{
    s_bwd_prop_MLPHalf32X32_foward_Intermediates_0 _S536;
};


#line 81
HalfFeature_0 s_primal_ctx_LinearHalf32X32_eval_0(LinearHalf32X32_0 _S537, HalfFeature_0 _S538)
{

#line 81
    HalfFeature_0 _S539 = LinearHalf32X32_eval_1(_S537, _S538);

#line 81
    return _S539;
}


#line 81
float16_t s_bwd_primal_ReLU_eval_0(float16_t dpx_3)
{

#line 81
    return s_primal_ctx_max_0(0.0HF, dpx_3);
}


#line 81
HalfFeature_0 s_bwd_primal_MLPHalf32X32_foward_0(MLPHalf32X32_0 this_18, HalfFeature_0 dpinput_0, out s_bwd_prop_MLPHalf32X32_foward_Intermediates_0 _s_diff_ctx_0)
{

#line 41 4
    float16_t  _S540[32] = { 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF };

#line 41
    HalfFeature_0 _S541 = { _S540 };

#line 41
    _s_diff_ctx_0._S469 = _S541;

#line 41
    _s_diff_ctx_0._S470 = 0.0HF;

#line 41
    _s_diff_ctx_0._S471 = 0.0HF;

#line 41
    _s_diff_ctx_0._S472 = 0.0HF;

#line 41
    _s_diff_ctx_0._S473 = 0.0HF;

#line 41
    _s_diff_ctx_0._S474 = 0.0HF;

#line 41
    _s_diff_ctx_0._S475 = 0.0HF;

#line 41
    _s_diff_ctx_0._S476 = 0.0HF;

#line 41
    _s_diff_ctx_0._S477 = 0.0HF;

#line 41
    _s_diff_ctx_0._S478 = 0.0HF;

#line 41
    _s_diff_ctx_0._S479 = 0.0HF;

#line 41
    _s_diff_ctx_0._S480 = 0.0HF;

#line 41
    _s_diff_ctx_0._S481 = 0.0HF;

#line 41
    _s_diff_ctx_0._S482 = 0.0HF;

#line 41
    _s_diff_ctx_0._S483 = 0.0HF;

#line 41
    _s_diff_ctx_0._S484 = 0.0HF;

#line 41
    _s_diff_ctx_0._S485 = 0.0HF;

#line 41
    _s_diff_ctx_0._S486 = 0.0HF;

#line 41
    _s_diff_ctx_0._S487 = 0.0HF;

#line 41
    _s_diff_ctx_0._S488 = 0.0HF;

#line 41
    _s_diff_ctx_0._S489 = 0.0HF;

#line 41
    _s_diff_ctx_0._S490 = 0.0HF;

#line 41
    _s_diff_ctx_0._S491 = 0.0HF;

#line 41
    _s_diff_ctx_0._S492 = 0.0HF;

#line 41
    _s_diff_ctx_0._S493 = 0.0HF;

#line 41
    _s_diff_ctx_0._S494 = 0.0HF;

#line 41
    _s_diff_ctx_0._S495 = 0.0HF;

#line 41
    _s_diff_ctx_0._S496 = 0.0HF;

#line 41
    _s_diff_ctx_0._S497 = 0.0HF;

#line 41
    _s_diff_ctx_0._S498 = 0.0HF;

#line 41
    _s_diff_ctx_0._S499 = 0.0HF;

#line 41
    _s_diff_ctx_0._S500 = 0.0HF;

#line 41
    _s_diff_ctx_0._S501 = 0.0HF;

#line 41
    _s_diff_ctx_0._S502 = _S541;

#line 41
    _s_diff_ctx_0._S503 = 0.0HF;

#line 41
    _s_diff_ctx_0._S504 = 0.0HF;

#line 41
    _s_diff_ctx_0._S505 = 0.0HF;

#line 41
    _s_diff_ctx_0._S506 = 0.0HF;

#line 41
    _s_diff_ctx_0._S507 = 0.0HF;

#line 41
    _s_diff_ctx_0._S508 = 0.0HF;

#line 41
    _s_diff_ctx_0._S509 = 0.0HF;

#line 41
    _s_diff_ctx_0._S510 = 0.0HF;

#line 41
    _s_diff_ctx_0._S511 = 0.0HF;

#line 41
    _s_diff_ctx_0._S512 = 0.0HF;

#line 41
    _s_diff_ctx_0._S513 = 0.0HF;

#line 41
    _s_diff_ctx_0._S514 = 0.0HF;

#line 41
    _s_diff_ctx_0._S515 = 0.0HF;

#line 41
    _s_diff_ctx_0._S516 = 0.0HF;

#line 41
    _s_diff_ctx_0._S517 = 0.0HF;

#line 41
    _s_diff_ctx_0._S518 = 0.0HF;

#line 41
    _s_diff_ctx_0._S519 = 0.0HF;

#line 41
    _s_diff_ctx_0._S520 = 0.0HF;

#line 41
    _s_diff_ctx_0._S521 = 0.0HF;

#line 41
    _s_diff_ctx_0._S522 = 0.0HF;

#line 41
    _s_diff_ctx_0._S523 = 0.0HF;

#line 41
    _s_diff_ctx_0._S524 = 0.0HF;

#line 41
    _s_diff_ctx_0._S525 = 0.0HF;

#line 41
    _s_diff_ctx_0._S526 = 0.0HF;

#line 41
    _s_diff_ctx_0._S527 = 0.0HF;

#line 41
    _s_diff_ctx_0._S528 = 0.0HF;

#line 41
    _s_diff_ctx_0._S529 = 0.0HF;

#line 41
    _s_diff_ctx_0._S530 = 0.0HF;

#line 41
    _s_diff_ctx_0._S531 = 0.0HF;

#line 41
    _s_diff_ctx_0._S532 = 0.0HF;

#line 41
    _s_diff_ctx_0._S533 = 0.0HF;

#line 41
    _s_diff_ctx_0._S534 = 0.0HF;

#line 41
    _s_diff_ctx_0._S535 = _S541;

#line 41
    HalfFeature_0 _S542 = s_primal_ctx_LinearHalf32X32_eval_0(this_18.linears_0[0], dpinput_0);

#line 41
    _s_diff_ctx_0._S469 = _S542;

#line 41
    float16_t _S543 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[0]);

#line 41
    _s_diff_ctx_0._S470 = _S543;

#line 41
    HalfFeature_0 _S544 = _S542;

#line 41
    _S544.vals_1[0] = _S543;

#line 41
    float16_t _S545 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[1]);

#line 41
    _s_diff_ctx_0._S471 = _S545;

#line 41
    _S544.vals_1[1] = _S545;

#line 41
    float16_t _S546 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[2]);

#line 41
    _s_diff_ctx_0._S472 = _S546;

#line 41
    _S544.vals_1[2] = _S546;

#line 41
    float16_t _S547 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[3]);

#line 41
    _s_diff_ctx_0._S473 = _S547;

#line 41
    _S544.vals_1[3] = _S547;

#line 41
    float16_t _S548 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[4]);

#line 41
    _s_diff_ctx_0._S474 = _S548;

#line 41
    _S544.vals_1[4] = _S548;

#line 41
    float16_t _S549 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[5]);

#line 41
    _s_diff_ctx_0._S475 = _S549;

#line 41
    _S544.vals_1[5] = _S549;

#line 41
    float16_t _S550 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[6]);

#line 41
    _s_diff_ctx_0._S476 = _S550;

#line 41
    _S544.vals_1[6] = _S550;

#line 41
    float16_t _S551 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[7]);

#line 41
    _s_diff_ctx_0._S477 = _S551;

#line 41
    _S544.vals_1[7] = _S551;

#line 41
    float16_t _S552 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[8]);

#line 41
    _s_diff_ctx_0._S478 = _S552;

#line 41
    _S544.vals_1[8] = _S552;

#line 41
    float16_t _S553 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[9]);

#line 41
    _s_diff_ctx_0._S479 = _S553;

#line 41
    _S544.vals_1[9] = _S553;

#line 41
    float16_t _S554 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[10]);

#line 41
    _s_diff_ctx_0._S480 = _S554;

#line 41
    _S544.vals_1[10] = _S554;

#line 41
    float16_t _S555 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[11]);

#line 41
    _s_diff_ctx_0._S481 = _S555;

#line 41
    _S544.vals_1[11] = _S555;

#line 41
    float16_t _S556 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[12]);

#line 41
    _s_diff_ctx_0._S482 = _S556;

#line 41
    _S544.vals_1[12] = _S556;

#line 41
    float16_t _S557 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[13]);

#line 41
    _s_diff_ctx_0._S483 = _S557;

#line 41
    _S544.vals_1[13] = _S557;

#line 41
    float16_t _S558 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[14]);

#line 41
    _s_diff_ctx_0._S484 = _S558;

#line 41
    _S544.vals_1[14] = _S558;

#line 41
    float16_t _S559 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[15]);

#line 41
    _s_diff_ctx_0._S485 = _S559;

#line 41
    _S544.vals_1[15] = _S559;

#line 41
    float16_t _S560 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[16]);

#line 41
    _s_diff_ctx_0._S486 = _S560;

#line 41
    _S544.vals_1[16] = _S560;

#line 41
    float16_t _S561 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[17]);

#line 41
    _s_diff_ctx_0._S487 = _S561;

#line 41
    _S544.vals_1[17] = _S561;

#line 41
    float16_t _S562 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[18]);

#line 41
    _s_diff_ctx_0._S488 = _S562;

#line 41
    _S544.vals_1[18] = _S562;

#line 41
    float16_t _S563 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[19]);

#line 41
    _s_diff_ctx_0._S489 = _S563;

#line 41
    _S544.vals_1[19] = _S563;

#line 41
    float16_t _S564 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[20]);

#line 41
    _s_diff_ctx_0._S490 = _S564;

#line 41
    _S544.vals_1[20] = _S564;

#line 41
    float16_t _S565 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[21]);

#line 41
    _s_diff_ctx_0._S491 = _S565;

#line 41
    _S544.vals_1[21] = _S565;

#line 41
    float16_t _S566 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[22]);

#line 41
    _s_diff_ctx_0._S492 = _S566;

#line 41
    _S544.vals_1[22] = _S566;

#line 41
    float16_t _S567 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[23]);

#line 41
    _s_diff_ctx_0._S493 = _S567;

#line 41
    _S544.vals_1[23] = _S567;

#line 41
    float16_t _S568 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[24]);

#line 41
    _s_diff_ctx_0._S494 = _S568;

#line 41
    _S544.vals_1[24] = _S568;

#line 41
    float16_t _S569 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[25]);

#line 41
    _s_diff_ctx_0._S495 = _S569;

#line 41
    _S544.vals_1[25] = _S569;

#line 41
    float16_t _S570 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[26]);

#line 41
    _s_diff_ctx_0._S496 = _S570;

#line 41
    _S544.vals_1[26] = _S570;

#line 41
    float16_t _S571 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[27]);

#line 41
    _s_diff_ctx_0._S497 = _S571;

#line 41
    _S544.vals_1[27] = _S571;

#line 41
    float16_t _S572 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[28]);

#line 41
    _s_diff_ctx_0._S498 = _S572;

#line 41
    _S544.vals_1[28] = _S572;

#line 41
    float16_t _S573 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[29]);

#line 41
    _s_diff_ctx_0._S499 = _S573;

#line 41
    _S544.vals_1[29] = _S573;

#line 41
    float16_t _S574 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[30]);

#line 41
    _s_diff_ctx_0._S500 = _S574;

#line 41
    _S544.vals_1[30] = _S574;

#line 41
    float16_t _S575 = s_bwd_primal_ReLU_eval_0(_S542.vals_1[31]);

#line 41
    _s_diff_ctx_0._S501 = _S575;

#line 41
    _S544.vals_1[31] = _S575;

#line 41
    HalfFeature_0 _S576 = s_primal_ctx_LinearHalf32X32_eval_0(this_18.linears_0[1], _S544);

#line 41
    _s_diff_ctx_0._S502 = _S576;

#line 41
    float16_t _S577 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[0]);

#line 41
    _s_diff_ctx_0._S503 = _S577;

#line 41
    _S544 = _S576;

#line 41
    _S544.vals_1[0] = _S577;

#line 41
    float16_t _S578 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[1]);

#line 41
    _s_diff_ctx_0._S504 = _S578;

#line 41
    _S544.vals_1[1] = _S578;

#line 41
    float16_t _S579 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[2]);

#line 41
    _s_diff_ctx_0._S505 = _S579;

#line 41
    _S544.vals_1[2] = _S579;

#line 41
    float16_t _S580 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[3]);

#line 41
    _s_diff_ctx_0._S506 = _S580;

#line 41
    _S544.vals_1[3] = _S580;

#line 41
    float16_t _S581 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[4]);

#line 41
    _s_diff_ctx_0._S507 = _S581;

#line 41
    _S544.vals_1[4] = _S581;

#line 41
    float16_t _S582 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[5]);

#line 41
    _s_diff_ctx_0._S508 = _S582;

#line 41
    _S544.vals_1[5] = _S582;

#line 41
    float16_t _S583 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[6]);

#line 41
    _s_diff_ctx_0._S509 = _S583;

#line 41
    _S544.vals_1[6] = _S583;

#line 41
    float16_t _S584 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[7]);

#line 41
    _s_diff_ctx_0._S510 = _S584;

#line 41
    _S544.vals_1[7] = _S584;

#line 41
    float16_t _S585 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[8]);

#line 41
    _s_diff_ctx_0._S511 = _S585;

#line 41
    _S544.vals_1[8] = _S585;

#line 41
    float16_t _S586 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[9]);

#line 41
    _s_diff_ctx_0._S512 = _S586;

#line 41
    _S544.vals_1[9] = _S586;

#line 41
    float16_t _S587 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[10]);

#line 41
    _s_diff_ctx_0._S513 = _S587;

#line 41
    _S544.vals_1[10] = _S587;

#line 41
    float16_t _S588 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[11]);

#line 41
    _s_diff_ctx_0._S514 = _S588;

#line 41
    _S544.vals_1[11] = _S588;

#line 41
    float16_t _S589 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[12]);

#line 41
    _s_diff_ctx_0._S515 = _S589;

#line 41
    _S544.vals_1[12] = _S589;

#line 41
    float16_t _S590 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[13]);

#line 41
    _s_diff_ctx_0._S516 = _S590;

#line 41
    _S544.vals_1[13] = _S590;

#line 41
    float16_t _S591 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[14]);

#line 41
    _s_diff_ctx_0._S517 = _S591;

#line 41
    _S544.vals_1[14] = _S591;

#line 41
    float16_t _S592 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[15]);

#line 41
    _s_diff_ctx_0._S518 = _S592;

#line 41
    _S544.vals_1[15] = _S592;

#line 41
    float16_t _S593 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[16]);

#line 41
    _s_diff_ctx_0._S519 = _S593;

#line 41
    _S544.vals_1[16] = _S593;

#line 41
    float16_t _S594 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[17]);

#line 41
    _s_diff_ctx_0._S520 = _S594;

#line 41
    _S544.vals_1[17] = _S594;

#line 41
    float16_t _S595 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[18]);

#line 41
    _s_diff_ctx_0._S521 = _S595;

#line 41
    _S544.vals_1[18] = _S595;

#line 41
    float16_t _S596 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[19]);

#line 41
    _s_diff_ctx_0._S522 = _S596;

#line 41
    _S544.vals_1[19] = _S596;

#line 41
    float16_t _S597 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[20]);

#line 41
    _s_diff_ctx_0._S523 = _S597;

#line 41
    _S544.vals_1[20] = _S597;

#line 41
    float16_t _S598 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[21]);

#line 41
    _s_diff_ctx_0._S524 = _S598;

#line 41
    _S544.vals_1[21] = _S598;

#line 41
    float16_t _S599 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[22]);

#line 41
    _s_diff_ctx_0._S525 = _S599;

#line 41
    _S544.vals_1[22] = _S599;

#line 41
    float16_t _S600 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[23]);

#line 41
    _s_diff_ctx_0._S526 = _S600;

#line 41
    _S544.vals_1[23] = _S600;

#line 41
    float16_t _S601 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[24]);

#line 41
    _s_diff_ctx_0._S527 = _S601;

#line 41
    _S544.vals_1[24] = _S601;

#line 41
    float16_t _S602 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[25]);

#line 41
    _s_diff_ctx_0._S528 = _S602;

#line 41
    _S544.vals_1[25] = _S602;

#line 41
    float16_t _S603 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[26]);

#line 41
    _s_diff_ctx_0._S529 = _S603;

#line 41
    _S544.vals_1[26] = _S603;

#line 41
    float16_t _S604 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[27]);

#line 41
    _s_diff_ctx_0._S530 = _S604;

#line 41
    _S544.vals_1[27] = _S604;

#line 41
    float16_t _S605 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[28]);

#line 41
    _s_diff_ctx_0._S531 = _S605;

#line 41
    _S544.vals_1[28] = _S605;

#line 41
    float16_t _S606 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[29]);

#line 41
    _s_diff_ctx_0._S532 = _S606;

#line 41
    _S544.vals_1[29] = _S606;

#line 41
    float16_t _S607 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[30]);

#line 41
    _s_diff_ctx_0._S533 = _S607;

#line 41
    _S544.vals_1[30] = _S607;

#line 41
    float16_t _S608 = s_bwd_primal_ReLU_eval_0(_S576.vals_1[31]);

#line 41
    _s_diff_ctx_0._S534 = _S608;

#line 41
    _S544.vals_1[31] = _S608;

#line 41
    HalfFeature_0 _S609 = s_primal_ctx_LinearHalf32X32_eval_0(this_18.linears_0[2], _S544);

#line 41
    _s_diff_ctx_0._S535 = _S609;

#line 41
    float16_t _S610 = s_bwd_primal_ReLU_eval_0(_S609.vals_1[0]);

#line 41
    _S544 = _S609;

#line 41
    _S544.vals_1[0] = _S610;

#line 41
    _S544.vals_1[1] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[1]);

#line 41
    _S544.vals_1[2] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[2]);

#line 41
    _S544.vals_1[3] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[3]);

#line 41
    _S544.vals_1[4] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[4]);

#line 41
    _S544.vals_1[5] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[5]);

#line 41
    _S544.vals_1[6] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[6]);

#line 41
    _S544.vals_1[7] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[7]);

#line 41
    _S544.vals_1[8] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[8]);

#line 41
    _S544.vals_1[9] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[9]);

#line 41
    _S544.vals_1[10] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[10]);

#line 41
    _S544.vals_1[11] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[11]);

#line 41
    _S544.vals_1[12] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[12]);

#line 41
    _S544.vals_1[13] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[13]);

#line 41
    _S544.vals_1[14] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[14]);

#line 41
    _S544.vals_1[15] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[15]);

#line 41
    _S544.vals_1[16] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[16]);

#line 41
    _S544.vals_1[17] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[17]);

#line 41
    _S544.vals_1[18] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[18]);

#line 41
    _S544.vals_1[19] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[19]);

#line 41
    _S544.vals_1[20] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[20]);

#line 41
    _S544.vals_1[21] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[21]);

#line 41
    _S544.vals_1[22] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[22]);

#line 41
    _S544.vals_1[23] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[23]);

#line 41
    _S544.vals_1[24] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[24]);

#line 41
    _S544.vals_1[25] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[25]);

#line 41
    _S544.vals_1[26] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[26]);

#line 41
    _S544.vals_1[27] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[27]);

#line 41
    _S544.vals_1[28] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[28]);

#line 41
    _S544.vals_1[29] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[29]);

#line 41
    _S544.vals_1[30] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[30]);

#line 41
    _S544.vals_1[31] = s_bwd_primal_ReLU_eval_0(_S609.vals_1[31]);

#line 41
    return _S544;
}


#line 41
HalfFeature_0 s_bwd_primal_MLPHalf32X32_forward_0(MLPHalf32X32_0 mlp_1, HalfFeature_0 dpinput_1, out s_bwd_prop_MLPHalf32X32_forward_Intermediates_0 _s_diff_ctx_1)
{

#line 50
    float16_t  _S611[32] = { 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF };

#line 50
    HalfFeature_0 _S612 = { _S611 };

#line 50
    s_bwd_prop_MLPHalf32X32_foward_Intermediates_0 _S613 = { _S612, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, _S612, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, _S612 };

#line 50
    _s_diff_ctx_1._S536 = _S613;

#line 50
    HalfFeature_0 _S614 = s_bwd_primal_MLPHalf32X32_foward_0(mlp_1, dpinput_1, _s_diff_ctx_1._S536);

#line 50
    return _S614;
}


#line 50
void s_bwd_prop_ReLU_eval_0(inout DiffPair_half_0 dpx_4, float16_t _s_dOut_1)
{

#line 50
    DiffPair_half_0 _S615;

#line 50
    _S615.primal_0 = 0.0HF;

#line 50
    _S615.differential_0 = 0.0HF;

#line 50
    DiffPair_half_0 _S616;

#line 50
    _S616.primal_0 = dpx_4.primal_0;

#line 50
    _S616.differential_0 = 0.0HF;

#line 50
    s_bwd_prop_max_0(_S615, _S616, _s_dOut_1);

#line 50
    dpx_4.primal_0 = dpx_4.primal_0;

#line 50
    dpx_4.differential_0 = _S616.differential_0;

#line 50
    return;
}


#line 50
void s_bwd_prop_LinearHalf32X32_eval_0(LinearHalf32X32_0 _S617, inout DiffPair_HalfFeature_0 _S618, s_diff_HalfFeature_0 _S619)
{

#line 50
    LinearHalf32X32_eval_bwd_1(_S617, _S618, _S619);

#line 50
    return;
}


#line 50
void s_bwd_prop_MLPHalf32X32_foward_0(MLPHalf32X32_0 this_19, inout DiffPair_HalfFeature_0 dpinput_2, s_diff_HalfFeature_0 _s_dOut_2, s_bwd_prop_MLPHalf32X32_foward_Intermediates_0 _s_diff_ctx_2)
{

#line 41
    HalfFeature_0 _S620 = _s_diff_ctx_2._S469;

#line 41
    _S620.vals_1[0] = _s_diff_ctx_2._S470;

#line 41
    _S620.vals_1[1] = _s_diff_ctx_2._S471;

#line 41
    _S620.vals_1[2] = _s_diff_ctx_2._S472;

#line 41
    _S620.vals_1[3] = _s_diff_ctx_2._S473;

#line 41
    _S620.vals_1[4] = _s_diff_ctx_2._S474;

#line 41
    _S620.vals_1[5] = _s_diff_ctx_2._S475;

#line 41
    _S620.vals_1[6] = _s_diff_ctx_2._S476;

#line 41
    _S620.vals_1[7] = _s_diff_ctx_2._S477;

#line 41
    _S620.vals_1[8] = _s_diff_ctx_2._S478;

#line 41
    _S620.vals_1[9] = _s_diff_ctx_2._S479;

#line 41
    _S620.vals_1[10] = _s_diff_ctx_2._S480;

#line 41
    _S620.vals_1[11] = _s_diff_ctx_2._S481;

#line 41
    _S620.vals_1[12] = _s_diff_ctx_2._S482;

#line 41
    _S620.vals_1[13] = _s_diff_ctx_2._S483;

#line 41
    _S620.vals_1[14] = _s_diff_ctx_2._S484;

#line 41
    _S620.vals_1[15] = _s_diff_ctx_2._S485;

#line 41
    _S620.vals_1[16] = _s_diff_ctx_2._S486;

#line 41
    _S620.vals_1[17] = _s_diff_ctx_2._S487;

#line 41
    _S620.vals_1[18] = _s_diff_ctx_2._S488;

#line 41
    _S620.vals_1[19] = _s_diff_ctx_2._S489;

#line 41
    _S620.vals_1[20] = _s_diff_ctx_2._S490;

#line 41
    _S620.vals_1[21] = _s_diff_ctx_2._S491;

#line 41
    _S620.vals_1[22] = _s_diff_ctx_2._S492;

#line 41
    _S620.vals_1[23] = _s_diff_ctx_2._S493;

#line 41
    _S620.vals_1[24] = _s_diff_ctx_2._S494;

#line 41
    _S620.vals_1[25] = _s_diff_ctx_2._S495;

#line 41
    _S620.vals_1[26] = _s_diff_ctx_2._S496;

#line 41
    _S620.vals_1[27] = _s_diff_ctx_2._S497;

#line 41
    _S620.vals_1[28] = _s_diff_ctx_2._S498;

#line 41
    _S620.vals_1[29] = _s_diff_ctx_2._S499;

#line 41
    _S620.vals_1[30] = _s_diff_ctx_2._S500;

#line 41
    _S620.vals_1[31] = _s_diff_ctx_2._S501;

#line 41
    HalfFeature_0 _S621 = _s_diff_ctx_2._S502;

#line 41
    _S621.vals_1[0] = _s_diff_ctx_2._S503;

#line 41
    _S621.vals_1[1] = _s_diff_ctx_2._S504;

#line 41
    _S621.vals_1[2] = _s_diff_ctx_2._S505;

#line 41
    _S621.vals_1[3] = _s_diff_ctx_2._S506;

#line 41
    _S621.vals_1[4] = _s_diff_ctx_2._S507;

#line 41
    _S621.vals_1[5] = _s_diff_ctx_2._S508;

#line 41
    _S621.vals_1[6] = _s_diff_ctx_2._S509;

#line 41
    _S621.vals_1[7] = _s_diff_ctx_2._S510;

#line 41
    _S621.vals_1[8] = _s_diff_ctx_2._S511;

#line 41
    _S621.vals_1[9] = _s_diff_ctx_2._S512;

#line 41
    _S621.vals_1[10] = _s_diff_ctx_2._S513;

#line 41
    _S621.vals_1[11] = _s_diff_ctx_2._S514;

#line 41
    _S621.vals_1[12] = _s_diff_ctx_2._S515;

#line 41
    _S621.vals_1[13] = _s_diff_ctx_2._S516;

#line 41
    _S621.vals_1[14] = _s_diff_ctx_2._S517;

#line 41
    _S621.vals_1[15] = _s_diff_ctx_2._S518;

#line 41
    _S621.vals_1[16] = _s_diff_ctx_2._S519;

#line 41
    _S621.vals_1[17] = _s_diff_ctx_2._S520;

#line 41
    _S621.vals_1[18] = _s_diff_ctx_2._S521;

#line 41
    _S621.vals_1[19] = _s_diff_ctx_2._S522;

#line 41
    _S621.vals_1[20] = _s_diff_ctx_2._S523;

#line 41
    _S621.vals_1[21] = _s_diff_ctx_2._S524;

#line 41
    _S621.vals_1[22] = _s_diff_ctx_2._S525;

#line 41
    _S621.vals_1[23] = _s_diff_ctx_2._S526;

#line 41
    _S621.vals_1[24] = _s_diff_ctx_2._S527;

#line 41
    _S621.vals_1[25] = _s_diff_ctx_2._S528;

#line 41
    _S621.vals_1[26] = _s_diff_ctx_2._S529;

#line 41
    _S621.vals_1[27] = _s_diff_ctx_2._S530;

#line 41
    _S621.vals_1[28] = _s_diff_ctx_2._S531;

#line 41
    _S621.vals_1[29] = _s_diff_ctx_2._S532;

#line 41
    _S621.vals_1[30] = _s_diff_ctx_2._S533;

#line 41
    _S621.vals_1[31] = _s_diff_ctx_2._S534;

#line 41
    s_diff_HalfFeature_0 _S622 = _s_dOut_2;

#line 41
    _S622.vals_0[31] = 0.0HF;

#line 41
    DiffPair_half_0 _S623;

#line 41
    _S623.primal_0 = _s_diff_ctx_2._S535.vals_1[31];

#line 41
    _S623.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S623, _s_dOut_2.vals_0[31]);

#line 41
    _S622.vals_0[30] = 0.0HF;

#line 41
    DiffPair_half_0 _S624;

#line 41
    _S624.primal_0 = _s_diff_ctx_2._S535.vals_1[30];

#line 41
    _S624.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S624, _s_dOut_2.vals_0[30]);

#line 41
    _S622.vals_0[29] = 0.0HF;

#line 41
    DiffPair_half_0 _S625;

#line 41
    _S625.primal_0 = _s_diff_ctx_2._S535.vals_1[29];

#line 41
    _S625.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S625, _s_dOut_2.vals_0[29]);

#line 41
    _S622.vals_0[28] = 0.0HF;

#line 41
    DiffPair_half_0 _S626;

#line 41
    _S626.primal_0 = _s_diff_ctx_2._S535.vals_1[28];

#line 41
    _S626.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S626, _s_dOut_2.vals_0[28]);

#line 41
    _S622.vals_0[27] = 0.0HF;

#line 41
    DiffPair_half_0 _S627;

#line 41
    _S627.primal_0 = _s_diff_ctx_2._S535.vals_1[27];

#line 41
    _S627.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S627, _s_dOut_2.vals_0[27]);

#line 41
    _S622.vals_0[26] = 0.0HF;

#line 41
    DiffPair_half_0 _S628;

#line 41
    _S628.primal_0 = _s_diff_ctx_2._S535.vals_1[26];

#line 41
    _S628.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S628, _s_dOut_2.vals_0[26]);

#line 41
    _S622.vals_0[25] = 0.0HF;

#line 41
    DiffPair_half_0 _S629;

#line 41
    _S629.primal_0 = _s_diff_ctx_2._S535.vals_1[25];

#line 41
    _S629.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S629, _s_dOut_2.vals_0[25]);

#line 41
    _S622.vals_0[24] = 0.0HF;

#line 41
    DiffPair_half_0 _S630;

#line 41
    _S630.primal_0 = _s_diff_ctx_2._S535.vals_1[24];

#line 41
    _S630.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S630, _s_dOut_2.vals_0[24]);

#line 41
    _S622.vals_0[23] = 0.0HF;

#line 41
    DiffPair_half_0 _S631;

#line 41
    _S631.primal_0 = _s_diff_ctx_2._S535.vals_1[23];

#line 41
    _S631.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S631, _s_dOut_2.vals_0[23]);

#line 41
    _S622.vals_0[22] = 0.0HF;

#line 41
    DiffPair_half_0 _S632;

#line 41
    _S632.primal_0 = _s_diff_ctx_2._S535.vals_1[22];

#line 41
    _S632.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S632, _s_dOut_2.vals_0[22]);

#line 41
    _S622.vals_0[21] = 0.0HF;

#line 41
    DiffPair_half_0 _S633;

#line 41
    _S633.primal_0 = _s_diff_ctx_2._S535.vals_1[21];

#line 41
    _S633.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S633, _s_dOut_2.vals_0[21]);

#line 41
    _S622.vals_0[20] = 0.0HF;

#line 41
    DiffPair_half_0 _S634;

#line 41
    _S634.primal_0 = _s_diff_ctx_2._S535.vals_1[20];

#line 41
    _S634.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S634, _s_dOut_2.vals_0[20]);

#line 41
    _S622.vals_0[19] = 0.0HF;

#line 41
    DiffPair_half_0 _S635;

#line 41
    _S635.primal_0 = _s_diff_ctx_2._S535.vals_1[19];

#line 41
    _S635.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S635, _s_dOut_2.vals_0[19]);

#line 41
    _S622.vals_0[18] = 0.0HF;

#line 41
    DiffPair_half_0 _S636;

#line 41
    _S636.primal_0 = _s_diff_ctx_2._S535.vals_1[18];

#line 41
    _S636.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S636, _s_dOut_2.vals_0[18]);

#line 41
    _S622.vals_0[17] = 0.0HF;

#line 41
    DiffPair_half_0 _S637;

#line 41
    _S637.primal_0 = _s_diff_ctx_2._S535.vals_1[17];

#line 41
    _S637.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S637, _s_dOut_2.vals_0[17]);

#line 41
    _S622.vals_0[16] = 0.0HF;

#line 41
    DiffPair_half_0 _S638;

#line 41
    _S638.primal_0 = _s_diff_ctx_2._S535.vals_1[16];

#line 41
    _S638.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S638, _s_dOut_2.vals_0[16]);

#line 41
    _S622.vals_0[15] = 0.0HF;

#line 41
    DiffPair_half_0 _S639;

#line 41
    _S639.primal_0 = _s_diff_ctx_2._S535.vals_1[15];

#line 41
    _S639.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S639, _s_dOut_2.vals_0[15]);

#line 41
    _S622.vals_0[14] = 0.0HF;

#line 41
    DiffPair_half_0 _S640;

#line 41
    _S640.primal_0 = _s_diff_ctx_2._S535.vals_1[14];

#line 41
    _S640.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S640, _s_dOut_2.vals_0[14]);

#line 41
    _S622.vals_0[13] = 0.0HF;

#line 41
    DiffPair_half_0 _S641;

#line 41
    _S641.primal_0 = _s_diff_ctx_2._S535.vals_1[13];

#line 41
    _S641.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S641, _s_dOut_2.vals_0[13]);

#line 41
    _S622.vals_0[12] = 0.0HF;

#line 41
    DiffPair_half_0 _S642;

#line 41
    _S642.primal_0 = _s_diff_ctx_2._S535.vals_1[12];

#line 41
    _S642.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S642, _s_dOut_2.vals_0[12]);

#line 41
    _S622.vals_0[11] = 0.0HF;

#line 41
    DiffPair_half_0 _S643;

#line 41
    _S643.primal_0 = _s_diff_ctx_2._S535.vals_1[11];

#line 41
    _S643.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S643, _s_dOut_2.vals_0[11]);

#line 41
    _S622.vals_0[10] = 0.0HF;

#line 41
    DiffPair_half_0 _S644;

#line 41
    _S644.primal_0 = _s_diff_ctx_2._S535.vals_1[10];

#line 41
    _S644.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S644, _s_dOut_2.vals_0[10]);

#line 41
    _S622.vals_0[9] = 0.0HF;

#line 41
    DiffPair_half_0 _S645;

#line 41
    _S645.primal_0 = _s_diff_ctx_2._S535.vals_1[9];

#line 41
    _S645.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S645, _s_dOut_2.vals_0[9]);

#line 41
    _S622.vals_0[8] = 0.0HF;

#line 41
    DiffPair_half_0 _S646;

#line 41
    _S646.primal_0 = _s_diff_ctx_2._S535.vals_1[8];

#line 41
    _S646.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S646, _s_dOut_2.vals_0[8]);

#line 41
    _S622.vals_0[7] = 0.0HF;

#line 41
    DiffPair_half_0 _S647;

#line 41
    _S647.primal_0 = _s_diff_ctx_2._S535.vals_1[7];

#line 41
    _S647.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S647, _s_dOut_2.vals_0[7]);

#line 41
    _S622.vals_0[6] = 0.0HF;

#line 41
    DiffPair_half_0 _S648;

#line 41
    _S648.primal_0 = _s_diff_ctx_2._S535.vals_1[6];

#line 41
    _S648.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S648, _s_dOut_2.vals_0[6]);

#line 41
    _S622.vals_0[5] = 0.0HF;

#line 41
    DiffPair_half_0 _S649;

#line 41
    _S649.primal_0 = _s_diff_ctx_2._S535.vals_1[5];

#line 41
    _S649.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S649, _s_dOut_2.vals_0[5]);

#line 41
    _S622.vals_0[4] = 0.0HF;

#line 41
    DiffPair_half_0 _S650;

#line 41
    _S650.primal_0 = _s_diff_ctx_2._S535.vals_1[4];

#line 41
    _S650.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S650, _s_dOut_2.vals_0[4]);

#line 41
    _S622.vals_0[3] = 0.0HF;

#line 41
    DiffPair_half_0 _S651;

#line 41
    _S651.primal_0 = _s_diff_ctx_2._S535.vals_1[3];

#line 41
    _S651.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S651, _s_dOut_2.vals_0[3]);

#line 41
    _S622.vals_0[2] = 0.0HF;

#line 41
    DiffPair_half_0 _S652;

#line 41
    _S652.primal_0 = _s_diff_ctx_2._S535.vals_1[2];

#line 41
    _S652.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S652, _s_dOut_2.vals_0[2]);

#line 41
    _S622.vals_0[1] = 0.0HF;

#line 41
    DiffPair_half_0 _S653;

#line 41
    _S653.primal_0 = _s_diff_ctx_2._S535.vals_1[1];

#line 41
    _S653.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S653, _s_dOut_2.vals_0[1]);

#line 41
    _S622.vals_0[0] = 0.0HF;

#line 41
    DiffPair_half_0 _S654;

#line 41
    _S654.primal_0 = _s_diff_ctx_2._S535.vals_1[0];

#line 41
    _S654.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S654, _s_dOut_2.vals_0[0]);

#line 41
    float16_t  _S655[32];

#line 41
    _S655[0] = 0.0HF;

#line 41
    _S655[1] = 0.0HF;

#line 41
    _S655[2] = 0.0HF;

#line 41
    _S655[3] = 0.0HF;

#line 41
    _S655[4] = 0.0HF;

#line 41
    _S655[5] = 0.0HF;

#line 41
    _S655[6] = 0.0HF;

#line 41
    _S655[7] = 0.0HF;

#line 41
    _S655[8] = 0.0HF;

#line 41
    _S655[9] = 0.0HF;

#line 41
    _S655[10] = 0.0HF;

#line 41
    _S655[11] = 0.0HF;

#line 41
    _S655[12] = 0.0HF;

#line 41
    _S655[13] = 0.0HF;

#line 41
    _S655[14] = 0.0HF;

#line 41
    _S655[15] = 0.0HF;

#line 41
    _S655[16] = 0.0HF;

#line 41
    _S655[17] = 0.0HF;

#line 41
    _S655[18] = 0.0HF;

#line 41
    _S655[19] = 0.0HF;

#line 41
    _S655[20] = 0.0HF;

#line 41
    _S655[21] = 0.0HF;

#line 41
    _S655[22] = 0.0HF;

#line 41
    _S655[23] = 0.0HF;

#line 41
    _S655[24] = 0.0HF;

#line 41
    _S655[25] = 0.0HF;

#line 41
    _S655[26] = 0.0HF;

#line 41
    _S655[27] = 0.0HF;

#line 41
    _S655[28] = 0.0HF;

#line 41
    _S655[29] = 0.0HF;

#line 41
    _S655[30] = 0.0HF;

#line 41
    _S655[31] = 0.0HF;

#line 41
    _S655[31] = _S623.differential_0;

#line 41
    _S655[30] = _S624.differential_0;

#line 41
    _S655[29] = _S625.differential_0;

#line 41
    _S655[28] = _S626.differential_0;

#line 41
    _S655[27] = _S627.differential_0;

#line 41
    _S655[26] = _S628.differential_0;

#line 41
    _S655[25] = _S629.differential_0;

#line 41
    _S655[24] = _S630.differential_0;

#line 41
    _S655[23] = _S631.differential_0;

#line 41
    _S655[22] = _S632.differential_0;

#line 41
    _S655[21] = _S633.differential_0;

#line 41
    _S655[20] = _S634.differential_0;

#line 41
    _S655[19] = _S635.differential_0;

#line 41
    _S655[18] = _S636.differential_0;

#line 41
    _S655[17] = _S637.differential_0;

#line 41
    _S655[16] = _S638.differential_0;

#line 41
    _S655[15] = _S639.differential_0;

#line 41
    _S655[14] = _S640.differential_0;

#line 41
    _S655[13] = _S641.differential_0;

#line 41
    _S655[12] = _S642.differential_0;

#line 41
    _S655[11] = _S643.differential_0;

#line 41
    _S655[10] = _S644.differential_0;

#line 41
    _S655[9] = _S645.differential_0;

#line 41
    _S655[8] = _S646.differential_0;

#line 41
    _S655[7] = _S647.differential_0;

#line 41
    _S655[6] = _S648.differential_0;

#line 41
    _S655[5] = _S649.differential_0;

#line 41
    _S655[4] = _S650.differential_0;

#line 41
    _S655[3] = _S651.differential_0;

#line 41
    _S655[2] = _S652.differential_0;

#line 41
    _S655[1] = _S653.differential_0;

#line 41
    _S655[0] = _S654.differential_0;

#line 41
    s_diff_HalfFeature_0 _S656 = HalfFeature_x24_syn_dzero_0();

#line 41
    s_diff_HalfFeature_0 _S657 = _S656;

#line 41
    _S657.vals_0 = _S655;

#line 41
    s_diff_HalfFeature_0 _S658 = HalfFeature_x24_syn_dadd_0(_S622, _S657);

#line 41
    DiffPair_HalfFeature_0 _S659;

#line 41
    _S659.primal_0 = _S621;

#line 41
    _S659.differential_0 = _S656;

#line 41
    s_bwd_prop_LinearHalf32X32_eval_0(this_19.linears_0[2], _S659, _S658);

#line 41
    _S622 = _S659.differential_0;

#line 41
    _S622.vals_0[31] = 0.0HF;

#line 41
    DiffPair_half_0 _S660;

#line 41
    _S660.primal_0 = _s_diff_ctx_2._S502.vals_1[31];

#line 41
    _S660.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S660, _S659.differential_0.vals_0[31]);

#line 41
    _S622.vals_0[30] = 0.0HF;

#line 41
    DiffPair_half_0 _S661;

#line 41
    _S661.primal_0 = _s_diff_ctx_2._S502.vals_1[30];

#line 41
    _S661.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S661, _S659.differential_0.vals_0[30]);

#line 41
    _S622.vals_0[29] = 0.0HF;

#line 41
    DiffPair_half_0 _S662;

#line 41
    _S662.primal_0 = _s_diff_ctx_2._S502.vals_1[29];

#line 41
    _S662.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S662, _S659.differential_0.vals_0[29]);

#line 41
    _S622.vals_0[28] = 0.0HF;

#line 41
    DiffPair_half_0 _S663;

#line 41
    _S663.primal_0 = _s_diff_ctx_2._S502.vals_1[28];

#line 41
    _S663.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S663, _S659.differential_0.vals_0[28]);

#line 41
    _S622.vals_0[27] = 0.0HF;

#line 41
    DiffPair_half_0 _S664;

#line 41
    _S664.primal_0 = _s_diff_ctx_2._S502.vals_1[27];

#line 41
    _S664.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S664, _S659.differential_0.vals_0[27]);

#line 41
    _S622.vals_0[26] = 0.0HF;

#line 41
    DiffPair_half_0 _S665;

#line 41
    _S665.primal_0 = _s_diff_ctx_2._S502.vals_1[26];

#line 41
    _S665.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S665, _S659.differential_0.vals_0[26]);

#line 41
    _S622.vals_0[25] = 0.0HF;

#line 41
    DiffPair_half_0 _S666;

#line 41
    _S666.primal_0 = _s_diff_ctx_2._S502.vals_1[25];

#line 41
    _S666.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S666, _S659.differential_0.vals_0[25]);

#line 41
    _S622.vals_0[24] = 0.0HF;

#line 41
    DiffPair_half_0 _S667;

#line 41
    _S667.primal_0 = _s_diff_ctx_2._S502.vals_1[24];

#line 41
    _S667.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S667, _S659.differential_0.vals_0[24]);

#line 41
    _S622.vals_0[23] = 0.0HF;

#line 41
    DiffPair_half_0 _S668;

#line 41
    _S668.primal_0 = _s_diff_ctx_2._S502.vals_1[23];

#line 41
    _S668.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S668, _S659.differential_0.vals_0[23]);

#line 41
    _S622.vals_0[22] = 0.0HF;

#line 41
    DiffPair_half_0 _S669;

#line 41
    _S669.primal_0 = _s_diff_ctx_2._S502.vals_1[22];

#line 41
    _S669.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S669, _S659.differential_0.vals_0[22]);

#line 41
    _S622.vals_0[21] = 0.0HF;

#line 41
    DiffPair_half_0 _S670;

#line 41
    _S670.primal_0 = _s_diff_ctx_2._S502.vals_1[21];

#line 41
    _S670.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S670, _S659.differential_0.vals_0[21]);

#line 41
    _S622.vals_0[20] = 0.0HF;

#line 41
    DiffPair_half_0 _S671;

#line 41
    _S671.primal_0 = _s_diff_ctx_2._S502.vals_1[20];

#line 41
    _S671.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S671, _S659.differential_0.vals_0[20]);

#line 41
    _S622.vals_0[19] = 0.0HF;

#line 41
    DiffPair_half_0 _S672;

#line 41
    _S672.primal_0 = _s_diff_ctx_2._S502.vals_1[19];

#line 41
    _S672.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S672, _S659.differential_0.vals_0[19]);

#line 41
    _S622.vals_0[18] = 0.0HF;

#line 41
    DiffPair_half_0 _S673;

#line 41
    _S673.primal_0 = _s_diff_ctx_2._S502.vals_1[18];

#line 41
    _S673.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S673, _S659.differential_0.vals_0[18]);

#line 41
    _S622.vals_0[17] = 0.0HF;

#line 41
    DiffPair_half_0 _S674;

#line 41
    _S674.primal_0 = _s_diff_ctx_2._S502.vals_1[17];

#line 41
    _S674.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S674, _S659.differential_0.vals_0[17]);

#line 41
    _S622.vals_0[16] = 0.0HF;

#line 41
    DiffPair_half_0 _S675;

#line 41
    _S675.primal_0 = _s_diff_ctx_2._S502.vals_1[16];

#line 41
    _S675.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S675, _S659.differential_0.vals_0[16]);

#line 41
    _S622.vals_0[15] = 0.0HF;

#line 41
    DiffPair_half_0 _S676;

#line 41
    _S676.primal_0 = _s_diff_ctx_2._S502.vals_1[15];

#line 41
    _S676.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S676, _S659.differential_0.vals_0[15]);

#line 41
    _S622.vals_0[14] = 0.0HF;

#line 41
    DiffPair_half_0 _S677;

#line 41
    _S677.primal_0 = _s_diff_ctx_2._S502.vals_1[14];

#line 41
    _S677.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S677, _S659.differential_0.vals_0[14]);

#line 41
    _S622.vals_0[13] = 0.0HF;

#line 41
    DiffPair_half_0 _S678;

#line 41
    _S678.primal_0 = _s_diff_ctx_2._S502.vals_1[13];

#line 41
    _S678.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S678, _S659.differential_0.vals_0[13]);

#line 41
    _S622.vals_0[12] = 0.0HF;

#line 41
    DiffPair_half_0 _S679;

#line 41
    _S679.primal_0 = _s_diff_ctx_2._S502.vals_1[12];

#line 41
    _S679.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S679, _S659.differential_0.vals_0[12]);

#line 41
    _S622.vals_0[11] = 0.0HF;

#line 41
    DiffPair_half_0 _S680;

#line 41
    _S680.primal_0 = _s_diff_ctx_2._S502.vals_1[11];

#line 41
    _S680.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S680, _S659.differential_0.vals_0[11]);

#line 41
    _S622.vals_0[10] = 0.0HF;

#line 41
    DiffPair_half_0 _S681;

#line 41
    _S681.primal_0 = _s_diff_ctx_2._S502.vals_1[10];

#line 41
    _S681.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S681, _S659.differential_0.vals_0[10]);

#line 41
    _S622.vals_0[9] = 0.0HF;

#line 41
    DiffPair_half_0 _S682;

#line 41
    _S682.primal_0 = _s_diff_ctx_2._S502.vals_1[9];

#line 41
    _S682.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S682, _S659.differential_0.vals_0[9]);

#line 41
    _S622.vals_0[8] = 0.0HF;

#line 41
    DiffPair_half_0 _S683;

#line 41
    _S683.primal_0 = _s_diff_ctx_2._S502.vals_1[8];

#line 41
    _S683.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S683, _S659.differential_0.vals_0[8]);

#line 41
    _S622.vals_0[7] = 0.0HF;

#line 41
    DiffPair_half_0 _S684;

#line 41
    _S684.primal_0 = _s_diff_ctx_2._S502.vals_1[7];

#line 41
    _S684.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S684, _S659.differential_0.vals_0[7]);

#line 41
    _S622.vals_0[6] = 0.0HF;

#line 41
    DiffPair_half_0 _S685;

#line 41
    _S685.primal_0 = _s_diff_ctx_2._S502.vals_1[6];

#line 41
    _S685.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S685, _S659.differential_0.vals_0[6]);

#line 41
    _S622.vals_0[5] = 0.0HF;

#line 41
    DiffPair_half_0 _S686;

#line 41
    _S686.primal_0 = _s_diff_ctx_2._S502.vals_1[5];

#line 41
    _S686.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S686, _S659.differential_0.vals_0[5]);

#line 41
    _S622.vals_0[4] = 0.0HF;

#line 41
    DiffPair_half_0 _S687;

#line 41
    _S687.primal_0 = _s_diff_ctx_2._S502.vals_1[4];

#line 41
    _S687.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S687, _S659.differential_0.vals_0[4]);

#line 41
    _S622.vals_0[3] = 0.0HF;

#line 41
    DiffPair_half_0 _S688;

#line 41
    _S688.primal_0 = _s_diff_ctx_2._S502.vals_1[3];

#line 41
    _S688.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S688, _S659.differential_0.vals_0[3]);

#line 41
    _S622.vals_0[2] = 0.0HF;

#line 41
    DiffPair_half_0 _S689;

#line 41
    _S689.primal_0 = _s_diff_ctx_2._S502.vals_1[2];

#line 41
    _S689.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S689, _S659.differential_0.vals_0[2]);

#line 41
    _S622.vals_0[1] = 0.0HF;

#line 41
    DiffPair_half_0 _S690;

#line 41
    _S690.primal_0 = _s_diff_ctx_2._S502.vals_1[1];

#line 41
    _S690.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S690, _S659.differential_0.vals_0[1]);

#line 41
    _S622.vals_0[0] = 0.0HF;

#line 41
    DiffPair_half_0 _S691;

#line 41
    _S691.primal_0 = _s_diff_ctx_2._S502.vals_1[0];

#line 41
    _S691.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S691, _S659.differential_0.vals_0[0]);

#line 41
    float16_t  _S692[32];

#line 41
    _S692[0] = 0.0HF;

#line 41
    _S692[1] = 0.0HF;

#line 41
    _S692[2] = 0.0HF;

#line 41
    _S692[3] = 0.0HF;

#line 41
    _S692[4] = 0.0HF;

#line 41
    _S692[5] = 0.0HF;

#line 41
    _S692[6] = 0.0HF;

#line 41
    _S692[7] = 0.0HF;

#line 41
    _S692[8] = 0.0HF;

#line 41
    _S692[9] = 0.0HF;

#line 41
    _S692[10] = 0.0HF;

#line 41
    _S692[11] = 0.0HF;

#line 41
    _S692[12] = 0.0HF;

#line 41
    _S692[13] = 0.0HF;

#line 41
    _S692[14] = 0.0HF;

#line 41
    _S692[15] = 0.0HF;

#line 41
    _S692[16] = 0.0HF;

#line 41
    _S692[17] = 0.0HF;

#line 41
    _S692[18] = 0.0HF;

#line 41
    _S692[19] = 0.0HF;

#line 41
    _S692[20] = 0.0HF;

#line 41
    _S692[21] = 0.0HF;

#line 41
    _S692[22] = 0.0HF;

#line 41
    _S692[23] = 0.0HF;

#line 41
    _S692[24] = 0.0HF;

#line 41
    _S692[25] = 0.0HF;

#line 41
    _S692[26] = 0.0HF;

#line 41
    _S692[27] = 0.0HF;

#line 41
    _S692[28] = 0.0HF;

#line 41
    _S692[29] = 0.0HF;

#line 41
    _S692[30] = 0.0HF;

#line 41
    _S692[31] = 0.0HF;

#line 41
    _S692[31] = _S660.differential_0;

#line 41
    _S692[30] = _S661.differential_0;

#line 41
    _S692[29] = _S662.differential_0;

#line 41
    _S692[28] = _S663.differential_0;

#line 41
    _S692[27] = _S664.differential_0;

#line 41
    _S692[26] = _S665.differential_0;

#line 41
    _S692[25] = _S666.differential_0;

#line 41
    _S692[24] = _S667.differential_0;

#line 41
    _S692[23] = _S668.differential_0;

#line 41
    _S692[22] = _S669.differential_0;

#line 41
    _S692[21] = _S670.differential_0;

#line 41
    _S692[20] = _S671.differential_0;

#line 41
    _S692[19] = _S672.differential_0;

#line 41
    _S692[18] = _S673.differential_0;

#line 41
    _S692[17] = _S674.differential_0;

#line 41
    _S692[16] = _S675.differential_0;

#line 41
    _S692[15] = _S676.differential_0;

#line 41
    _S692[14] = _S677.differential_0;

#line 41
    _S692[13] = _S678.differential_0;

#line 41
    _S692[12] = _S679.differential_0;

#line 41
    _S692[11] = _S680.differential_0;

#line 41
    _S692[10] = _S681.differential_0;

#line 41
    _S692[9] = _S682.differential_0;

#line 41
    _S692[8] = _S683.differential_0;

#line 41
    _S692[7] = _S684.differential_0;

#line 41
    _S692[6] = _S685.differential_0;

#line 41
    _S692[5] = _S686.differential_0;

#line 41
    _S692[4] = _S687.differential_0;

#line 41
    _S692[3] = _S688.differential_0;

#line 41
    _S692[2] = _S689.differential_0;

#line 41
    _S692[1] = _S690.differential_0;

#line 41
    _S692[0] = _S691.differential_0;

#line 41
    s_diff_HalfFeature_0 _S693 = _S656;

#line 41
    _S693.vals_0 = _S692;

#line 41
    s_diff_HalfFeature_0 _S694 = HalfFeature_x24_syn_dadd_0(_S622, _S693);

#line 41
    DiffPair_HalfFeature_0 _S695;

#line 41
    _S695.primal_0 = _S620;

#line 41
    _S695.differential_0 = _S656;

#line 41
    s_bwd_prop_LinearHalf32X32_eval_0(this_19.linears_0[1], _S695, _S694);

#line 41
    _S622 = _S695.differential_0;

#line 41
    _S622.vals_0[31] = 0.0HF;

#line 41
    DiffPair_half_0 _S696;

#line 41
    _S696.primal_0 = _s_diff_ctx_2._S469.vals_1[31];

#line 41
    _S696.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S696, _S695.differential_0.vals_0[31]);

#line 41
    _S622.vals_0[30] = 0.0HF;

#line 41
    DiffPair_half_0 _S697;

#line 41
    _S697.primal_0 = _s_diff_ctx_2._S469.vals_1[30];

#line 41
    _S697.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S697, _S695.differential_0.vals_0[30]);

#line 41
    _S622.vals_0[29] = 0.0HF;

#line 41
    DiffPair_half_0 _S698;

#line 41
    _S698.primal_0 = _s_diff_ctx_2._S469.vals_1[29];

#line 41
    _S698.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S698, _S695.differential_0.vals_0[29]);

#line 41
    _S622.vals_0[28] = 0.0HF;

#line 41
    DiffPair_half_0 _S699;

#line 41
    _S699.primal_0 = _s_diff_ctx_2._S469.vals_1[28];

#line 41
    _S699.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S699, _S695.differential_0.vals_0[28]);

#line 41
    _S622.vals_0[27] = 0.0HF;

#line 41
    DiffPair_half_0 _S700;

#line 41
    _S700.primal_0 = _s_diff_ctx_2._S469.vals_1[27];

#line 41
    _S700.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S700, _S695.differential_0.vals_0[27]);

#line 41
    _S622.vals_0[26] = 0.0HF;

#line 41
    DiffPair_half_0 _S701;

#line 41
    _S701.primal_0 = _s_diff_ctx_2._S469.vals_1[26];

#line 41
    _S701.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S701, _S695.differential_0.vals_0[26]);

#line 41
    _S622.vals_0[25] = 0.0HF;

#line 41
    DiffPair_half_0 _S702;

#line 41
    _S702.primal_0 = _s_diff_ctx_2._S469.vals_1[25];

#line 41
    _S702.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S702, _S695.differential_0.vals_0[25]);

#line 41
    _S622.vals_0[24] = 0.0HF;

#line 41
    DiffPair_half_0 _S703;

#line 41
    _S703.primal_0 = _s_diff_ctx_2._S469.vals_1[24];

#line 41
    _S703.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S703, _S695.differential_0.vals_0[24]);

#line 41
    _S622.vals_0[23] = 0.0HF;

#line 41
    DiffPair_half_0 _S704;

#line 41
    _S704.primal_0 = _s_diff_ctx_2._S469.vals_1[23];

#line 41
    _S704.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S704, _S695.differential_0.vals_0[23]);

#line 41
    _S622.vals_0[22] = 0.0HF;

#line 41
    DiffPair_half_0 _S705;

#line 41
    _S705.primal_0 = _s_diff_ctx_2._S469.vals_1[22];

#line 41
    _S705.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S705, _S695.differential_0.vals_0[22]);

#line 41
    _S622.vals_0[21] = 0.0HF;

#line 41
    DiffPair_half_0 _S706;

#line 41
    _S706.primal_0 = _s_diff_ctx_2._S469.vals_1[21];

#line 41
    _S706.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S706, _S695.differential_0.vals_0[21]);

#line 41
    _S622.vals_0[20] = 0.0HF;

#line 41
    DiffPair_half_0 _S707;

#line 41
    _S707.primal_0 = _s_diff_ctx_2._S469.vals_1[20];

#line 41
    _S707.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S707, _S695.differential_0.vals_0[20]);

#line 41
    _S622.vals_0[19] = 0.0HF;

#line 41
    DiffPair_half_0 _S708;

#line 41
    _S708.primal_0 = _s_diff_ctx_2._S469.vals_1[19];

#line 41
    _S708.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S708, _S695.differential_0.vals_0[19]);

#line 41
    _S622.vals_0[18] = 0.0HF;

#line 41
    DiffPair_half_0 _S709;

#line 41
    _S709.primal_0 = _s_diff_ctx_2._S469.vals_1[18];

#line 41
    _S709.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S709, _S695.differential_0.vals_0[18]);

#line 41
    _S622.vals_0[17] = 0.0HF;

#line 41
    DiffPair_half_0 _S710;

#line 41
    _S710.primal_0 = _s_diff_ctx_2._S469.vals_1[17];

#line 41
    _S710.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S710, _S695.differential_0.vals_0[17]);

#line 41
    _S622.vals_0[16] = 0.0HF;

#line 41
    DiffPair_half_0 _S711;

#line 41
    _S711.primal_0 = _s_diff_ctx_2._S469.vals_1[16];

#line 41
    _S711.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S711, _S695.differential_0.vals_0[16]);

#line 41
    _S622.vals_0[15] = 0.0HF;

#line 41
    DiffPair_half_0 _S712;

#line 41
    _S712.primal_0 = _s_diff_ctx_2._S469.vals_1[15];

#line 41
    _S712.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S712, _S695.differential_0.vals_0[15]);

#line 41
    _S622.vals_0[14] = 0.0HF;

#line 41
    DiffPair_half_0 _S713;

#line 41
    _S713.primal_0 = _s_diff_ctx_2._S469.vals_1[14];

#line 41
    _S713.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S713, _S695.differential_0.vals_0[14]);

#line 41
    _S622.vals_0[13] = 0.0HF;

#line 41
    DiffPair_half_0 _S714;

#line 41
    _S714.primal_0 = _s_diff_ctx_2._S469.vals_1[13];

#line 41
    _S714.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S714, _S695.differential_0.vals_0[13]);

#line 41
    _S622.vals_0[12] = 0.0HF;

#line 41
    DiffPair_half_0 _S715;

#line 41
    _S715.primal_0 = _s_diff_ctx_2._S469.vals_1[12];

#line 41
    _S715.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S715, _S695.differential_0.vals_0[12]);

#line 41
    _S622.vals_0[11] = 0.0HF;

#line 41
    DiffPair_half_0 _S716;

#line 41
    _S716.primal_0 = _s_diff_ctx_2._S469.vals_1[11];

#line 41
    _S716.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S716, _S695.differential_0.vals_0[11]);

#line 41
    _S622.vals_0[10] = 0.0HF;

#line 41
    DiffPair_half_0 _S717;

#line 41
    _S717.primal_0 = _s_diff_ctx_2._S469.vals_1[10];

#line 41
    _S717.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S717, _S695.differential_0.vals_0[10]);

#line 41
    _S622.vals_0[9] = 0.0HF;

#line 41
    DiffPair_half_0 _S718;

#line 41
    _S718.primal_0 = _s_diff_ctx_2._S469.vals_1[9];

#line 41
    _S718.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S718, _S695.differential_0.vals_0[9]);

#line 41
    _S622.vals_0[8] = 0.0HF;

#line 41
    DiffPair_half_0 _S719;

#line 41
    _S719.primal_0 = _s_diff_ctx_2._S469.vals_1[8];

#line 41
    _S719.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S719, _S695.differential_0.vals_0[8]);

#line 41
    _S622.vals_0[7] = 0.0HF;

#line 41
    DiffPair_half_0 _S720;

#line 41
    _S720.primal_0 = _s_diff_ctx_2._S469.vals_1[7];

#line 41
    _S720.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S720, _S695.differential_0.vals_0[7]);

#line 41
    _S622.vals_0[6] = 0.0HF;

#line 41
    DiffPair_half_0 _S721;

#line 41
    _S721.primal_0 = _s_diff_ctx_2._S469.vals_1[6];

#line 41
    _S721.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S721, _S695.differential_0.vals_0[6]);

#line 41
    _S622.vals_0[5] = 0.0HF;

#line 41
    DiffPair_half_0 _S722;

#line 41
    _S722.primal_0 = _s_diff_ctx_2._S469.vals_1[5];

#line 41
    _S722.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S722, _S695.differential_0.vals_0[5]);

#line 41
    _S622.vals_0[4] = 0.0HF;

#line 41
    DiffPair_half_0 _S723;

#line 41
    _S723.primal_0 = _s_diff_ctx_2._S469.vals_1[4];

#line 41
    _S723.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S723, _S695.differential_0.vals_0[4]);

#line 41
    _S622.vals_0[3] = 0.0HF;

#line 41
    DiffPair_half_0 _S724;

#line 41
    _S724.primal_0 = _s_diff_ctx_2._S469.vals_1[3];

#line 41
    _S724.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S724, _S695.differential_0.vals_0[3]);

#line 41
    _S622.vals_0[2] = 0.0HF;

#line 41
    DiffPair_half_0 _S725;

#line 41
    _S725.primal_0 = _s_diff_ctx_2._S469.vals_1[2];

#line 41
    _S725.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S725, _S695.differential_0.vals_0[2]);

#line 41
    _S622.vals_0[1] = 0.0HF;

#line 41
    DiffPair_half_0 _S726;

#line 41
    _S726.primal_0 = _s_diff_ctx_2._S469.vals_1[1];

#line 41
    _S726.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S726, _S695.differential_0.vals_0[1]);

#line 41
    _S622.vals_0[0] = 0.0HF;

#line 41
    DiffPair_half_0 _S727;

#line 41
    _S727.primal_0 = _s_diff_ctx_2._S469.vals_1[0];

#line 41
    _S727.differential_0 = 0.0HF;

#line 41
    s_bwd_prop_ReLU_eval_0(_S727, _S695.differential_0.vals_0[0]);

#line 41
    float16_t  _S728[32];

#line 41
    _S728[0] = 0.0HF;

#line 41
    _S728[1] = 0.0HF;

#line 41
    _S728[2] = 0.0HF;

#line 41
    _S728[3] = 0.0HF;

#line 41
    _S728[4] = 0.0HF;

#line 41
    _S728[5] = 0.0HF;

#line 41
    _S728[6] = 0.0HF;

#line 41
    _S728[7] = 0.0HF;

#line 41
    _S728[8] = 0.0HF;

#line 41
    _S728[9] = 0.0HF;

#line 41
    _S728[10] = 0.0HF;

#line 41
    _S728[11] = 0.0HF;

#line 41
    _S728[12] = 0.0HF;

#line 41
    _S728[13] = 0.0HF;

#line 41
    _S728[14] = 0.0HF;

#line 41
    _S728[15] = 0.0HF;

#line 41
    _S728[16] = 0.0HF;

#line 41
    _S728[17] = 0.0HF;

#line 41
    _S728[18] = 0.0HF;

#line 41
    _S728[19] = 0.0HF;

#line 41
    _S728[20] = 0.0HF;

#line 41
    _S728[21] = 0.0HF;

#line 41
    _S728[22] = 0.0HF;

#line 41
    _S728[23] = 0.0HF;

#line 41
    _S728[24] = 0.0HF;

#line 41
    _S728[25] = 0.0HF;

#line 41
    _S728[26] = 0.0HF;

#line 41
    _S728[27] = 0.0HF;

#line 41
    _S728[28] = 0.0HF;

#line 41
    _S728[29] = 0.0HF;

#line 41
    _S728[30] = 0.0HF;

#line 41
    _S728[31] = 0.0HF;

#line 41
    _S728[31] = _S696.differential_0;

#line 41
    _S728[30] = _S697.differential_0;

#line 41
    _S728[29] = _S698.differential_0;

#line 41
    _S728[28] = _S699.differential_0;

#line 41
    _S728[27] = _S700.differential_0;

#line 41
    _S728[26] = _S701.differential_0;

#line 41
    _S728[25] = _S702.differential_0;

#line 41
    _S728[24] = _S703.differential_0;

#line 41
    _S728[23] = _S704.differential_0;

#line 41
    _S728[22] = _S705.differential_0;

#line 41
    _S728[21] = _S706.differential_0;

#line 41
    _S728[20] = _S707.differential_0;

#line 41
    _S728[19] = _S708.differential_0;

#line 41
    _S728[18] = _S709.differential_0;

#line 41
    _S728[17] = _S710.differential_0;

#line 41
    _S728[16] = _S711.differential_0;

#line 41
    _S728[15] = _S712.differential_0;

#line 41
    _S728[14] = _S713.differential_0;

#line 41
    _S728[13] = _S714.differential_0;

#line 41
    _S728[12] = _S715.differential_0;

#line 41
    _S728[11] = _S716.differential_0;

#line 41
    _S728[10] = _S717.differential_0;

#line 41
    _S728[9] = _S718.differential_0;

#line 41
    _S728[8] = _S719.differential_0;

#line 41
    _S728[7] = _S720.differential_0;

#line 41
    _S728[6] = _S721.differential_0;

#line 41
    _S728[5] = _S722.differential_0;

#line 41
    _S728[4] = _S723.differential_0;

#line 41
    _S728[3] = _S724.differential_0;

#line 41
    _S728[2] = _S725.differential_0;

#line 41
    _S728[1] = _S726.differential_0;

#line 41
    _S728[0] = _S727.differential_0;

#line 41
    s_diff_HalfFeature_0 _S729 = _S656;

#line 41
    _S729.vals_0 = _S728;

#line 41
    s_diff_HalfFeature_0 _S730 = HalfFeature_x24_syn_dadd_0(_S622, _S729);

#line 41
    DiffPair_HalfFeature_0 _S731;

#line 41
    _S731.primal_0 = dpinput_2.primal_0;

#line 41
    _S731.differential_0 = _S656;

#line 41
    s_bwd_prop_LinearHalf32X32_eval_0(this_19.linears_0[0], _S731, _S730);

#line 41
    dpinput_2.primal_0 = dpinput_2.primal_0;

#line 41
    dpinput_2.differential_0 = _S731.differential_0;

#line 41
    return;
}


#line 41
void s_bwd_prop_MLPHalf32X32_forward_0(MLPHalf32X32_0 mlp_2, inout DiffPair_HalfFeature_0 dpinput_3, s_diff_HalfFeature_0 _s_dOut_3, s_bwd_prop_MLPHalf32X32_forward_Intermediates_0 _s_diff_ctx_3)
{

#line 50
    s_bwd_prop_MLPHalf32X32_foward_Intermediates_0 _S732 = _s_diff_ctx_3._S536;

#line 50
    HalfFeature_0 _S733 = s_bwd_primal_MLPHalf32X32_foward_0(mlp_2, dpinput_3.primal_0, _S732);

#line 50
    s_diff_HalfFeature_0 _S734 = HalfFeature_x24_syn_dzero_0();

#line 50
    DiffPair_HalfFeature_0 _S735;

#line 50
    _S735.primal_0 = dpinput_3.primal_0;

#line 50
    _S735.differential_0 = _S734;

#line 50
    s_bwd_prop_MLPHalf32X32_foward_0(mlp_2, _S735, _s_dOut_3, _s_diff_ctx_3._S536);

#line 50
    dpinput_3.primal_0 = dpinput_3.primal_0;

#line 50
    dpinput_3.differential_0 = _S735.differential_0;

#line 50
    return;
}


#line 50
void s_bwd_MLPHalf32X32_forward_0(MLPHalf32X32_0 _S736, inout DiffPair_HalfFeature_0 _S737, s_diff_HalfFeature_0 _S738)
{

#line 50
    s_bwd_prop_MLPHalf32X32_forward_Intermediates_0 _S739;

#line 50
    HalfFeature_0 _S740 = s_bwd_primal_MLPHalf32X32_forward_0(_S736, _S737.primal_0, _S739);

#line 50
    s_bwd_prop_MLPHalf32X32_forward_0(_S736, _S737, _S738, _S739);

#line 50
    return;
}


#line 50
struct s_bwd_prop_computeInterpolatedFeature_Intermediates_0
{
    float _S741;
    float _S742;
    float _S743;
    float _S744;
    float _S745;
    float _S746;
    float _S747;
    float _S748;
    float _S749;
    float _S750;
    float _S751;
    float _S752;
    float _S753;
    float _S754;
    float _S755;
    float _S756;
    float _S757;
    float _S758;
    float _S759;
    float _S760;
    float _S761;
    float _S762;
    float _S763;
    float _S764;
    float _S765;
    float _S766;
    float _S767;
    float _S768;
    float _S769;
    float _S770;
    float _S771;
    float _S772;
    float _S773;
    float _S774;
    float _S775;
    float _S776;
    float _S777;
    float _S778;
    float _S779;
    float _S780;
    float _S781;
    float _S782;
    float _S783;
    float _S784;
    float _S785;
    float _S786;
    float _S787;
    float _S788;
    float _S789;
    float _S790;
    float _S791;
    float _S792;
    float _S793;
    float _S794;
    float _S795;
    float _S796;
};


#line 50
float s_primal_ctx_TensorView_load_prim_0(TensorView_0 _S797, int _S798, int _S799, int _S800)
{

#line 50
    return TensorView_load_prim_1(_S797, _S798, _S799, _S800);
}


#line 50
HalfFeature_0 s_bwd_primal_computeInterpolatedFeature_0(TensorView_0 featureGrid_1, FeatureGrid2DIndex_0 index_1, out s_bwd_prop_computeInterpolatedFeature_Intermediates_0 _s_diff_ctx_4)
{

#line 17 7
    _s_diff_ctx_4._S741 = 0.0;

#line 17
    _s_diff_ctx_4._S742 = 0.0;

#line 17
    _s_diff_ctx_4._S743 = 0.0;

#line 17
    _s_diff_ctx_4._S744 = 0.0;

#line 17
    _s_diff_ctx_4._S745 = 0.0;

#line 17
    _s_diff_ctx_4._S746 = 0.0;

#line 17
    _s_diff_ctx_4._S747 = 0.0;

#line 17
    _s_diff_ctx_4._S748 = 0.0;

#line 17
    _s_diff_ctx_4._S749 = 0.0;

#line 17
    _s_diff_ctx_4._S750 = 0.0;

#line 17
    _s_diff_ctx_4._S751 = 0.0;

#line 17
    _s_diff_ctx_4._S752 = 0.0;

#line 17
    _s_diff_ctx_4._S753 = 0.0;

#line 17
    _s_diff_ctx_4._S754 = 0.0;

#line 17
    _s_diff_ctx_4._S755 = 0.0;

#line 17
    _s_diff_ctx_4._S756 = 0.0;

#line 17
    _s_diff_ctx_4._S757 = 0.0;

#line 17
    _s_diff_ctx_4._S758 = 0.0;

#line 17
    _s_diff_ctx_4._S759 = 0.0;

#line 17
    _s_diff_ctx_4._S760 = 0.0;

#line 17
    _s_diff_ctx_4._S761 = 0.0;

#line 17
    _s_diff_ctx_4._S762 = 0.0;

#line 17
    _s_diff_ctx_4._S763 = 0.0;

#line 17
    _s_diff_ctx_4._S764 = 0.0;

#line 17
    _s_diff_ctx_4._S765 = 0.0;

#line 17
    _s_diff_ctx_4._S766 = 0.0;

#line 17
    _s_diff_ctx_4._S767 = 0.0;

#line 17
    _s_diff_ctx_4._S768 = 0.0;

#line 17
    _s_diff_ctx_4._S769 = 0.0;

#line 17
    _s_diff_ctx_4._S770 = 0.0;

#line 17
    _s_diff_ctx_4._S771 = 0.0;

#line 17
    _s_diff_ctx_4._S772 = 0.0;

#line 17
    _s_diff_ctx_4._S773 = 0.0;

#line 17
    _s_diff_ctx_4._S774 = 0.0;

#line 17
    _s_diff_ctx_4._S775 = 0.0;

#line 17
    _s_diff_ctx_4._S776 = 0.0;

#line 17
    _s_diff_ctx_4._S777 = 0.0;

#line 17
    _s_diff_ctx_4._S778 = 0.0;

#line 17
    _s_diff_ctx_4._S779 = 0.0;

#line 17
    _s_diff_ctx_4._S780 = 0.0;

#line 17
    _s_diff_ctx_4._S781 = 0.0;

#line 17
    _s_diff_ctx_4._S782 = 0.0;

#line 17
    _s_diff_ctx_4._S783 = 0.0;

#line 17
    _s_diff_ctx_4._S784 = 0.0;

#line 17
    _s_diff_ctx_4._S785 = 0.0;

#line 17
    _s_diff_ctx_4._S786 = 0.0;

#line 17
    _s_diff_ctx_4._S787 = 0.0;

#line 17
    _s_diff_ctx_4._S788 = 0.0;

#line 17
    _s_diff_ctx_4._S789 = 0.0;

#line 17
    _s_diff_ctx_4._S790 = 0.0;

#line 17
    _s_diff_ctx_4._S791 = 0.0;

#line 17
    _s_diff_ctx_4._S792 = 0.0;

#line 17
    _s_diff_ctx_4._S793 = 0.0;

#line 17
    _s_diff_ctx_4._S794 = 0.0;

#line 17
    _s_diff_ctx_4._S795 = 0.0;

#line 17
    _s_diff_ctx_4._S796 = 0.0;

#line 17
    float16_t  _S801[32] = { 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF, 0.0HF };

#line 17
    uint _S802 = index_1.cellId_0.x;

#line 17
    int _S803 = int(_S802);

#line 17
    uint _S804 = index_1.cellId_0.y;

#line 17
    int _S805 = int(_S804);

#line 17
    float _S806 = index_1.weights_0.x;

#line 17
    float _S807 = 1.0 - _S806;

#line 17
    float _S808 = index_1.weights_0.y;

#line 17
    float _S809 = 1.0 - _S808;

#line 17
    int _S810 = int(_S802 + 1U);

#line 17
    int _S811 = int(_S804 + 1U);

#line 17
    float16_t _S812 = float16_t(_S808);

#line 17
    float16_t _S813 = float16_t(_S806);

#line 17
    float16_t _S814 = _S813 * 3.140625HF;

#line 17
    float16_t _S815 = s_primal_ctx_sin_0(_S814);

#line 17
    float16_t _S816 = s_primal_ctx_cos_0(_S814);

#line 17
    float16_t _S817 = _S812 * 3.140625HF;

#line 17
    float16_t _S818 = s_primal_ctx_sin_0(_S817);

#line 17
    float16_t _S819 = s_primal_ctx_cos_0(_S817);

#line 17
    float16_t _S820 = _S813 * 6.28125HF;

#line 17
    float16_t _S821 = s_primal_ctx_sin_0(_S820);

#line 17
    float16_t _S822 = s_primal_ctx_cos_0(_S820);

#line 17
    float16_t _S823 = _S812 * 6.28125HF;

#line 17
    float16_t _S824 = s_primal_ctx_sin_0(_S823);

#line 17
    float16_t _S825 = s_primal_ctx_cos_0(_S823);

#line 17
    float16_t _S826 = _S813 * 12.5625HF;

#line 17
    float16_t _S827 = s_primal_ctx_sin_0(_S826);

#line 17
    float16_t _S828 = s_primal_ctx_cos_0(_S826);

#line 17
    float16_t _S829 = _S812 * 12.5625HF;

#line 17
    float16_t _S830 = s_primal_ctx_sin_0(_S829);

#line 17
    float16_t _S831 = s_primal_ctx_cos_0(_S829);

#line 17
    float16_t _S832 = _S813 * 25.125HF;

#line 17
    float16_t _S833 = s_primal_ctx_sin_0(_S832);

#line 17
    float16_t _S834 = s_primal_ctx_cos_0(_S832);

#line 17
    float16_t _S835 = _S812 * 25.125HF;

#line 17
    float16_t _S836 = s_primal_ctx_sin_0(_S835);

#line 17
    float16_t _S837 = s_primal_ctx_cos_0(_S835);

#line 17
    float _S838 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 0);

#line 17
    _s_diff_ctx_4._S741 = _S838;

#line 17
    float _S839 = _S838 * _S807 * _S809;

#line 17
    float _S840 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 0);

#line 17
    _s_diff_ctx_4._S742 = _S840;

#line 17
    float _S841 = _S839 + _S840 * _S806 * _S809;

#line 17
    float _S842 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 0);

#line 17
    _s_diff_ctx_4._S743 = _S842;

#line 17
    float _S843 = _S841 + _S842 * _S807 * _S808;

#line 17
    float _S844 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 0);

#line 17
    _s_diff_ctx_4._S744 = _S844;

#line 17
    float16_t _S845 = float16_t(_S843 + _S844 * _S806 * _S808);

#line 17
    HalfFeature_0 _S846;

#line 17
    _S846.vals_1 = _S801;

#line 17
    _S846.vals_1[0] = _S845;

#line 17
    float _S847 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 1);

#line 17
    _s_diff_ctx_4._S745 = _S847;

#line 17
    float _S848 = _S847 * _S807 * _S809;

#line 17
    float _S849 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 1);

#line 17
    _s_diff_ctx_4._S746 = _S849;

#line 17
    float _S850 = _S848 + _S849 * _S806 * _S809;

#line 17
    float _S851 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 1);

#line 17
    _s_diff_ctx_4._S747 = _S851;

#line 17
    float _S852 = _S850 + _S851 * _S807 * _S808;

#line 17
    float _S853 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 1);

#line 17
    _s_diff_ctx_4._S748 = _S853;

#line 17
    _S846.vals_1[1] = float16_t(_S852 + _S853 * _S806 * _S808);

#line 17
    float _S854 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 2);

#line 17
    _s_diff_ctx_4._S749 = _S854;

#line 17
    float _S855 = _S854 * _S807 * _S809;

#line 17
    float _S856 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 2);

#line 17
    _s_diff_ctx_4._S750 = _S856;

#line 17
    float _S857 = _S855 + _S856 * _S806 * _S809;

#line 17
    float _S858 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 2);

#line 17
    _s_diff_ctx_4._S751 = _S858;

#line 17
    float _S859 = _S857 + _S858 * _S807 * _S808;

#line 17
    float _S860 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 2);

#line 17
    _s_diff_ctx_4._S752 = _S860;

#line 17
    _S846.vals_1[2] = float16_t(_S859 + _S860 * _S806 * _S808);

#line 17
    float _S861 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 3);

#line 17
    _s_diff_ctx_4._S753 = _S861;

#line 17
    float _S862 = _S861 * _S807 * _S809;

#line 17
    float _S863 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 3);

#line 17
    _s_diff_ctx_4._S754 = _S863;

#line 17
    float _S864 = _S862 + _S863 * _S806 * _S809;

#line 17
    float _S865 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 3);

#line 17
    _s_diff_ctx_4._S755 = _S865;

#line 17
    float _S866 = _S864 + _S865 * _S807 * _S808;

#line 17
    float _S867 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 3);

#line 17
    _s_diff_ctx_4._S756 = _S867;

#line 17
    _S846.vals_1[3] = float16_t(_S866 + _S867 * _S806 * _S808);

#line 17
    float _S868 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 4);

#line 17
    _s_diff_ctx_4._S757 = _S868;

#line 17
    float _S869 = _S868 * _S807 * _S809;

#line 17
    float _S870 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 4);

#line 17
    _s_diff_ctx_4._S758 = _S870;

#line 17
    float _S871 = _S869 + _S870 * _S806 * _S809;

#line 17
    float _S872 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 4);

#line 17
    _s_diff_ctx_4._S759 = _S872;

#line 17
    float _S873 = _S871 + _S872 * _S807 * _S808;

#line 17
    float _S874 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 4);

#line 17
    _s_diff_ctx_4._S760 = _S874;

#line 17
    _S846.vals_1[4] = float16_t(_S873 + _S874 * _S806 * _S808);

#line 17
    float _S875 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 5);

#line 17
    _s_diff_ctx_4._S761 = _S875;

#line 17
    float _S876 = _S875 * _S807 * _S809;

#line 17
    float _S877 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 5);

#line 17
    _s_diff_ctx_4._S762 = _S877;

#line 17
    float _S878 = _S876 + _S877 * _S806 * _S809;

#line 17
    float _S879 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 5);

#line 17
    _s_diff_ctx_4._S763 = _S879;

#line 17
    float _S880 = _S878 + _S879 * _S807 * _S808;

#line 17
    float _S881 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 5);

#line 17
    _s_diff_ctx_4._S764 = _S881;

#line 17
    _S846.vals_1[5] = float16_t(_S880 + _S881 * _S806 * _S808);

#line 17
    float _S882 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 6);

#line 17
    _s_diff_ctx_4._S765 = _S882;

#line 17
    float _S883 = _S882 * _S807 * _S809;

#line 17
    float _S884 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 6);

#line 17
    _s_diff_ctx_4._S766 = _S884;

#line 17
    float _S885 = _S883 + _S884 * _S806 * _S809;

#line 17
    float _S886 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 6);

#line 17
    _s_diff_ctx_4._S767 = _S886;

#line 17
    float _S887 = _S885 + _S886 * _S807 * _S808;

#line 17
    float _S888 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 6);

#line 17
    _s_diff_ctx_4._S768 = _S888;

#line 17
    _S846.vals_1[6] = float16_t(_S887 + _S888 * _S806 * _S808);

#line 17
    float _S889 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 7);

#line 17
    _s_diff_ctx_4._S769 = _S889;

#line 17
    float _S890 = _S889 * _S807 * _S809;

#line 17
    float _S891 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 7);

#line 17
    _s_diff_ctx_4._S770 = _S891;

#line 17
    float _S892 = _S890 + _S891 * _S806 * _S809;

#line 17
    float _S893 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 7);

#line 17
    _s_diff_ctx_4._S771 = _S893;

#line 17
    float _S894 = _S892 + _S893 * _S807 * _S808;

#line 17
    float _S895 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 7);

#line 17
    _s_diff_ctx_4._S772 = _S895;

#line 17
    _S846.vals_1[7] = float16_t(_S894 + _S895 * _S806 * _S808);

#line 17
    float _S896 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 8);

#line 17
    _s_diff_ctx_4._S773 = _S896;

#line 17
    float _S897 = _S896 * _S807 * _S809;

#line 17
    float _S898 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 8);

#line 17
    _s_diff_ctx_4._S774 = _S898;

#line 17
    float _S899 = _S897 + _S898 * _S806 * _S809;

#line 17
    float _S900 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 8);

#line 17
    _s_diff_ctx_4._S775 = _S900;

#line 17
    float _S901 = _S899 + _S900 * _S807 * _S808;

#line 17
    float _S902 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 8);

#line 17
    _s_diff_ctx_4._S776 = _S902;

#line 17
    _S846.vals_1[8] = float16_t(_S901 + _S902 * _S806 * _S808);

#line 17
    float _S903 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 9);

#line 17
    _s_diff_ctx_4._S777 = _S903;

#line 17
    float _S904 = _S903 * _S807 * _S809;

#line 17
    float _S905 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 9);

#line 17
    _s_diff_ctx_4._S778 = _S905;

#line 17
    float _S906 = _S904 + _S905 * _S806 * _S809;

#line 17
    float _S907 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 9);

#line 17
    _s_diff_ctx_4._S779 = _S907;

#line 17
    float _S908 = _S906 + _S907 * _S807 * _S808;

#line 17
    float _S909 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 9);

#line 17
    _s_diff_ctx_4._S780 = _S909;

#line 17
    _S846.vals_1[9] = float16_t(_S908 + _S909 * _S806 * _S808);

#line 17
    float _S910 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 10);

#line 17
    _s_diff_ctx_4._S781 = _S910;

#line 17
    float _S911 = _S910 * _S807 * _S809;

#line 17
    float _S912 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 10);

#line 17
    _s_diff_ctx_4._S782 = _S912;

#line 17
    float _S913 = _S911 + _S912 * _S806 * _S809;

#line 17
    float _S914 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 10);

#line 17
    _s_diff_ctx_4._S783 = _S914;

#line 17
    float _S915 = _S913 + _S914 * _S807 * _S808;

#line 17
    float _S916 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 10);

#line 17
    _s_diff_ctx_4._S784 = _S916;

#line 17
    _S846.vals_1[10] = float16_t(_S915 + _S916 * _S806 * _S808);

#line 17
    float _S917 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 11);

#line 17
    _s_diff_ctx_4._S785 = _S917;

#line 17
    float _S918 = _S917 * _S807 * _S809;

#line 17
    float _S919 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 11);

#line 17
    _s_diff_ctx_4._S786 = _S919;

#line 17
    float _S920 = _S918 + _S919 * _S806 * _S809;

#line 17
    float _S921 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 11);

#line 17
    _s_diff_ctx_4._S787 = _S921;

#line 17
    float _S922 = _S920 + _S921 * _S807 * _S808;

#line 17
    float _S923 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 11);

#line 17
    _s_diff_ctx_4._S788 = _S923;

#line 17
    _S846.vals_1[11] = float16_t(_S922 + _S923 * _S806 * _S808);

#line 17
    float _S924 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 12);

#line 17
    _s_diff_ctx_4._S789 = _S924;

#line 17
    float _S925 = _S924 * _S807 * _S809;

#line 17
    float _S926 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 12);

#line 17
    _s_diff_ctx_4._S790 = _S926;

#line 17
    float _S927 = _S925 + _S926 * _S806 * _S809;

#line 17
    float _S928 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 12);

#line 17
    _s_diff_ctx_4._S791 = _S928;

#line 17
    float _S929 = _S927 + _S928 * _S807 * _S808;

#line 17
    float _S930 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 12);

#line 17
    _s_diff_ctx_4._S792 = _S930;

#line 17
    _S846.vals_1[12] = float16_t(_S929 + _S930 * _S806 * _S808);

#line 17
    float _S931 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S805, 13);

#line 17
    _s_diff_ctx_4._S793 = _S931;

#line 17
    float _S932 = _S931 * _S807 * _S809;

#line 17
    float _S933 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S805, 13);

#line 17
    _s_diff_ctx_4._S794 = _S933;

#line 17
    float _S934 = _S932 + _S933 * _S806 * _S809;

#line 17
    float _S935 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S803, _S811, 13);

#line 17
    _s_diff_ctx_4._S795 = _S935;

#line 17
    float _S936 = _S934 + _S935 * _S807 * _S808;

#line 17
    float _S937 = s_primal_ctx_TensorView_load_prim_0(featureGrid_1, _S810, _S811, 13);

#line 17
    _s_diff_ctx_4._S796 = _S937;

#line 17
    _S846.vals_1[13] = float16_t(_S936 + _S937 * _S806 * _S808);

#line 17
    _S846.vals_1[14] = _S812;

#line 17
    _S846.vals_1[15] = _S813;

#line 17
    _S846.vals_1[16] = _S815;

#line 17
    _S846.vals_1[17] = _S816;

#line 17
    _S846.vals_1[18] = _S818;

#line 17
    _S846.vals_1[19] = _S819;

#line 17
    _S846.vals_1[20] = _S821;

#line 17
    _S846.vals_1[21] = _S822;

#line 17
    _S846.vals_1[22] = _S824;

#line 17
    _S846.vals_1[23] = _S825;

#line 17
    _S846.vals_1[24] = _S827;

#line 17
    _S846.vals_1[25] = _S828;

#line 17
    _S846.vals_1[26] = _S830;

#line 17
    _S846.vals_1[27] = _S831;

#line 17
    _S846.vals_1[28] = _S833;

#line 17
    _S846.vals_1[29] = _S834;

#line 17
    _S846.vals_1[30] = _S836;

#line 17
    _S846.vals_1[31] = _S837;

#line 17
    return _S846;
}


#line 17
void s_bwd_prop_TensorView_load_prim_0(TensorView_0 _S938, int _S939, int _S940, int _S941, float _S942)
{

#line 17
    TensorView_load_prim_idx3_bwd_0(_S938, _S939, _S940, _S941, _S942);

#line 17
    return;
}


#line 17
void s_bwd_prop_computeInterpolatedFeature_0(TensorView_0 featureGrid_2, FeatureGrid2DIndex_0 index_2, s_diff_HalfFeature_0 _s_dOut_4, s_bwd_prop_computeInterpolatedFeature_Intermediates_0 _s_diff_ctx_5)
{

#line 17
    float _S943 = index_2.weights_0.x;

#line 17
    float _S944 = index_2.weights_0.y;

#line 17
    uint _S945 = index_2.cellId_0.x;

#line 17
    int _S946 = int(_S945);

#line 17
    uint _S947 = index_2.cellId_0.y;

#line 17
    int _S948 = int(_S947);

#line 17
    float _S949 = 1.0 - _S943;

#line 17
    float _S950 = 1.0 - _S944;

#line 17
    int _S951 = int(_S945 + 1U);

#line 17
    int _S952 = int(_S947 + 1U);

#line 17
    float s_diff_loadedf_T_0 = float(_s_dOut_4.vals_0[13]);

#line 17
    float _S953 = _S944 * s_diff_loadedf_T_0;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 13, _S943 * _S953);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 13, _S949 * _S953);

#line 17
    float _S954 = _S950 * s_diff_loadedf_T_0;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 13, _S943 * _S954);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 13, _S949 * _S954);

#line 17
    float s_diff_loadedf_T_1 = float(_s_dOut_4.vals_0[12]);

#line 17
    float _S955 = _S944 * s_diff_loadedf_T_1;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 12, _S943 * _S955);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 12, _S949 * _S955);

#line 17
    float _S956 = _S950 * s_diff_loadedf_T_1;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 12, _S943 * _S956);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 12, _S949 * _S956);

#line 17
    float s_diff_loadedf_T_2 = float(_s_dOut_4.vals_0[11]);

#line 17
    float _S957 = _S944 * s_diff_loadedf_T_2;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 11, _S943 * _S957);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 11, _S949 * _S957);

#line 17
    float _S958 = _S950 * s_diff_loadedf_T_2;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 11, _S943 * _S958);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 11, _S949 * _S958);

#line 17
    float s_diff_loadedf_T_3 = float(_s_dOut_4.vals_0[10]);

#line 17
    float _S959 = _S944 * s_diff_loadedf_T_3;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 10, _S943 * _S959);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 10, _S949 * _S959);

#line 17
    float _S960 = _S950 * s_diff_loadedf_T_3;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 10, _S943 * _S960);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 10, _S949 * _S960);

#line 17
    float s_diff_loadedf_T_4 = float(_s_dOut_4.vals_0[9]);

#line 17
    float _S961 = _S944 * s_diff_loadedf_T_4;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 9, _S943 * _S961);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 9, _S949 * _S961);

#line 17
    float _S962 = _S950 * s_diff_loadedf_T_4;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 9, _S943 * _S962);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 9, _S949 * _S962);

#line 17
    float s_diff_loadedf_T_5 = float(_s_dOut_4.vals_0[8]);

#line 17
    float _S963 = _S944 * s_diff_loadedf_T_5;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 8, _S943 * _S963);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 8, _S949 * _S963);

#line 17
    float _S964 = _S950 * s_diff_loadedf_T_5;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 8, _S943 * _S964);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 8, _S949 * _S964);

#line 17
    float s_diff_loadedf_T_6 = float(_s_dOut_4.vals_0[7]);

#line 17
    float _S965 = _S944 * s_diff_loadedf_T_6;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 7, _S943 * _S965);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 7, _S949 * _S965);

#line 17
    float _S966 = _S950 * s_diff_loadedf_T_6;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 7, _S943 * _S966);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 7, _S949 * _S966);

#line 17
    float s_diff_loadedf_T_7 = float(_s_dOut_4.vals_0[6]);

#line 17
    float _S967 = _S944 * s_diff_loadedf_T_7;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 6, _S943 * _S967);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 6, _S949 * _S967);

#line 17
    float _S968 = _S950 * s_diff_loadedf_T_7;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 6, _S943 * _S968);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 6, _S949 * _S968);

#line 17
    float s_diff_loadedf_T_8 = float(_s_dOut_4.vals_0[5]);

#line 17
    float _S969 = _S944 * s_diff_loadedf_T_8;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 5, _S943 * _S969);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 5, _S949 * _S969);

#line 17
    float _S970 = _S950 * s_diff_loadedf_T_8;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 5, _S943 * _S970);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 5, _S949 * _S970);

#line 17
    float s_diff_loadedf_T_9 = float(_s_dOut_4.vals_0[4]);

#line 17
    float _S971 = _S944 * s_diff_loadedf_T_9;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 4, _S943 * _S971);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 4, _S949 * _S971);

#line 17
    float _S972 = _S950 * s_diff_loadedf_T_9;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 4, _S943 * _S972);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 4, _S949 * _S972);

#line 17
    float s_diff_loadedf_T_10 = float(_s_dOut_4.vals_0[3]);

#line 17
    float _S973 = _S944 * s_diff_loadedf_T_10;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 3, _S943 * _S973);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 3, _S949 * _S973);

#line 17
    float _S974 = _S950 * s_diff_loadedf_T_10;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 3, _S943 * _S974);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 3, _S949 * _S974);

#line 17
    float s_diff_loadedf_T_11 = float(_s_dOut_4.vals_0[2]);

#line 17
    float _S975 = _S944 * s_diff_loadedf_T_11;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 2, _S943 * _S975);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 2, _S949 * _S975);

#line 17
    float _S976 = _S950 * s_diff_loadedf_T_11;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 2, _S943 * _S976);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 2, _S949 * _S976);

#line 17
    float s_diff_loadedf_T_12 = float(_s_dOut_4.vals_0[1]);

#line 17
    float _S977 = _S944 * s_diff_loadedf_T_12;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 1, _S943 * _S977);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 1, _S949 * _S977);

#line 17
    float _S978 = _S950 * s_diff_loadedf_T_12;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 1, _S943 * _S978);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 1, _S949 * _S978);

#line 17
    float s_diff_loadedf_T_13 = float(_s_dOut_4.vals_0[0]);

#line 17
    float _S979 = _S944 * s_diff_loadedf_T_13;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S952, 0, _S943 * _S979);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S952, 0, _S949 * _S979);

#line 17
    float _S980 = _S950 * s_diff_loadedf_T_13;

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S951, _S948, 0, _S943 * _S980);

#line 17
    s_bwd_prop_TensorView_load_prim_0(featureGrid_2, _S946, _S948, 0, _S949 * _S980);

#line 17
    return;
}


#line 17
void s_bwd_computeInterpolatedFeature_0(TensorView_0 _S981, FeatureGrid2DIndex_0 _S982, s_diff_HalfFeature_0 _S983)
{

#line 17
    s_bwd_prop_computeInterpolatedFeature_Intermediates_0 _S984;

#line 17
    HalfFeature_0 _S985 = s_bwd_primal_computeInterpolatedFeature_0(_S981, _S982, _S984);

#line 17
    s_bwd_prop_computeInterpolatedFeature_0(_S981, _S982, _S983, _S984);

#line 17
    return;
}


#line 30 2
layout(local_size_x = 32, local_size_y = 4, local_size_z = 1) in;
void main()
{


    ivec2 pixel_0 = ivec3(gl_GlobalInvocationID).xy;

    ThreadInfo_0 thread_info_0 = ThreadInfo_x24init_0(ivec3(gl_LocalInvocationID).xy, ivec2(32, 4));



    s_diff_HalfFeature_0 output_grad_0;

#line 50
    FeatureGrid2DIndex_0 feature_index_0 = FeatureGrid2DIndex_x24init_0(uvec2(ivec2(512, 512)), ivec2(pixel_0.x), ivec2(32, 32));



    ivec3 _S986 = ivec3(pixel_0, 0);

#line 54
    vec3 target_color_0 = (texelFetch((target_texture_0), ((_S986)).xy, ((_S986)).z)).xyz;

#line 66
    const vec4 _S987 = vec4(0.0, 0.0, 0.0, 1.0);


    const vec4 _S988 = vec4(1.0, 0.0, 1.0, 1.0);


    const vec4 _S989 = vec4(0.0, 1.0, 1.0, 1.0);



    uvec2 _S990 = uvec2(pixel_0);

#line 58
    vec3 _S991 = vec3(0.0);

#line 81
    s_diff_HalfFeature_0 _S992 = HalfFeature_x24_syn_dzero_0();

#line 81
    int i_0 = 0;

#line 81
    for(;;)
    {

#line 43
        output_grad_0.vals_0[i_0] = 0.0HF;

#line 42
        int i_1 = i_0 + 1;

#line 42
        if(i_1 < 32)
        {
        }
        else
        {

#line 42
            break;
        }

#line 42
        i_0 = i_1;

#line 42
    }



    uint param_offset_0 = 0U;

#line 46
    uint grad_offset_0 = 0U;

#line 46
    MLPHalf32X32_0 mlp_3 = MLPHalf32X32_x24init_0(param_offset_0, grad_offset_0, thread_info_0);

    TensorView_0 featureGrid_3 = TensorView_x24init_0(param_offset_0, grad_offset_0, 14U, 462U);


    HalfFeature_0 feature_1 = computeInterpolatedFeature_0(featureGrid_3, feature_index_0);
    HalfFeature_0 output_0 = MLPHalf32X32_forward_0(mlp_3, feature_1);



    vec3 color_0 = vec3(float(output_0.vals_1[0]), float(output_0.vals_1[1]), float(output_0.vals_1[2]));

    DiffPair_float3_0 color_pair_0;

#line 58
    color_pair_0.primal_0 = color_0;

#line 58
    color_pair_0.differential_0 = _S991;
    float loss_0 = L2Loss_0(color_0, target_color_0);
    s_bwd_L2Loss_0(color_pair_0, target_color_0, 1.0);
    float gradient_scalar_0 = PushConstants_0.gradient_scale_0 / 786432.0;
    output_grad_0.vals_0[0] = float16_t(color_pair_0.differential_0.x * gradient_scalar_0);
    output_grad_0.vals_0[1] = float16_t(color_pair_0.differential_0.y * gradient_scalar_0);
    output_grad_0.vals_0[2] = float16_t(color_pair_0.differential_0.z * gradient_scalar_0);

#line 79
    vec4 _S993 = vec4(color_0, 1.0);

#line 79
    vec4 debug_color_0 = _S987;

#line 79
    i_0 = 0;

#line 79
    for(;;)
    {

#line 79
        int _S994 = i_0;

#line 68
        if(isnan(output_0.vals_1[i_0]))
        {

#line 68
            debug_color_0 = _S988;

#line 68
        }
        else
        {

#line 68
            vec4 debug_color_1;


            if(isinf(output_0.vals_1[_S994]))
            {

#line 71
                debug_color_1 = _S989;

#line 71
            }
            else
            {

#line 71
                debug_color_1 = debug_color_0;

#line 71
            }

#line 71
            debug_color_0 = debug_color_1;

#line 71
        }

#line 67
        int i_2 = i_0 + 1;

#line 67
        if(i_2 < 32)
        {
        }
        else
        {

#line 67
            break;
        }

#line 67
        i_0 = i_2;

#line 67
    }

#line 76
    imageStore((debug_texture_0), ivec2((_S990)), debug_color_0);

    imageStore((error_texture_0), ivec2((_S990)), vec4(loss_0 / 786432.0, float(0), float(0), float(0)));
    imageStore((output_texture_0), ivec2((_S990)), _S993);

    DiffPair_HalfFeature_0 input_feature_pair_0;

#line 81
    input_feature_pair_0.primal_0 = feature_1;

#line 81
    input_feature_pair_0.differential_0 = _S992;

    s_bwd_MLPHalf32X32_forward_0(mlp_3, input_feature_pair_0, output_grad_0);
    s_bwd_computeInterpolatedFeature_0(featureGrid_3, feature_index_0, input_feature_pair_0.differential_0);
    return;
}

